void setup(){
  size(600, 600); 
}

var getUrlVars = function() {
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
        vars[key] = value;
    });
    return vars;
}

//Code written by Scholarly Gaming
//Game, concept, and characters created by Supercell and the Clash Royale dev team

/**
 * Check out this link for a full guide to using and editing this program: 
 * https://www.khanacademy.org/computer-programming/clash-royale-engine-guide/6273750460809216/embedded?editor=no&buttons=no&author=yes&embed=yes&width=800&height=800
 * 
 * Use this for a larger screen:
 * https://www.khanacademy.org/computer-programming/clash-royale-engine/6127007668649984/embedded?editor=no&buttons=no&author=yes&embed=yes&width=800&height=800
**/

//Tip: Click on the tabs above the terminal portion of the screen - you'll see some customization options there.

//Decks (Change these variables to change your deck.)
var bDeck = ["Giant", "Zappies", "Skeletons", "Miner", "Musketeer", "Rocket", "Baby Dragon", "Minions"];
var rDeck = ["Zappies", "Prince", "Balloon", "Elixir Collector", "Musketeer", "Rocket", "Baby Dragon", "Minions"];
/**
 * To change your deck, use an array of card names like so: ["Card1", "Card2", "Card3"...]
 * Decks can be as long as you want, but must contain at least 5 cards (otherwise, the program will crash)
 * Use full, capitalized names for cards: "PEKKA" does not work, but "P.E.K.K.A." will; "Log" does not work, but "The Log" will; "balloon" will not work, but "Balloon" will.
**/ //Open for deck changing help

//Note: To open a set of lines, click on the blue two-way arrows character or the small grey triangle by the line number that it starts on.

{
var regenX = 1; //Elixir regen speed (1 is standard)
var startE = 5; //Starting elixir
var maxE = 10; //Max elixir
var reorder = false; //Shuffle decks?
}//Open for elixir/deck settings

var viewAng = false; //See troop directions
var viewReload = false; //See troop cooldowns
var projLines = false; //See projectile paths
var extGraphics = true; //See some better graphics (set to false for less lag)

var version = getUrlVars()["version"]; //Which card data version? (Try "retro"!)

if(version === undefined){
    version = "current";
}
/**
 * Version options:
 * 
 * "current" - Stats as they are in the live game / confirmed balance stats for the live game(as such, might be a bit ahead - if we're in the pre-balance weekend and you want live data, you'll need to use a legacy version). These stats WILL see changes as time goes on. I will try not to break these stats, but it may happen if I'm adding new cards, or if there's a significant rework, so you've been warned.
 * "legacy-MMYY" - Stats as they were in the month MM of the year 20YY. Currently supported for October 2019 and later. As you go back, cards will get removed, so make sure you use a time-appropriate deck. Relative stability guaranteed for all existing legacy versions - no edits will be performed unless there is a problem.
 * "retro" - Card stats, excluding Mirror, have been set to their stats as of Clash Royale's original release. Mirror now no longer creates Level 10 cards(hardcoded). Cards newer than the original release have been removed, so pushes will likely fail, and you will need to enter a valid deck. Stability is guaranteed here - there will be no edits. Note that most cards have recieved massive changes. For your convenience, following is a list of all of the 42 cards you can use: 
 * {Spear Goblins, X-Bow, Knight, Giant, Musketeer, Skeletons, Cannon, Wizard, P.E.K.K.A., Mini P.E.K.K.A., Baby Dragon, Minions, Minion Horde, Goblins, Bomber, Elixir Collector, Witch, Goblin Hut, Tombstone, Inferno Tower, Prince, Barbarians, Archers, Fireball, Arrows, Rocket, Zap, Freeze, Valkryie, Giant Skeleton, Balloon, Bomb Tower, Golem, Rage, Goblin Barrel, Mortar, Barbarian Hut, Hog Rider, Skeleton Army, Lightning, Tesla, Mirror
 }
 * "dev" - Includes current game stats as well as speculative/new card ideas and balances. (Hence, dev.) Don't be surprised if you see some new mechanics and cards here, or if something here is completely broken - this channel has no stability guarantee. New cards will be added in a convenient list when I choose to add any, which I haven't.
**/ //Open to see version options

/**
 * Three notes for visibility:
 * 
 * 1. If you have made a mod for this game, and you would like to update to the current version, just copy over your changes. Everything should be backwards-compatible. Please tell me if something does break.
 * 2. If you have created a new card for this game, I would be more than willing to add it to a dev version or something similar here. (Providing credit to you, naturally.)
 * 3. I will likely add an in-game deck changing feature and some new push features due to people's requests. Thanks for your feedback!
**/

/**
 * Started on September 21st, 2019
 * 
 * Release R1.0.0: 1-4-20, 3:35 PM
 * Welcome to my Clash Royale engine! Here, you can use any card you want, in any deck you want, and make any change that you want - all with just a little bit of edits!
 * Also has Push Mode, multiple arenas, card information screens, and elixir settings.
 * Contains a completely new mode as well - Retro Version! Sets everything back to January 2016 stats. See how different the game was back then!
 * Release R1.0.1: 1-4-20, 8:35 PM
 * Fixed Firecracker's load time
 * Release R1.0.2: 1-7-20, 10:25 AM
 * Added sight range stat to info screen, added rounding to fire rate stat, fixed Firecracker again
 * Release R1.0.3: 1-7-20, 11:05 AM
 * Added fix to allow for any size of screen (Note: May decrease framerate somewhat if not 600x600)
 * Release R1.0.4: 1-8-20, 11:10 AM
 * Added search feature to allow you to replace the cards in your deck! Type the card you want and the slot you want to put it into(in your order - 0 is the top-left of your hand, 1 is the top-right, 2 bottom-left, 3 bottom-right, 4 is the next card). Then, press ENTER, and the selected player's card will be replaced in their deck! Also fixes load time rounding(info).
 * Release R1.0.5: 1-12-20, 9:00 AM
 * QOL'd info screen some more, added air-targeting troops (NOTE - Air-targeting troops will attack and target towers, as if such a troop launches, there'd be no point in having it otherwise, so...) Also added a troop debug tool - troops that have some stats issues (IE - their HP is not their max HP, their range is more than their sight range...) that are likely input errors will put warnings in the chat. Also updated search tool. Also added fix to Dart Goblin. Added small patch to allow for deathElixir to give different amounts of elixir.
 * Release R1.0.6: 1-22-20, 9:15 AM
 * Fixed Firecracker again, made spread tag for NT projectiles, fixed Miner glitches
 * Release R1.1.0: 2-3-20, 9:00 AM
 * Added in February 2020 balance changes. Fixed legacy Barbarian Hut and Witch. Added January 2020 legacy version. Fixed a lot of load times.
 * Release R1.1.1: In Progress
 * Fixed the defender ability to act more like the EWiz. Fixed sight range in stats to get rid of the extra 0s at the end. Fixed projectile collision to allow for faster projectile speeds without glitches occuring.
**/

{
//Battle management
var btTime = 0;
var btStyle = "new"; //"old", "ramp"
var btCool = 0;
var btMaxCool = 150;

//Deck stuff for Blue
var bOrder = [];
var bCardCool = 0;
var bCardMCool = 60;
var bSel = -1;

//Deck stuff for Red
var rOrder = [];
var rCardCool = 0;
var rCardMCool = 60;
var rSel = -1;

//Elixir bar
var elixir = startE; //Current elixir (Blue)
var elixirR = startE; //Current elixir (Red)
regenX = regenX/84;

//Who's who (flag system)
var br = "Blue";
var banim = 10;
var ranim = 0;

//Ultimate debug mode. (Displays tile data and some troop attack data.) Will cause more lag.
var testing = true;
testing = false;

//Card speed mult
var spdm = 1650;

//["name", "definition", elixir, [create]]

//["name", health, max, attack, x, y, size(diameter), mass, speed, range, srange, cool, maxCool, ret, target, lock, shield, aoe, type, targetType, penalty, load time, deploy time, [effects], [special]]

//Cards array
var cards = [];

var cardsInit = function(){}; //Start
}//Variables you probably don't care about

//Current version (for editing)
if(version === "current"){
    var cardsInit = function(){
    cards = [
["Spear Goblins", "Three unarmored ranged attackers. Who the heck taught these guys to throw spears!?! Who thought that was a good idea?!", 2, [["spear goblin", 110, 110, 67, 0, 0.5, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //0
["Dart Goblin", "Runs fast, shoots far and chews gum. How does he blow darts with a mouth full of Double Trouble gum? Years of didgeridoo lessons.", 3, [["dart goblin", 216, 216, 100, 0.5, 0.5, 1, 3, 120, 6.5, 7.5, 0, 21, 10.5, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //1
["Elixir Golem", "Splits into two Elixir Golemites when destroyed, which split into two sentient Blobs when defeated. A Blob gives your opponent 1 Elixir when destroyed!", 3, [["elixir golem", 1196, 1196, 212, 0.5, 0.5, 1.2, 15, 45, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["elixir golemite", 598, 598, 106, 0, 0.5, 1, 10, 60, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 299, 299, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 299, 299, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]], ["elixir golemite", 598, 598, 106, 0, -0.5, 10, 10, 60, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 299, 299, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 299, 299, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]]]], ["dsplit"]]]]], //Again, all one troop. //2
["X-Bow", "Nice tower you got there. Would be a shame if this X-Bow whittled it down from this side of the Arena...", 6, [["xbow", 1383, 1383, 26, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 7.5, 7.5, -1, false, 0, 0, "building", "ground", 1, 30, 105, [], [["lifetime", 1200], ["ps", 1600]]]]], //3
["Knight", "A tough melee fighter. The Barbarian's handsome, cultured cousin. Rumor has it that he was knighted based on the sheer awesomeness of his mustache alone.", 3, [["knight", 1452, 1452, 167, 0.5, 0.5, 1, 6, 60, 1.2, 5.5, 0, 36, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //4
["Giant", "Slow but durable, only attacks buildings. A real one-man wrecking crew!", 5, [["giant", 3275, 3275, 211, 0.5, 0.5, 1.5, 18, 45, 1.2, 7.5, 0, 45, 15, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]],]], //5
["Musketeer", "Don't be fooled by her delicately coiffed hair, the Musketeer is a mean shot with her trusty boomstick.", 4, [["musketeer", 598, 598, 181, 0.5, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []],]], //6
["Skeletons", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 1, [["skeleton", 67, 67, 67, 0, 0.5, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, -0.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, 1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //7
["Cannon", "Defensive building. Shoots cannonballs with deadly effect, but cannot target flying troops.", 3, [["cannon", 742, 742, 167, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0, "building", "ground", 1, 30, 30, [], [["lifetime", 900], ["ps", 900]]]]], //8
["Wizard", "The most awesome man to ever set foot in the arena, the Wizard will blow you away with his handsomeness... and/or fireballs.", 5, [["wizard", 598, 598, 234, 0.5, 0.5, 1, 5, 60, 5.5, 5.5, 0, 42, 12, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, []],]], //9
["Fire Spirits", "These three Fire Spirits are on a kamikaze mission to give you a warm hug. It'd be adorable if they weren't on fire.", 2, [["fire spirit", 91, 91, 178, 0, 0.5, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, -0.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, 1.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]],]], //10
["Ice Spirit", "Spawns one lively little Ice Spirit to freeze a group of enemies. Stay frosty.", 1, [["ice spirit", 190, 190, 91, 0.5, 0.5, 0.8, 1, 120, 2.5, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"], ["stun", 30]]],]], //11
["Zappies", "Spawns a pack of miniature Zap machines. Who controls them...? Only the Master Builder knows.", 4, [["zappy", 440, 440, 84, -0.2, 0.5, 1.2, 4, 60, 4.5, 5.5, 0, 60, 30, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 84, 0.8, -0.2, 1.2, 4, 60, 4.5, 5.5, 0, 60, 30, -1, false, 0, 0, "ground", "all", 1, 34.5, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 84, 0.8, 1.2, 1.2, 4, 60, 4.5, 5.5, 0, 60, 30, -1, false, 0, 0, "ground", "all", 1, 39, 30, [], [["stun", 15], ["ps", 100000]]]]], //12 (mass unknown)
["P.E.K.K.A.", "A heavily armored, slow melee fighter. Swings from the hip but packs a huge punch.", 7, [["pekka", 3125, 3125, 678, 0.5, 0.5, 1.5, 18, 45, 1.2, 5.0, 0, 54, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, [], [["resistance"]]],]], //13
["Sparky", "Sparky slowly charges up, then unloads MASSIVE area damage. Overkill isn't in her vocabulary.", 6, [["sparky", 1200, 1200, 1100, 0.5, 0.5, 2, 18, 45, 5.5, 5.5, 120, 120, 15, -1, false, 0, 1.8, "ground", "ground", 1, 30, 30, [], [["resistance"], ["weak-stun"], ["recoil", 0.75]]],]], //14
["Mini P.E.K.K.A.", "The Arena is a certified butterfly-free zone. No distractions for P.E.K.K.A, only destruction.", 4, [["mini pekka", 1129, 1129, 598, 0.5, 0.5, 0.9, 4, 90, 1.2, 5.5, 0, 54, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //15 (First generated one!)
["Ice Wizard", "This chill caster throws ice shards that slow down enemies' movement and attack speed. Despite being freezing cold, he has a handlebar mustache that's too hot for TV.", 3, [["ice wizard", 590, 590, 75, 0.5, 0.5, 1.0, 5, 60, 5.5, 5.5, 0, 51, 15, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["slow", 75]]]]], //16
["Goblin Cage", "When the Goblin Cage is destroyed, a Goblin Brawler is unleashed into the Arena! Goblin Brawler always skips leg day.", 4, [["cage", 800, 800, 0, 0.5, 0.5, 2, 0, 0, 0.0, 0.0, 0, 27000, 27000, -1, false, 0, 0.0, "building", "ground", 1, 30, 30, [], [["lifetime", 600], ["split", [["brawler", 853, 853, 264, 0, 0, 1.0, 2, 90, 0.8, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 5, 15, [], []]]]]]]], //17
["Cannon Cart", "A Cannon on wheels?! Bet they won't see that coming! Once you break its shield, it becomes a Cannon not on wheels.", 5, [["cannon cart", 742, 742, 168, 0.5, 0.5, 1.2, 3, 90, 5.5, 6, 0, 30, 18, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["resistance"], ["split", [["cannon cart", 742, 742, 168, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0.0, "building", "ground", 1, 2, 3, [], [["lifetime", 900]]]]]]]]], //18
["Mega Minion", "Flying, armored and powerful. What could be its weakness?! Cupcakes.", 3, [["mega minion", 695, 695, 258, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 48, 12, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]]]], //19
["Baby Dragon", "Burps fireballs from the sky that deal area damage. Baby dragons hatch cute, hungry and ready for a barbeque.", 4, [["baby dragon", 1024, 1024, 133, 0.5, 0.5, 1.0, 5, 90, 3.5, 5.5, 0, 45, 9, -1, false, 0, 1.2, "air", "all", 1, 30, 30, [], []]]], //20
["Royal Giant", "Destroying enemy buildings with his massive cannon is his job; making a raggedy blond beard look good is his passion.", 6, [["royal giant", 2544, 2544, 254, 0.5, 0.5, 1.5, 18, 45, 5.0, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]]]], //21
["Minions", "Three fast, unarmored flying attackers. Roses are red, minions are blue, they can fly, and will crush you!", 3, [["minion", 190, 190, 84, 0, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, -0.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, 1.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]]]], //22
["Minion Horde", "Six fast, unarmored flying attackers. Three's a crowd, six is a horde!", 5, [["minion", 190, 190, 84, 1.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, -0.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 52.5, 30, [], [["ps", 810.0001]]]]], //23
["Goblins", "Three fast, unarmored melee attackers. Small, fast, green and mean!", 2, [["goblin", 167, 167, 99, 0, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, -0.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, 1.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //24
["Guards", "Three ruthless bone brothers with shields. Knock off their shields and all that's left are three ruthless bone brothers.", 3, [["guard", 199, 199, 90, 0, 0.5, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, -0.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, 1.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //25
["Bomber", "Small, lightly protected skeleton that throws bombs. Deals area damage that can wipe out a swarm of enemies.", 3, [["bomber", 398, 398, 271, 0.5, 0.5, 1.0, 4, 60, 5.0, 5.5, 0, 57, 6, -1, false, 0, 1.5, "ground", "ground", 1, 30, 30, [], []]]], //26
["Flying Machine", "The Master Builder has sent his first contraption to the Arena! It's a fast and fun flying machine, but fragile!", 4, [["flying machine", 510, 510, 142, 0.5, 0.5, 1.0, 3, 90, 6.0, 6.0, 0, 33, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []]]], //27
["Elixir Collector", "You gotta spend Elixir to make Elixir! This building makes 8 Elixir over its Lifetime. Does not appear in your starting hand.", 6, [["elixir collector", 888, 888, 0, 0.5, 0.5, 2, 0, 0, -1.0, -1.0, 0, 255, 255, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 2100], ["elixir", 255, 255]]]]], //28
["Bats", "Spawns a handful of tiny flying creatures. Think of them as sweet, purple... balls of DESTRUCTION!", 2, [["bat", 67, 67, 67, 0.5+sin(radians(36)), 0.5+cos(radians(36)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(108)), 0.5+cos(radians(108)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(180)), 0.5+cos(radians(180)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(252)), 0.5+cos(radians(252)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(324)), 0.5+cos(radians(324)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], []]]], //29
["Witch", "Summons Skeletons, shoots destructo beams, has glowing pink eyes that unfortunately don't shoot lasers.", 5, [["witch", 696, 696, 111, 0.5, 0.5, 1.0, 8, 60, 5.0, 5.5, 0, 33, 21, -1, false, 0, 1, "ground", "all", 1, 30, 30, [], [["spawner", 105, 210, [["skeleton", 67, 67, 67, 2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, 2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, -2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, -2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []],]]]]]], //30
["Night Witch", "Summons Bats to do her bidding, even after death! If you get too close, she isn't afraid of pitching in with her mean-looking battle staff.", 4, [["night witch", 750, 750, 260, 0.5, 0.5, 1.0, 4, 60, 1.6, 5.5, 0, 45, 22.5, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["split", [["bat", 67, 67, 67, 0, -1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, -1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, 1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["spawner", 105, 210, [["bat", 67, 67, 67, 0, 1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, -1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["dspawn"]]]]], //31
["Goblin Hut", "Building that spawns Spear Goblins. But don't look inside. You don't want to see how they are made.", 5, [["goblin hut", 1293, 1293, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 135, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1500], ["spawner", 1, 135, [["spear goblin", 110, 110, 67, -0.5, 0, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 0, 0, [], []]]]]]]], //32
["Tombstone", "Troop building that periodically deploys Skeletons to fight the enemy... and when destroyed, spawns 3 Skeletons! Creepy.", 3, [["tombstone", 422, 422, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1200], ["split", [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, -0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, 0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []],]], ["spawner", 93, 93, [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //33
["Inferno Dragon", "Shoots a focused beam of fire that increases in damage over time. Wears a helmet because flying can be dangerous.", 4, [["inferno dragon", 1070, 1070, 30, 0.5, 0.5, 1.0, 5, 60, 3.5, 5.5, 0, 12, 36, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["inferno", 0, 60, 30, 70, 350]]]]], //34
["Inferno Tower", "Defensive building, roasts targets for damage that increases over time. Burns through even the biggest and toughest enemies!", 5, [["inferno tower", 1452, 1452, 35, 0.5, 0.5, 1.2, 0, 0, 6, 6, 0, 12, 60, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 900], ["inferno", 0, 60, 35, 132, 704]]]]], //35
["Prince", "Don't let the little pony fool you. Once the Prince gets a running start, you WILL be trampled. Deals double damage once he gets charging.", 5, [["prince", 1615, 1615, 325, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 42, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 325, 60, 651, 120]]]]], //36
["Battle Ram", "Two Barbarians holding a big log charge at the nearest building, dealing significant damage if they connect; then they go to town with their swords!", 4, [["battle ram", 756, 756, 220, 0.5, 0.5, 1.5, 6, 60, 0.5, 5.5, 0, 12, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 220, 60, 440, 120], ["kamikaze"], ["split", [["barbarian", 555, 555, 159, 0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []], ["barbarian", 555, 555, 159, -0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []]]], ["dsplit"]]]]], //37
["Barbarians", "A horde of melee attackers with mean mustaches and even meaner tempers.", 5, [["barbarian", 555, 555, 159, 0.5+sin(radians(54)), 0.5+cos(radians(54)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(126)), 0.5+cos(radians(126)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(198)), 0.5+cos(radians(198)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(270)), 0.5+cos(radians(270)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 43.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(342)), 0.5+cos(radians(342)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 48, 30, [], []]]], //38
["Electro Dragon", "Spits out bolts of electricity hitting up to three targets. Suffers from middle child syndrome to boot.", 5, [["electro dragon", 790, 790, 159, 0.5, 0.5, 1.2, 7, 60, 3.5, 5.5, 0, 63, 21, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["stun", 15], ["ps", 2000], ["chain", 2, 3.5, 159, []]]]]], //39
["Elite Barbarians", "Spawns a pair of leveled up Barbarians. They're like regular Barbarians, only harder, better, faster and stronger.", 6, [["elite barbarian", 970, 970, 301, 0.5, 1.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["elite barbarian", 970, 970, 301, 0.5, -0.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //40
["Archers", "A pair of lightly armored ranged attackers. They'll help you take down ground and air units, but you're on your own with hair coloring advice.", 3, [["archer", 252, 252, 89, 0.5, 1.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []], ["archer", 252, 252, 89, 0.5, -0.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []]]], //41
["Three Musketeers", "Trio of powerful, independent markswomen, fighting for justice and honor. Disrespecting them would not be just a mistake, it would be a cardinal sin!", 9, [["musketeer", 598, 598, 181, 0.5-0.7, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 60, 60, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(-30)), 0.5-0.7*cos(radians(-30)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 60, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(210)), 0.5-0.7*cos(radians(210)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 45, 60, []],]], //42
["Rascals", "Spawns a mischievous trio of Rascals! The boy takes the lead, while the girls pelt enemies from behind... with slingshots full of Double Trouble Gum!", 5, [["rascal boy", 1515, 1515, 110, -0.1, 0.5, 1.5, 10, 60, 0.8, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, -0.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 34.5, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, 1.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 39, 30, [], []]]], //43
["Fireball", "Annnnnd... Fireball. Incinerates a small area, dealing high damage. Reduced damage to Crown Towers.", 4, [["fireball", 0, 0, 572, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.8], ["spell"]]]]]], "spell"], //44 (GOT EEM!)
["Giant Snowball", "It’s HUGE! Once it began rolling down Frozen Peak, there was no stopping it. Enemies hit are knocked back and slowed down.", 2, [["snowball", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.5], ["slow", 75], ["spell"]]]]]], "spell"], //45
["Arrows", "Arrows pepper a large area, damaging all enemies hit. Reduced damage to Crown Towers.", 3, [["arrows", 0, 0, 101, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["spell", [["spell"]]], ["spell", [["spell"], ["wait", 6]]], ["spell", [["spell"], ["wait", 12]]], ["ps", 1600]]]], "spell"], //46
["Rocket", "Deals high damage to a small area. Looks really awesome doing it. Reduced damage to Crown Towers.", 6, [["rocket", 0, 0, 1232, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1], ["spell"]]], ["ps", 500]]]], "spell"], //47
["Zap", "Zaps enemies, briefly stunning them and dealing damage inside a small radius. Reduced damage to Crown Towers.", 2, [["zap", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"]]]]]], "spell"], //48
["Freeze", "Freezes and damages troops and buildings, making them unable to move or attack. Everybody chill.", 4, [["freeze", 0, 0, 95, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 120], ["spell"]]]]]], "spell"], //49
["Ice Golem", "He's tough, targets buildings and explodes when destroyed, slowing nearby enemies. Made entirely out of ice... or is he?! Yes.", 2, [["ice golem", 994, 994, 70, 0.5, 0.5, 1.4, 6, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["ddmg", 70, 2, [["slow", 30]]]]]]], //50
["Skeleton Barrel", "It's a Skeleton party in the sky, until all the balloons pop... then it's a Skeleton party on the ground!", 3, [["skeleton barrel", 636, 636, 0, 0.5, 0.5, 1.0, 7, 90, 0.4, 7.7, 0, 9, 3, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["kamikaze"], ["ddmg", 110, 2, [["knockback", 1], ["wait", 15]]], ["split", [["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+360/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-360/7, 1.2]]],]]]]]], //51
["Poison", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 4, [["poison", 0, 0, 75, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 30], ["spell"]]], ["instspell", [["wait", 60], ["spell"]]], ["instspell", [["wait", 90], ["spell"]]], ["instspell", [["wait", 120], ["spell"]]], ["instspell", [["wait", 150], ["spell"]]], ["instspell", [["wait", 180], ["spell"]]], ["instspell", [["wait", 210], ["spell"]]], ["instspell", [["wait", 240], ["spell"]]]]]], "spell"], //52
["Valkyrie", "Tough melee fighter, deals area damage around her. Swarm or horde, no problem! She can take them all out with a few spins.", 4, [["valkryie", 1654, 1654, 221, 0.5, 0.5, 1.0, 5, 60, 1.2, 5.5, 0, 45, 3, -1, false, 0, 1.7, "ground", "ground", 1, 30, 30, [], [["aoea", [["ground"]]]]]]], //53
["Wall Breakers", "A daring duo of dangerous dive bombers. Nothing warms a Wall Breaker's cold and undead heart like blowing up buildings.", 2, [["wall breaker", 275, 275, 325, 0.5, 1.25, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]], ["wall breaker", 275, 275, 325, 0.5, -0.25, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]]]], //54
["Royal Recruits", "Deploys a line of recruits armed with spears, shields and wooden buckets. They dream of ponies and one day wearing metal buckets.", 7, [["recruit", 199, 199, 101, 0.3, -0.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, -3.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, -6, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 1.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, 4.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 7, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]], "recruits"], //55
["Giant Skeleton", "The bigger the skeleton, the bigger the bomb. Carries a bomb that blows up when the Giant Skeleton dies.", 6, [["giant skeleton", 2793, 2793, 172, 0.5, 0.5, 2.0, 18, 60, 0.8, 5.0, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["split", [["bomb", 10000, 10000, 957, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 2.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 957, 2, [["knockback", 1]]], ["lifetime", 90]]]]]]]]], //56
["Balloon", "As pretty as they are, you won't want a parade of THESE balloons showing up on the horizon. Drops powerful bombs and when shot down, crashes dealing area damage.", 5, [["balloon", 1396, 1396, 798, 0.5, 0.5, 1.0, 6, 60, 0.1, 7.7, 0, 90, 6, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["split", [["bomb", 10000, 10000, 272, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 272, 3, []], ["lifetime", 90]]]]]]]]], //57
["Bomb Tower", "Defensive building that houses a Bomber. Deals area damage to anything dumb enough to stand near it.", 4, [["bomb tower", 1126, 1126, 168, 0.5, 0.5, 1.2, 0, 0, 6.0, 6.0, 0, 48, 15, -1, false, 0, 1.5, "building", "ground", 1, 30, 30, [], [["lifetime", 1050], ["split", [["bomb", 10000, 10000, 336, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 336, 2, []], ["lifetime", 90]]]]]]]]], //58
["Golem", "Slow but durable, only attacks buildings. When destroyed, explosively splits into two Golemites and deals area damage!", 8, [["golem", 4256, 4256, 259, 0.5, 0.5, 1.5, 20, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 90, [], [["ddmg", 259, 2, [["knockback", 1.8]]], ["resistance"], ["split", [["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, 0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]], ["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, -0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]]]], ["dsplit"]]]]], //59
["Heal", "Heal your troops to keep them in the fight! Friendly troops are healed over time while in the target area. Doesn't affect buildings.", 1, [["heal", 0, 0, -33, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 30], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 45], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 60], ["noCrown"], ["friendly"]]]]]], "spell"], //60
["Rage", "Increases troop movement and attack speed. Buildings attack faster and summon troops quicker, too. Chaaaarge!", 2, [["rage", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["rage", 60], ["time", 225], ["rage", 60], ["friendly"]]]]]], "spell"], //61
["Lumberjack", "He chops trees by day and hunts The Log by night. His bottle of Rage spills everywhere when he's defeated.", 4, [["lumberjack", 1060, 1060, 200, 0.5, 0.5, 1.0, 4, 120, 0.7, 5.5, 0, 24, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["ddmg", 0, 4, [["rage", 60], ["friendly"], ["time", 234], ["rage", 60], ["wait", 9]]]]]]], //62
["Goblin Barrel", "Spawns three Goblins anywhere in the Arena. It's going to be a thrilling ride, boys!", 3, [["barrel", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["spawn", [["goblin", 167, 167, 99, 0.4, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, 0.4, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, -0.5, 0, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ]], ["spell"]]], ["ps", 600]]]], "spell"], //63
["Electro Wizard", "He lands with a \"POW!\", stuns nearby enemies and shoots lightning with both hands! What a show off.", 4, [["ewiz", 590, 590, 96, 0.5, 0.5, 1.0, 5, 90, 5.0, 5.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["defender", 5], ["ps", 100000], ["sdmg", 159, 2.5, [["stun", 15]]]]]]], //64
["Princess", "This stunning Princess shoots flaming arrows from long range. If you're feeling warm feelings towards her, it's probably because you're on fire.", 3, [["princess", 216, 216, 140, 0.5, 0.5, 1.0, 3, 60, 9.0, 9.5, 0, 90, 15, -1, false, 0, 2.0, "ground", "all", 1, 30, 30, [], [["sptrgt"]]]]], //65
["Mortar", "Defensive building with a long range. Shoots big boulders that deal area damage, but cannot hit targets that get very close!", 4, [["mortar", 1221, 1221, 220, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 150, 30, -1, false, 0, 2.0, "building", "ground", 1, 30, 105, [], [["sptrgt", [["ground"]]], ["mrange", 3.5], ["lifetime", 900], ["ps", 630]]]]], //66
["Goblin Gang", "Spawns five Goblins - three with knives, two with spears - at a discounted Elixir cost. It's like a Goblin Value Pack!", 3, [["spear goblin", 110, 110, 67, 1.4, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 43.5, 30, []], ["spear goblin", 110, 110, 67, 1.4, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 48, 30, []], ["goblin", 167, 167, 99, -0.6, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["goblin", 167, 167, 99, -0.3, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, -0.3, 1.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []]]], //67
["Lava Hound", "The Lava Hound is a majestic flying beast that attacks buildings. The Lava Pups are less majestic angry babies that attack anything.", 7, [["lava hound", 3150, 3150, 45, 0.5, 0.5, 1.5, 5, 45, 3.5, 5.5, 0, 39, 9, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 0, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 60, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 120, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 180, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 240, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 300, 2.5]], []],]]]]]], //68
["Magic Archer", "Not quite a Wizard, nor an Archer - he shoots a magic arrow that passes through and damages all enemies in its path. It's not a trick, it's magic!", 4, [["magic archer", 490, 490, 111, 0.5, 0.5, 1.2, 3, 60, 7.0, 7.5, 0, 33, 15, -1, false, 0, 0.25, "ground", "all", 1, 30, 30, [], [["sptrgt", [["pass", 0, 11.6, []]]], ["ps", 1200]]]]], //69
["Bowler", "This big blue dude digs the simple things in life - Dark Elixir drinks and throwing rocks. His massive boulders roll through their target, hitting everything behind for a strike!", 5, [["bowler", 1596, 1596, 239, 0.5, 0.5, 1.5, 18, 45, 5.0, 5.5, 0, 75, 15, -1, false, 0, 0.9, "ground", "ground", 1, 30, 30, [], [["resistance"], ["sprnge", 0.8, 4.95, [["knockback", 1], ["pass", 0, 5, []], ["ground"]]], ["ps", 600]]]]], //70
["Hunter", "He deals BIG damage up close - not so much at range. What he lacks in accuracy, he makes up for with his impressively bushy eyebrows.", 4, [["hunter", 696, 696, 70, 0.5, 0.5, 1.2, 5, 60, 4.0, 5.5, 0, 66, 21, -1, false, 0, 0.07, "ground", "all", 1, 30, 30, [], [["shotgun", 10, 9], ["sptrgt", [["killOnHit"], ["pass", 0, 4, []]]],]]]], //71
["Graveyard", "Surprise! It's a party. A Skeleton party, anywhere in the Arena. Yay!", 5, [["graveyard", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 0, [], [["instspell", [["time", 315], ["graveyard", 90, 15, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], ["friendly"]]]]]], "spell"], //72
["Executioner", "He throws his axe like a boomerang, striking all enemies on the way out AND back. It's a miracle he doesn't lose an arm.", 5, [["executioner", 1010, 1010, 140, 0.5, 0.5, 1.2, 4, 60, 4.5, 5.5, 0, 21, 30, -1, false, 0, 1, "ground", "all", 1, 30, 30, [], [["sprnge", 0.6, 5.9, [["tmr", 0, 21, []]], [["tmr", 0, 30, []]]], ["hitp", 0, 51]]]]], //73
["Barbarian Hut", "Troop building that periodically deploys Barbarians to fight the enemy. Time to make the Barbarians", 7, [["hut", 1804, 1804, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1500], ["split", [["barbarian", 555, 555, 159, 0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []], ["barbarian", 555, 555, 159, -0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []]]], ["spawner", 1, 375, [["barbarian", 555, 555, 159, -0.7, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []], ["barbarian", 555, 555, 159, -0.6, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 9, 0, [], []]]]]]]], //74
["Furnace", "The Furnace spawns two Fire Spirits at a time. It also makes great brick-oven pancakes.", 4, [["furnace", 1003, 1003, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1501], ["spawner", 1, 300, [["fire spirit", 91, 91, 178, -0.7, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 0, 0, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, -0.6, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 9, 0, [], [["kamikaze"]]], ]]]]]], //75
["Hog Rider", "Fast melee troop that targets buildings and can jump over the river. He followed the echoing call of \"Hog Riderrrrr\" all the way through the Arena doors.", 4, [["hog", 1408, 1408, 264, 0.5, 0.5, 1.2, 4, 120, 0.8, 9.5, 0, 48, 18, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //76
["Royal Hogs", "The King’s personal pets are loose! They love to chomp on apples and towers alike - who let the hogs out?!", 5, [["hoggie", 695, 695, 59, 0.5, -1.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 59, 0.5, -0.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 59, 0.5, 1.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 59, 0.5, 2.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //77
["Royal Ghost", "He drifts invisibly through the Arena until he's startled by an enemy... then he attacks! Then he's invisible again! Zzzz.", 3, [["ghost", 1000, 1000, 216, 0.5, 0.5, 1.2, 3, 90, 1.2, 5.5, 0, 54, 18, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["invis", 0, 48, 12, 12]]]]], //78
["Tornado", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 3, [["nado", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["time", 60], ["nado", 20]]]]], ["nado", 0, 0, 35, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"]]], ["instspell", [["wait", 30], ["noCrown"]]], ["instspell", [["wait", 45], ["noCrown"]]], ["instspell", [["wait", 60], ["noCrown"]]]]]], "spell"], //79
["Lightning", "Bolts of lightning damage and stun up to three enemy troops or buildings with the most hitpoints in the target area. Reduced damage to Crown Towers.", 6, [["lightning", 0, 0, 877, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"], ["tmr", 45], ["hit", 0, 3, 15, 15, []], ["stun", 15]]]]]], "spell"], //80
["Earthquake", "Deals Damage per second to Troops and Crown Towers. Deals huge Building Damage! Does not affect flying units (it is an EARTHquake, after all).", 3, [["earthquake", 0, 0, 61, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["noBuildings"], ["wait", 15], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 30], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 45], ["ground"]]]]], ["earthquake", 0, 0, 244, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 15]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 30]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 45]]]]]], "spell"], //81
["The Log", "A spilt bottle of Rage turned an innocent tree trunk into \"The Log\". Now, it seeks revenge by crushing anything in its path!", 2, [["log", 0, 0, 240, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 13.1, []], ["rect", 3.9, 1.2], ["sudoKnockback", 1], ["forward", 13.1], ["ground"], ["spell"]]], ["ps", 300]]]]], //82
["Barbarian Barrel", "It rolls over and damages anything in its path, then breaks open and out pops a Barbarian! How did he get inside?!", 2, [["barb", 0, 0, 0, -4.75, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["spawn", [["barbarian", 555, 555, 159, 0, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 4, [], []]]], ["wait", 36]]]]], ["barrel", 0, 0, 200, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 5.5, []], ["rect", 2.6, 1.2], ["forward", 5.5], ["ground"], ["spell"]]], ["ps", 300]]]]], //83
["Skeleton Army", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 3, [["skeleton", 67, 67, 67, -1.25, -1.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.3, -0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, -0.9, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, -2.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.1, -1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.4, -0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.8, 0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.5, 0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.65, 1.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.6, 2.2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.2, 0.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.35, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //84
["Tesla", "Defensive building. Whenever it's not zapping the enemy, the power of Electrickery is best kept grounded.", 4, [["tesla", 954, 954, 190, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 33, 15, -1, false, 0, 0, "building", "all", 1, 30, 30, [], [["hiding", -30, 15, 0, 12], ["lifetime", 1050], ["ps", 990]]]]], //85
["Goblin Giant", "This jolly green Goblin Giant stomps towards enemy buildings. He carries two Spear Goblins everywhere he goes. It's a weird but functional arrangement.", 6, [["goblin giant", 2616, 2616, 146, 0.5, 0.5, 1.5, 18, 60, 1.2, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["link", false, [["    ", 110, 110, 67, 0, -0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []], ["    ", 110, 110, 67, 0, 0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []]]], ["split", [["spear goblin", 110, 110, 67, 0, -0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []], ["spear goblin", 110, 110, 67, 0, 0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []]]], ["dsplit"]]]]], //86
["Ram Rider", "Together they charge through the Arena; snaring enemies, knocking down towers ... and chewing grass!?", 5, [["ram", 1461, 1461, 220, 0.5, 0.5, 1.2, 4, 60, 0.8, 7.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"], ["charge", 0, 3.5, 220, 60, 440, 120], ["resistance"], ["link", false, [["rider", 490, 490, 86, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 33, 12, -1, false, 0, 0, "link", "troops", 1, 0, 30, [], [["snare", 60], ["retarget"], ["deprioritize", "snare"]]]]]]]]], //87
["Battle Healer", "With each attack, she unleashes a powerful healing aura that restores Hitpoints to herself and friendly Troops. When she isn't attacking, she passively heals herself!", 4, [["healer", 1584, 1584, 123, 0.5, 0.5, 1.0, 6, 60, 1.6, 5.5, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["regen", 15, 15, 13], ["atkSpawn", [["heal", 0, 0, -21, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 0, 10, [], [["instspell", [["wait", 6, 6], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 12, 12], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 18, 18], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 24, 24], ["noCrown"], ["friendly"]]]]]]]]]]], //88
["Dark Prince", "The Dark Prince deals area damage and lets his spiked club do the talking for him - because when he does talk, it sounds like he has a bucket on his head.", 4, [["dark prince", 199, 199, 206, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 30, 30, [], [["split", [["dark prince", 1030, 1030, 206, 0, 0, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 0, 0, [], [["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], ["noTargetChange"], ["retainTarget"], ["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], //89
["Bandit", "The Bandit dashes to her target and delivers an extra big hit! While dashing, she can't be touched. The mask keeps her identity safe... and gives her bonus cool points!", 3, [["bandit", 750, 750, 160, 0.5, 0.5, 1.2, 3, 90, 0.8, 6.0, 0, 30, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["dash", 3.5, 6, 160, 90, 320, 500, 0, 24, -1]]]]], //90
["Mega Knight", "He lands with the force of 1,000 mustaches, then jumps from one foe to the next dealing huge area damage. Stand aside!", 7, [["mega knight", 3300, 3300, 222, 0.5, 0.5, 1.5, 18, 60, 1.2, 5.5, 0, 51, 15, -1, false, 0, 1.3, "ground", "ground", 1, 30, 30, [], [["jump", 3.5, 5, 222, 90, 444, 250, 0, 33, -1, 2.2, [["knockback", 1]]], ["resistance"], ["ps", 1400], ["sdmg", 444, 2.2, [["knockback", 1], ["wait", 15]]]]]]], //91
["Miner", "The Miner can burrow his way underground and appear anywhere in the Arena. It's not magic, it's a shovel.", 3, [["miner", 100000, 100000, 0, 0.5, 0.5, 1.0, 6, 650, 1.2, 5.5, 0, 36, 21, -1, false, 0, 0.0, "uground", "none", 1, 30, 0, [], [["resistance"], ["mining", 0, 0, false, [["miner", 1000, 1000, 160, 0, 0, 1.0, 6, 90, 1.2, 5.5, 0, 36, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], [["ctreduc", 0.4]]]]]]]], "spell"], //92 
["Fisherman", "His Ranged Attack can pull enemies towards him, and pull himself to enemy buildings. He's also mastered the ancient art of 'Fish Slapping'.", 3, [["fisherman", 800, 800, 160, 0.5, 0.5, 1.0, 10, 60, 1.2, 7.5, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["pull", 3.5, 7, 0, 45, -1, false], ["resistance"]]]]], //93
["Mirror", "Mirrors your last card played for +1 Elixir. Will not appear in your starting cards.", 0, []], //94
["Clone", "Duplicates all friendly troops in the target area. Cloned troops are fragile, but pack the same punch as the original! Doesn't affect buildings.", 3, [["clone", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["clone"], ["noCrown"], ["friendly"]]]]]], "spell"], //95
["Firecracker", "Shoots a firework that explodes on impact, damaging the target and showering anything behind it with sparks. This is what happens when Archers get bored!", 3, [["firecracker", 252, 252, 0, 0.5, 0.5, 1.0, 6, 90, 6.0, 10, 0, 90, 30, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], [["recoil", 2], ["sptrgt", [["spread", 5, 15, 6, 53]]], ["ps", 600]]]]], //96
];
};
}
//Dev version (for editing and brainstorming)
if(version === "dev"){
    var cardsInit = function(){
    cards = [
["Spear Goblins", "Three unarmored ranged attackers. Who the heck taught these guys to throw spears!?! Who thought that was a good idea?!", 2, [["spear goblin", 110, 110, 67, 0, 0.5, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //0
["Dart Goblin", "Runs fast, shoots far and chews gum. How does he blow darts with a mouth full of Double Trouble gum? Years of didgeridoo lessons.", 3, [["dart goblin", 216, 216, 100, 0.5, 0.5, 1, 3, 120, 6.5, 7.5, 0, 21, 10.5, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //1
["Elixir Golem", "Splits into two Elixir Golemites when destroyed, which split into two sentient Blobs when defeated. A Blob gives your opponent 1 Elixir when destroyed!", 3, [["elixir golem", 1196, 1196, 212, 0.5, 0.5, 1.2, 15, 45, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["elixir golemite", 598, 598, 106, 0, 0.5, 1, 10, 60, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 299, 299, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 299, 299, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]], ["elixir golemite", 598, 598, 106, 0, -0.5, 10, 10, 60, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 299, 299, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 299, 299, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]]]], ["dsplit"]]]]], //Again, all one troop. //2
["X-Bow", "Nice tower you got there. Would be a shame if this X-Bow whittled it down from this side of the Arena...", 6, [["xbow", 1383, 1383, 26, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 7.5, 7.5, -1, false, 0, 0, "building", "ground", 1, 30, 105, [], [["lifetime", 1200], ["ps", 1600]]]]], //3
["Knight", "A tough melee fighter. The Barbarian's handsome, cultured cousin. Rumor has it that he was knighted based on the sheer awesomeness of his mustache alone.", 3, [["knight", 1452, 1452, 167, 0.5, 0.5, 1, 6, 60, 1.2, 5.5, 0, 36, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //4
["Giant", "Slow but durable, only attacks buildings. A real one-man wrecking crew!", 5, [["giant", 3275, 3275, 211, 0.5, 0.5, 1.5, 18, 45, 1.2, 7.5, 0, 45, 15, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]],]], //5
["Musketeer", "Don't be fooled by her delicately coiffed hair, the Musketeer is a mean shot with her trusty boomstick.", 4, [["musketeer", 598, 598, 181, 0.5, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []],]], //6
["Skeletons", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 1, [["skeleton", 67, 67, 67, 0, 0.5, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, -0.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, 1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //7
["Cannon", "Defensive building. Shoots cannonballs with deadly effect, but cannot target flying troops.", 3, [["cannon", 742, 742, 167, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0, "building", "ground", 1, 30, 30, [], [["lifetime", 900], ["ps", 900]]]]], //8
["Wizard", "The most awesome man to ever set foot in the arena, the Wizard will blow you away with his handsomeness... and/or fireballs.", 5, [["wizard", 598, 598, 234, 0.5, 0.5, 1, 5, 60, 5.5, 5.5, 0, 42, 12, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, []],]], //9
["Fire Spirits", "These three Fire Spirits are on a kamikaze mission to give you a warm hug. It'd be adorable if they weren't on fire.", 2, [["fire spirit", 91, 91, 178, 0, 0.5, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, -0.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, 1.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]],]], //10
["Ice Spirit", "Spawns one lively little Ice Spirit to freeze a group of enemies. Stay frosty.", 1, [["ice spirit", 190, 190, 91, 0.5, 0.5, 0.8, 1, 120, 2.5, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"], ["stun", 30]]],]], //11
["Zappies", "Spawns a pack of miniature Zap machines. Who controls them...? Only the Master Builder knows.", 4, [["zappy", 440, 440, 84, -0.2, 0.5, 1.2, 4, 60, 4.5, 5.5, 0, 60, 30, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 84, 0.8, -0.2, 1.2, 4, 60, 4.5, 5.5, 0, 60, 30, -1, false, 0, 0, "ground", "all", 1, 30, 34.5, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 84, 0.8, 1.2, 1.2, 4, 60, 4.5, 5.5, 0, 60, 30, -1, false, 0, 0, "ground", "all", 1, 30, 39, [], [["stun", 15], ["ps", 100000]]]]], //12 (mass unknown)
["P.E.K.K.A.", "A heavily armored, slow melee fighter. Swings from the hip but packs a huge punch.", 7, [["pekka", 3125, 3125, 678, 0.5, 0.5, 1.5, 18, 45, 1.2, 5.0, 0, 54, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, [], [["resistance"]]],]], //13
["Sparky", "Sparky slowly charges up, then unloads MASSIVE area damage. Overkill isn't in her vocabulary.", 6, [["sparky", 1200, 1200, 1100, 0.5, 0.5, 2, 18, 45, 5.5, 5.5, 120, 120, 15, -1, false, 0, 1.8, "ground", "ground", 1, 30, 30, [], [["resistance"], ["weak-stun"], ["recoil", 0.75]]],]], //14
["Mini P.E.K.K.A.", "The Arena is a certified butterfly-free zone. No distractions for P.E.K.K.A, only destruction.", 4, [["mini pekka", 1129, 1129, 598, 0.5, 0.5, 0.9, 4, 90, 1.2, 5.5, 0, 54, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //15 (First generated one!)
["Ice Wizard", "This chill caster throws ice shards that slow down enemies' movement and attack speed. Despite being freezing cold, he has a handlebar mustache that's too hot for TV.", 3, [["ice wizard", 590, 590, 75, 0.5, 0.5, 1.0, 5, 60, 5.5, 5.5, 0, 51, 15, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["slow", 75]]]]], //16
["Goblin Cage", "When the Goblin Cage is destroyed, a Goblin Brawler is unleashed into the Arena! Goblin Brawler always skips leg day.", 4, [["cage", 800, 800, 0, 0.5, 0.5, 2, 0, 0, 0.0, 0.0, 0, 27000, 27000, -1, false, 0, 0.0, "building", "ground", 1, 30, 30, [], [["lifetime", 600], ["split", [["brawler", 853, 853, 264, 0, 0, 1.0, 2, 90, 0.8, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 5, 15, [], []]]]]]]], //17
["Cannon Cart", "A Cannon on wheels?! Bet they won't see that coming! Once you break its shield, it becomes a Cannon not on wheels.", 5, [["cannon cart", 742, 742, 168, 0.5, 0.5, 1.2, 3, 90, 5.5, 6, 0, 30, 18, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["resistance"], ["split", [["cannon cart", 742, 742, 168, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0.0, "building", "ground", 1, 2, 3, [], [["lifetime", 900]]]]]]]]], //18
["Mega Minion", "Flying, armored and powerful. What could be its weakness?! Cupcakes.", 3, [["mega minion", 695, 695, 258, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 48, 12, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]]]], //19
["Baby Dragon", "Burps fireballs from the sky that deal area damage. Baby dragons hatch cute, hungry and ready for a barbeque.", 4, [["baby dragon", 1024, 1024, 133, 0.5, 0.5, 1.0, 5, 90, 3.5, 5.5, 0, 45, 9, -1, false, 0, 1.2, "air", "all", 1, 30, 30, [], []]]], //20
["Royal Giant", "Destroying enemy buildings with his massive cannon is his job; making a raggedy blond beard look good is his passion.", 6, [["royal giant", 2544, 2544, 254, 0.5, 0.5, 1.5, 18, 45, 5.0, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]]]], //21
["Minions", "Three fast, unarmored flying attackers. Roses are red, minions are blue, they can fly, and will crush you!", 3, [["minion", 190, 190, 84, 0, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, -0.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, 1.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]]]], //22
["Minion Horde", "Six fast, unarmored flying attackers. Three's a crowd, six is a horde!", 5, [["minion", 190, 190, 84, 1.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, -0.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 52.5, 30, [], [["ps", 810.0001]]]]], //23
["Goblins", "Three fast, unarmored melee attackers. Small, fast, green and mean!", 2, [["goblin", 167, 167, 99, 0, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, -0.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, 1.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //24
["Guards", "Three ruthless bone brothers with shields. Knock off their shields and all that's left are three ruthless bone brothers.", 3, [["guard", 199, 199, 90, 0, 0.5, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, -0.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, 1.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //25
["Bomber", "Small, lightly protected skeleton that throws bombs. Deals area damage that can wipe out a swarm of enemies.", 3, [["bomber", 398, 398, 271, 0.5, 0.5, 1.0, 4, 60, 5.0, 5.5, 0, 57, 6, -1, false, 0, 1.5, "ground", "ground", 1, 30, 30, [], []]]], //26
["Flying Machine", "The Master Builder has sent his first contraption to the Arena! It's a fast and fun flying machine, but fragile!", 4, [["flying machine", 510, 510, 142, 0.5, 0.5, 1.0, 3, 90, 6.0, 6.0, 0, 33, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []]]], //27
["Elixir Collector", "You gotta spend Elixir to make Elixir! This building makes 8 Elixir over its Lifetime. Does not appear in your starting hand.", 6, [["elixir collector", 888, 888, 0, 0.5, 0.5, 2, 0, 0, -1.0, -1.0, 0, 255, 255, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 2100], ["elixir", 255, 255]]]]], //28
["Bats", "Spawns a handful of tiny flying creatures. Think of them as sweet, purple... balls of DESTRUCTION!", 2, [["bat", 67, 67, 67, 0.5+sin(radians(36)), 0.5+cos(radians(36)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(108)), 0.5+cos(radians(108)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(180)), 0.5+cos(radians(180)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(252)), 0.5+cos(radians(252)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(324)), 0.5+cos(radians(324)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], []]]], //29
["Witch", "Summons Skeletons, shoots destructo beams, has glowing pink eyes that unfortunately don't shoot lasers.", 5, [["witch", 696, 696, 111, 0.5, 0.5, 1.0, 8, 60, 5.0, 5.5, 0, 33, 21, -1, false, 0, 1, "ground", "all", 1, 30, 30, [], [["spawner", 105, 210, [["skeleton", 67, 67, 67, 2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, 2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, -2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, -2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []],]]]]]], //30
["Night Witch", "Summons Bats to do her bidding, even after death! If you get too close, she isn't afraid of pitching in with her mean-looking battle staff.", 4, [["night witch", 750, 750, 260, 0.5, 0.5, 1.0, 4, 60, 1.6, 5.5, 0, 45, 22.5, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["split", [["bat", 67, 67, 67, 0, -1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, -1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, 1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["spawner", 105, 210, [["bat", 67, 67, 67, 0, 1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, -1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["dspawn"]]]]], //31
["Goblin Hut", "Building that spawns Spear Goblins. But don't look inside. You don't want to see how they are made.", 5, [["goblin hut", 1293, 1293, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 135, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1500], ["spawner", 1, 135, [["spear goblin", 110, 110, 67, -0.5, 0, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 0, 0, [], []]]]]]]], //32
["Tombstone", "Troop building that periodically deploys Skeletons to fight the enemy... and when destroyed, spawns 3 Skeletons! Creepy.", 3, [["tombstone", 422, 422, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1200], ["split", [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, -0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, 0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []],]], ["spawner", 93, 93, [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //33
["Inferno Dragon", "Shoots a focused beam of fire that increases in damage over time. Wears a helmet because flying can be dangerous.", 4, [["inferno dragon", 1070, 1070, 30, 0.5, 0.5, 1.0, 5, 60, 3.5, 5.5, 0, 12, 36, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["inferno", 0, 60, 30, 70, 350]]]]], //34
["Inferno Tower", "Defensive building, roasts targets for damage that increases over time. Burns through even the biggest and toughest enemies!", 5, [["inferno tower", 1452, 1452, 35, 0.5, 0.5, 1.2, 0, 0, 6, 6, 0, 12, 60, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 900], ["inferno", 0, 60, 35, 132, 704]]]]], //35
["Prince", "Don't let the little pony fool you. Once the Prince gets a running start, you WILL be trampled. Deals double damage once he gets charging.", 5, [["prince", 1615, 1615, 325, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 42, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 325, 60, 651, 120]]]]], //36
["Battle Ram", "Two Barbarians holding a big log charge at the nearest building, dealing significant damage if they connect; then they go to town with their swords!", 4, [["battle ram", 756, 756, 220, 0.5, 0.5, 1.5, 6, 60, 0.5, 5.5, 0, 12, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 220, 60, 440, 120], ["kamikaze"], ["split", [["barbarian", 555, 555, 159, 0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []], ["barbarian", 555, 555, 159, -0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []]]], ["dsplit"]]]]], //37
["Barbarians", "A horde of melee attackers with mean mustaches and even meaner tempers.", 5, [["barbarian", 555, 555, 159, 0.5+sin(radians(54)), 0.5+cos(radians(54)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(126)), 0.5+cos(radians(126)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(198)), 0.5+cos(radians(198)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(270)), 0.5+cos(radians(270)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 43.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(342)), 0.5+cos(radians(342)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 48, 30, [], []]]], //38
["Electro Dragon", "Spits out bolts of electricity hitting up to three targets. Suffers from middle child syndrome to boot.", 5, [["electro dragon", 790, 790, 159, 0.5, 0.5, 1.2, 7, 60, 3.5, 5.5, 0, 63, 21, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["stun", 15], ["ps", 2000], ["chain", 2, 3.5, 159, []]]]]], //39
["Elite Barbarians", "Spawns a pair of leveled up Barbarians. They're like regular Barbarians, only harder, better, faster and stronger.", 6, [["elite barbarian", 970, 970, 301, 0.5, 1.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["elite barbarian", 970, 970, 301, 0.5, -0.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //40
["Archers", "A pair of lightly armored ranged attackers. They'll help you take down ground and air units, but you're on your own with hair coloring advice.", 3, [["archer", 252, 252, 89, 0.5, 1.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []], ["archer", 252, 252, 89, 0.5, -0.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []]]], //41
["Three Musketeers", "Trio of powerful, independent markswomen, fighting for justice and honor. Disrespecting them would not be just a mistake, it would be a cardinal sin!", 9, [["musketeer", 598, 598, 181, 0.5-0.7, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 60, 60, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(-30)), 0.5-0.7*cos(radians(-30)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 60, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(210)), 0.5-0.7*cos(radians(210)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 45, 60, []],]], //42
["Rascals", "Spawns a mischievous trio of Rascals! The boy takes the lead, while the girls pelt enemies from behind... with slingshots full of Double Trouble Gum!", 5, [["rascal boy", 1515, 1515, 110, -0.1, 0.5, 1.5, 10, 60, 0.8, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, -0.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 34.5, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, 1.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 39, 30, [], []]]], //43
["Fireball", "Annnnnd... Fireball. Incinerates a small area, dealing high damage. Reduced damage to Crown Towers.", 4, [["fireball", 0, 0, 572, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.8], ["spell"]]]]]], "spell"], //44 (GOT EEM!)
["Giant Snowball", "It’s HUGE! Once it began rolling down Frozen Peak, there was no stopping it. Enemies hit are knocked back and slowed down.", 2, [["snowball", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.5], ["slow", 75], ["spell"]]]]]], "spell"], //45
["Arrows", "Arrows pepper a large area, damaging all enemies hit. Reduced damage to Crown Towers.", 3, [["arrows", 0, 0, 101, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["spell", [["spell"]]], ["spell", [["spell"], ["wait", 6]]], ["spell", [["spell"], ["wait", 12]]], ["ps", 1600]]]], "spell"], //46
["Rocket", "Deals high damage to a small area. Looks really awesome doing it. Reduced damage to Crown Towers.", 6, [["rocket", 0, 0, 1232, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1], ["spell"]]], ["ps", 500]]]], "spell"], //47
["Zap", "Zaps enemies, briefly stunning them and dealing damage inside a small radius. Reduced damage to Crown Towers.", 2, [["zap", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"]]]]]], "spell"], //48
["Freeze", "Freezes and damages troops and buildings, making them unable to move or attack. Everybody chill.", 4, [["freeze", 0, 0, 95, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 120], ["spell"]]]]]], "spell"], //49
["Ice Golem", "He's tough, targets buildings and explodes when destroyed, slowing nearby enemies. Made entirely out of ice... or is he?! Yes.", 2, [["ice golem", 994, 994, 70, 0.5, 0.5, 1.4, 6, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["ddmg", 70, 2, [["slow", 30]]]]]]], //50
["Skeleton Barrel", "It's a Skeleton party in the sky, until all the balloons pop... then it's a Skeleton party on the ground!", 3, [["skeleton barrel", 636, 636, 0, 0.5, 0.5, 1.0, 7, 90, 0.4, 7.7, 0, 9, 3, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["kamikaze"], ["ddmg", 110, 2, [["knockback", 1], ["wait", 15]]], ["split", [["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+360/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-360/7, 1.2]]],]]]]]], //51
["Poison", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 4, [["poison", 0, 0, 75, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 30], ["spell"]]], ["instspell", [["wait", 60], ["spell"]]], ["instspell", [["wait", 90], ["spell"]]], ["instspell", [["wait", 120], ["spell"]]], ["instspell", [["wait", 150], ["spell"]]], ["instspell", [["wait", 180], ["spell"]]], ["instspell", [["wait", 210], ["spell"]]], ["instspell", [["wait", 240], ["spell"]]]]]], "spell"], //52
["Valkyrie", "Tough melee fighter, deals area damage around her. Swarm or horde, no problem! She can take them all out with a few spins.", 4, [["valkryie", 1654, 1654, 221, 0.5, 0.5, 1.0, 5, 60, 1.2, 5.5, 0, 45, 3, -1, false, 0, 1.7, "ground", "ground", 1, 30, 30, [], [["aoea", [["ground"]]]]]]], //53
["Wall Breakers", "A daring duo of dangerous dive bombers. Nothing warms a Wall Breaker's cold and undead heart like blowing up buildings.", 2, [["wall breaker", 275, 275, 325, 0.5, 1.25, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]], ["wall breaker", 275, 275, 325, 0.5, -0.25, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]]]], //54
["Royal Recruits", "Deploys a line of recruits armed with spears, shields and wooden buckets. They dream of ponies and one day wearing metal buckets.", 7, [["recruit", 199, 199, 101, 0.3, -0.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, -3.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, -6, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 1.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, 4.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 7, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]], "recruits"], //55
["Giant Skeleton", "The bigger the skeleton, the bigger the bomb. Carries a bomb that blows up when the Giant Skeleton dies.", 6, [["giant skeleton", 2793, 2793, 172, 0.5, 0.5, 2.0, 18, 60, 0.8, 5.0, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["split", [["bomb", 10000, 10000, 957, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 2.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 957, 2, [["knockback", 1]]], ["lifetime", 90]]]]]]]]], //56
["Balloon", "As pretty as they are, you won't want a parade of THESE balloons showing up on the horizon. Drops powerful bombs and when shot down, crashes dealing area damage.", 5, [["balloon", 1396, 1396, 798, 0.5, 0.5, 1.0, 6, 60, 0.1, 7.7, 0, 90, 6, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["split", [["bomb", 10000, 10000, 272, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 272, 3, []], ["lifetime", 90]]]]]]]]], //57
["Bomb Tower", "Defensive building that houses a Bomber. Deals area damage to anything dumb enough to stand near it.", 4, [["bomb tower", 1126, 1126, 168, 0.5, 0.5, 1.2, 0, 0, 6.0, 6.0, 0, 48, 15, -1, false, 0, 1.5, "building", "ground", 1, 30, 30, [], [["lifetime", 1050], ["split", [["bomb", 10000, 10000, 336, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 336, 2, []], ["lifetime", 90]]]]]]]]], //58
["Golem", "Slow but durable, only attacks buildings. When destroyed, explosively splits into two Golemites and deals area damage!", 8, [["golem", 4256, 4256, 259, 0.5, 0.5, 1.5, 20, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 90, [], [["ddmg", 259, 2, [["knockback", 1.8]]], ["resistance"], ["split", [["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, 0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]], ["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, -0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]]]], ["dsplit"]]]]], //59
["Heal", "Heal your troops to keep them in the fight! Friendly troops are healed over time while in the target area. Doesn't affect buildings.", 1, [["heal", 0, 0, -33, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 30], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 45], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 60], ["noCrown"], ["friendly"]]]]]], "spell"], //60
["Rage", "Increases troop movement and attack speed. Buildings attack faster and summon troops quicker, too. Chaaaarge!", 2, [["rage", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["rage", 60], ["time", 225], ["rage", 60], ["friendly"]]]]]], "spell"], //61
["Lumberjack", "He chops trees by day and hunts The Log by night. His bottle of Rage spills everywhere when he's defeated.", 4, [["lumberjack", 1060, 1060, 200, 0.5, 0.5, 1.0, 4, 120, 0.7, 5.5, 0, 24, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["ddmg", 0, 4, [["rage", 60], ["friendly"], ["time", 234], ["rage", 60], ["wait", 9]]]]]]], //62
["Goblin Barrel", "Spawns three Goblins anywhere in the Arena. It's going to be a thrilling ride, boys!", 3, [["barrel", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["spawn", [["goblin", 167, 167, 99, 0.4, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, 0.4, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, -0.5, 0, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ]], ["spell"]]], ["ps", 600]]]], "spell"], //63
["Electro Wizard", "He lands with a \"POW!\", stuns nearby enemies and shoots lightning with both hands! What a show off.", 4, [["ewiz", 590, 590, 96, 0.5, 0.5, 1.0, 5, 90, 5.0, 5.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["defender", 5], ["ps", 100000], ["sdmg", 159, 2.5, [["stun", 15]]]]]]], //64
["Princess", "This stunning Princess shoots flaming arrows from long range. If you're feeling warm feelings towards her, it's probably because you're on fire.", 3, [["princess", 216, 216, 140, 0.5, 0.5, 1.0, 3, 60, 9.0, 9.5, 0, 90, 15, -1, false, 0, 2.0, "ground", "all", 1, 30, 30, [], [["sptrgt"]]]]], //65
["Mortar", "Defensive building with a long range. Shoots big boulders that deal area damage, but cannot hit targets that get very close!", 4, [["mortar", 1221, 1221, 220, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 150, 30, -1, false, 0, 2.0, "building", "ground", 1, 30, 105, [], [["sptrgt", [["ground"]]], ["mrange", 3.5], ["lifetime", 900], ["ps", 630]]]]], //66
["Goblin Gang", "Spawns five Goblins - three with knives, two with spears - at a discounted Elixir cost. It's like a Goblin Value Pack!", 3, [["spear goblin", 110, 110, 67, 1.4, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 43.5, 30, []], ["spear goblin", 110, 110, 67, 1.4, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 48, 30, []], ["goblin", 167, 167, 99, -0.6, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["goblin", 167, 167, 99, -0.3, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, -0.3, 1.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []]]], //67
["Lava Hound", "The Lava Hound is a majestic flying beast that attacks buildings. The Lava Pups are less majestic angry babies that attack anything.", 7, [["lava hound", 3150, 3150, 45, 0.5, 0.5, 1.5, 5, 45, 3.5, 5.5, 0, 39, 9, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 0, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 60, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 120, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 180, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 240, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 300, 2.5]], []],]]]]]], //68
["Magic Archer", "Not quite a Wizard, nor an Archer - he shoots a magic arrow that passes through and damages all enemies in its path. It's not a trick, it's magic!", 4, [["magic archer", 490, 490, 111, 0.5, 0.5, 1.2, 3, 60, 7.0, 7.5, 0, 33, 15, -1, false, 0, 0.25, "ground", "all", 1, 30, 30, [], [["sptrgt", [["pass", 0, 11.6, []]]], ["ps", 1200]]]]], //69
["Bowler", "This big blue dude digs the simple things in life - Dark Elixir drinks and throwing rocks. His massive boulders roll through their target, hitting everything behind for a strike!", 5, [["bowler", 1596, 1596, 239, 0.5, 0.5, 1.5, 18, 45, 5.0, 5.5, 0, 75, 15, -1, false, 0, 0.9, "ground", "ground", 1, 30, 30, [], [["resistance"], ["sprnge", 0.8, 4.95, [["knockback", 1], ["pass", 0, 5, []], ["ground"]]], ["ps", 600]]]]], //70
["Hunter", "He deals BIG damage up close - not so much at range. What he lacks in accuracy, he makes up for with his impressively bushy eyebrows.", 4, [["hunter", 696, 696, 70, 0.5, 0.5, 1.2, 5, 60, 4.0, 5.5, 0, 66, 21, -1, false, 0, 0.07, "ground", "all", 1, 30, 30, [], [["shotgun", 10, 9], ["sptrgt", [["killOnHit"], ["pass", 0, 4, []]]],]]]], //71
["Graveyard", "Surprise! It's a party. A Skeleton party, anywhere in the Arena. Yay!", 5, [["graveyard", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 0, [], [["instspell", [["time", 315], ["graveyard", 90, 15, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], ["friendly"]]]]]], "spell"], //72
["Executioner", "He throws his axe like a boomerang, striking all enemies on the way out AND back. It's a miracle he doesn't lose an arm.", 5, [["executioner", 1010, 1010, 140, 0.5, 0.5, 1.2, 4, 60, 4.5, 5.5, 0, 21, 30, -1, false, 0, 1, "ground", "all", 1, 30, 30, [], [["sprnge", 0.6, 5.9, [["tmr", 0, 21, []]], [["tmr", 0, 30, []]]], ["hitp", 0, 51]]]]], //73
["Barbarian Hut", "Troop building that periodically deploys Barbarians to fight the enemy. Time to make the Barbarians", 7, [["hut", 1804, 1804, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1500], ["split", [["barbarian", 555, 555, 159, 0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []], ["barbarian", 555, 555, 159, -0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []]]], ["spawner", 1, 375, [["barbarian", 555, 555, 159, -0.7, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []], ["barbarian", 555, 555, 159, -0.6, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 9, 0, [], []]]]]]]], //74
["Furnace", "The Furnace spawns two Fire Spirits at a time. It also makes great brick-oven pancakes.", 4, [["furnace", 1003, 1003, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1501], ["spawner", 1, 300, [["fire spirit", 91, 91, 178, -0.7, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 0, 0, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, -0.6, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 9, 0, [], [["kamikaze"]]], ]]]]]], //75
["Hog Rider", "Fast melee troop that targets buildings and can jump over the river. He followed the echoing call of \"Hog Riderrrrr\" all the way through the Arena doors.", 4, [["hog", 1408, 1408, 264, 0.5, 0.5, 1.2, 4, 120, 0.8, 9.5, 0, 48, 18, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //76
["Royal Hogs", "The King’s personal pets are loose! They love to chomp on apples and towers alike - who let the hogs out?!", 5, [["hoggie", 695, 695, 59, 0.5, -1.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 59, 0.5, -0.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 59, 0.5, 1.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 59, 0.5, 2.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //77
["Royal Ghost", "He drifts invisibly through the Arena until he's startled by an enemy... then he attacks! Then he's invisible again! Zzzz.", 3, [["ghost", 1000, 1000, 216, 0.5, 0.5, 1.2, 3, 90, 1.2, 5.5, 0, 54, 18, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["invis", 0, 48, 12, 12]]]]], //78
["Tornado", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 3, [["nado", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["time", 60], ["nado", 20]]]]], ["nado", 0, 0, 35, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"]]], ["instspell", [["wait", 30], ["noCrown"]]], ["instspell", [["wait", 45], ["noCrown"]]], ["instspell", [["wait", 60], ["noCrown"]]]]]], "spell"], //79
["Lightning", "Bolts of lightning damage and stun up to three enemy troops or buildings with the most hitpoints in the target area. Reduced damage to Crown Towers.", 6, [["lightning", 0, 0, 877, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"], ["tmr", 45], ["hit", 0, 3, 15, 15, []], ["stun", 15]]]]]], "spell"], //80
["Earthquake", "Deals Damage per second to Troops and Crown Towers. Deals huge Building Damage! Does not affect flying units (it is an EARTHquake, after all).", 3, [["earthquake", 0, 0, 61, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["noBuildings"], ["wait", 15], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 30], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 45], ["ground"]]]]], ["earthquake", 0, 0, 244, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 15]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 30]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 45]]]]]], "spell"], //81
["The Log", "A spilt bottle of Rage turned an innocent tree trunk into \"The Log\". Now, it seeks revenge by crushing anything in its path!", 2, [["log", 0, 0, 240, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 13.1, []], ["rect", 3.9, 1.2], ["sudoKnockback", 1], ["forward", 13.1], ["ground"], ["spell"]]], ["ps", 300]]]]], //82
["Barbarian Barrel", "It rolls over and damages anything in its path, then breaks open and out pops a Barbarian! How did he get inside?!", 2, [["barb", 0, 0, 0, -4.75, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["spawn", [["barbarian", 555, 555, 159, 0, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 4, [], []]]], ["wait", 36]]]]], ["barrel", 0, 0, 200, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 5.5, []], ["rect", 2.6, 1.2], ["forward", 5.5], ["ground"], ["spell"]]], ["ps", 300]]]]], //83
["Skeleton Army", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 3, [["skeleton", 67, 67, 67, -1.25, -1.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.3, -0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, -0.9, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, -2.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.1, -1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.4, -0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.8, 0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.5, 0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.65, 1.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.6, 2.2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.2, 0.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.35, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //84
["Tesla", "Defensive building. Whenever it's not zapping the enemy, the power of Electrickery is best kept grounded.", 4, [["tesla", 954, 954, 190, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 33, 15, -1, false, 0, 0, "building", "all", 1, 30, 30, [], [["hiding", -30, 15, 0, 12], ["lifetime", 1050], ["ps", 990]]]]], //85
["Goblin Giant", "This jolly green Goblin Giant stomps towards enemy buildings. He carries two Spear Goblins everywhere he goes. It's a weird but functional arrangement.", 6, [["goblin giant", 2616, 2616, 146, 0.5, 0.5, 1.5, 18, 60, 1.2, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["link", false, [["    ", 110, 110, 67, 0, -0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []], ["    ", 110, 110, 67, 0, 0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []]]], ["split", [["spear goblin", 110, 110, 67, 0, -0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []], ["spear goblin", 110, 110, 67, 0, 0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []]]], ["dsplit"]]]]], //86
["Ram Rider", "Together they charge through the Arena; snaring enemies, knocking down towers ... and chewing grass!?", 5, [["ram", 1461, 1461, 220, 0.5, 0.5, 1.2, 4, 60, 0.8, 7.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"], ["charge", 0, 3.5, 220, 60, 440, 120], ["resistance"], ["link", false, [["rider", 490, 490, 86, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 33, 12, -1, false, 0, 0, "link", "troops", 1, 0, 30, [], [["snare", 60], ["retarget"], ["deprioritize", "snare"]]]]]]]]], //87
["Battle Healer", "With each attack, she unleashes a powerful healing aura that restores Hitpoints to herself and friendly Troops. When she isn't attacking, she passively heals herself!", 4, [["healer", 1584, 1584, 123, 0.5, 0.5, 1.0, 6, 60, 1.6, 5.5, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["regen", 15, 15, 13], ["atkSpawn", [["heal", 0, 0, -21, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 0, 10, [], [["instspell", [["wait", 6, 6], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 12, 12], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 18, 18], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 24, 24], ["noCrown"], ["friendly"]]]]]]]]]]], //88
["Dark Prince", "The Dark Prince deals area damage and lets his spiked club do the talking for him - because when he does talk, it sounds like he has a bucket on his head.", 4, [["dark prince", 199, 199, 206, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 30, 30, [], [["split", [["dark prince", 1030, 1030, 206, 0, 0, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 0, 0, [], [["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], ["noTargetChange"], ["retainTarget"], ["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], //89
["Bandit", "The Bandit dashes to her target and delivers an extra big hit! While dashing, she can't be touched. The mask keeps her identity safe... and gives her bonus cool points!", 3, [["bandit", 750, 750, 160, 0.5, 0.5, 1.2, 3, 90, 0.8, 6.0, 0, 30, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["dash", 3.5, 6, 160, 90, 320, 500, 0, 24, -1]]]]], //90
["Mega Knight", "He lands with the force of 1,000 mustaches, then jumps from one foe to the next dealing huge area damage. Stand aside!", 7, [["mega knight", 3300, 3300, 222, 0.5, 0.5, 1.5, 18, 60, 1.2, 5.5, 0, 51, 15, -1, false, 0, 1.3, "ground", "ground", 1, 30, 30, [], [["jump", 3.5, 5, 222, 90, 444, 250, 0, 33, -1, 2.2, [["knockback", 1]]], ["resistance"], ["ps", 1400], ["sdmg", 444, 2.2, [["knockback", 1], ["wait", 15]]]]]]], //91
["Miner", "The Miner can burrow his way underground and appear anywhere in the Arena. It's not magic, it's a shovel.", 3, [["miner", 100000, 100000, 0, 0.5, 0.5, 1.0, 6, 650, 1.2, 5.5, 0, 36, 21, -1, false, 0, 0.0, "uground", "none", 1, 30, 0, [], [["resistance"], ["mining", 0, 0, false, [["miner", 1000, 1000, 160, 0, 0, 1.0, 6, 90, 1.2, 5.5, 0, 36, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], [["ctreduc", 0.4]]]]]]]], "spell"], //92 
["Fisherman", "His Ranged Attack can pull enemies towards him, and pull himself to enemy buildings. He's also mastered the ancient art of 'Fish Slapping'.", 3, [["fisherman", 800, 800, 160, 0.5, 0.5, 1.0, 10, 60, 1.2, 7.5, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["pull", 3.5, 7, 0, 45, -1, false], ["resistance"]]]]], //93
["Mirror", "Mirrors your last card played for +1 Elixir. Will not appear in your starting cards.", 0, []], //94
["Clone", "Duplicates all friendly troops in the target area. Cloned troops are fragile, but pack the same punch as the original! Doesn't affect buildings.", 3, [["clone", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["clone"], ["noCrown"], ["friendly"]]]]]], "spell"], //95
["Firecracker", "Shoots a firework that explodes on impact, damaging the target and showering anything behind it with sparks. This is what happens when Archers get bored!", 3, [["firecracker", 252, 252, 0, 0.5, 0.5, 1.0, 6, 90, 6.0, 10, 0, 90, 30, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], [["recoil", 2], ["sptrgt", [["spread", 5, 15, 6, 53]]], ["ps", 600]]]]], //96
];
};
}
//Legacy versions (do not edit unless necessary)
//{
if(version === "legacy-0120"){
    var cardsInit = function(){
    cards = [
["Spear Goblins", "Three unarmored ranged attackers. Who the heck taught these guys to throw spears!?! Who thought that was a good idea?!", 2, [["spear goblin", 110, 110, 67, 0, 0.5, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //0
["Dart Goblin", "Runs fast, shoots far and chews gum. How does he blow darts with a mouth full of Double Trouble gum? Years of didgeridoo lessons.", 3, [["dart goblin", 216, 216, 100, 0.5, 0.5, 1, 3, 120, 6.5, 7.5, 0, 21, 10.5, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //1
["Elixir Golem", "Splits into two Elixir Golemites when destroyed, which split into two sentient Blobs when defeated. A Blob gives your opponent 1 Elixir when destroyed!", 3, [["elixir golem", 1196, 1196, 212, 0.5, 0.5, 1.2, 15, 45, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["elixir golemite", 598, 598, 106, 0, 0.5, 1, 10, 60, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 299, 299, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 299, 299, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]], ["elixir golemite", 598, 598, 106, 0, -0.5, 10, 10, 60, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 299, 299, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 299, 299, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]]]], ["dsplit"]]]]], //Again, all one troop. //2
["X-Bow", "Nice tower you got there. Would be a shame if this X-Bow whittled it down from this side of the Arena...", 6, [["xbow", 1383, 1383, 26, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 7.5, 7.5, -1, false, 0, 0, "building", "ground", 1, 30, 105, [], [["lifetime", 1200], ["ps", 1600]]]]], //3
["Knight", "A tough melee fighter. The Barbarian's handsome, cultured cousin. Rumor has it that he was knighted based on the sheer awesomeness of his mustache alone.", 3, [["knight", 1452, 1452, 167, 0.5, 0.5, 1, 6, 60, 1.2, 5.5, 0, 36, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //4
["Giant", "Slow but durable, only attacks buildings. A real one-man wrecking crew!", 5, [["giant", 3275, 3275, 211, 0.5, 0.5, 1.5, 18, 45, 1.2, 7.5, 0, 45, 15, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]],]], //5
["Musketeer", "Don't be fooled by her delicately coiffed hair, the Musketeer is a mean shot with her trusty boomstick.", 4, [["musketeer", 598, 598, 181, 0.5, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []],]], //6
["Skeletons", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 1, [["skeleton", 67, 67, 67, 0, 0.5, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, -0.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, 1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //7
["Cannon", "Defensive building. Shoots cannonballs with deadly effect, but cannot target flying troops.", 3, [["cannon", 742, 742, 167, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0, "building", "ground", 1, 30, 30, [], [["lifetime", 900], ["ps", 900]]]]], //8
["Wizard", "The most awesome man to ever set foot in the arena, the Wizard will blow you away with his handsomeness... and/or fireballs.", 5, [["wizard", 598, 598, 234, 0.5, 0.5, 1, 5, 60, 5.5, 5.5, 0, 42, 12, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, []],]], //9
["Fire Spirits", "These three Fire Spirits are on a kamikaze mission to give you a warm hug. It'd be adorable if they weren't on fire.", 2, [["fire spirit", 91, 91, 178, 0, 0.5, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, -0.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, 1.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]],]], //10
["Ice Spirit", "Spawns one lively little Ice Spirit to freeze a group of enemies. Stay frosty.", 1, [["ice spirit", 190, 190, 91, 0.5, 0.5, 0.8, 1, 120, 2.5, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"], ["stun", 30]]],]], //11
["Zappies", "Spawns a pack of miniature Zap machines. Who controls them...? Only the Master Builder knows.", 4, [["zappy", 440, 440, 70, -0.2, 0.5, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 70, 0.8, -0.2, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 70, 0.8, 1.2, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]]]], //12 (mass unknown)
["P.E.K.K.A.", "A heavily armored, slow melee fighter. Swings from the hip but packs a huge punch.", 7, [["pekka", 3125, 3125, 678, 0.5, 0.5, 1.5, 18, 45, 1.2, 5.0, 0, 54, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, [], [["resistance"]]],]], //13
["Sparky", "Sparky slowly charges up, then unloads MASSIVE area damage. Overkill isn't in her vocabulary.", 6, [["sparky", 1200, 1200, 1100, 0.5, 0.5, 2, 18, 45, 5.5, 5.5, 120, 120, 15, -1, false, 0, 1.8, "ground", "ground", 1, 30, 30, [], [["resistance"], ["weak-stun"], ["recoil", 0.75]]],]], //14
["Mini P.E.K.K.A.", "The Arena is a certified butterfly-free zone. No distractions for P.E.K.K.A, only destruction.", 4, [["mini pekka", 1129, 1129, 598, 0.5, 0.5, 0.9, 4, 90, 1.2, 5.5, 0, 54, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //15 (First generated one!)
["Ice Wizard", "This chill caster throws ice shards that slow down enemies' movement and attack speed. Despite being freezing cold, he has a handlebar mustache that's too hot for TV.", 3, [["ice wizard", 590, 590, 75, 0.5, 0.5, 1.0, 5, 60, 5.5, 5.5, 0, 51, 15, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["slow", 75]]]]], //16
["Goblin Cage", "When the Goblin Cage is destroyed, a Goblin Brawler is unleashed into the Arena! Goblin Brawler always skips leg day.", 4, [["cage", 800, 800, 0, 0.5, 0.5, 2, 0, 0, 0.0, 0.0, 0, 27000, 27000, -1, false, 0, 0.0, "building", "ground", 1, 30, 30, [], [["lifetime", 600], ["split", [["brawler", 853, 853, 264, 0, 0, 1.0, 2, 90, 0.8, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 5, 15, [], []]]]]]]], //17
["Cannon Cart", "A Cannon on wheels?! Bet they won't see that coming! Once you break its shield, it becomes a Cannon not on wheels.", 5, [["cannon cart", 742, 742, 168, 0.5, 0.5, 1.2, 3, 90, 5.5, 6, 0, 30, 18, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["resistance"], ["split", [["cannon cart", 742, 742, 168, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0.0, "building", "ground", 1, 2, 3, [], [["lifetime", 900]]]]]]]]], //18
["Mega Minion", "Flying, armored and powerful. What could be its weakness?! Cupcakes.", 3, [["mega minion", 695, 695, 258, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 48, 12, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]]]], //19
["Baby Dragon", "Burps fireballs from the sky that deal area damage. Baby dragons hatch cute, hungry and ready for a barbeque.", 4, [["baby dragon", 1024, 1024, 133, 0.5, 0.5, 1.0, 5, 90, 3.5, 5.5, 0, 45, 9, -1, false, 0, 1.2, "air", "all", 1, 30, 30, [], []]]], //20
["Royal Giant", "Destroying enemy buildings with his massive cannon is his job; making a raggedy blond beard look good is his passion.", 6, [["royal giant", 2544, 2544, 254, 0.5, 0.5, 1.5, 18, 45, 5.0, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]]]], //21
["Minions", "Three fast, unarmored flying attackers. Roses are red, minions are blue, they can fly, and will crush you!", 3, [["minion", 190, 190, 84, 0, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, -0.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, 1.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]]]], //22
["Minion Horde", "Six fast, unarmored flying attackers. Three's a crowd, six is a horde!", 5, [["minion", 190, 190, 84, 1.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, -0.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 52.5, 30, [], [["ps", 810.0001]]]]], //23
["Goblins", "Three fast, unarmored melee attackers. Small, fast, green and mean!", 2, [["goblin", 167, 167, 99, 0, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, -0.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, 1.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //24
["Guards", "Three ruthless bone brothers with shields. Knock off their shields and all that's left are three ruthless bone brothers.", 3, [["guard", 199, 199, 90, 0, 0.5, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, -0.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, 1.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //25
["Bomber", "Small, lightly protected skeleton that throws bombs. Deals area damage that can wipe out a swarm of enemies.", 3, [["bomber", 398, 398, 271, 0.5, 0.5, 1.0, 4, 60, 5.0, 5.5, 0, 57, 6, -1, false, 0, 1.5, "ground", "ground", 1, 30, 30, [], []]]], //26
["Flying Machine", "The Master Builder has sent his first contraption to the Arena! It's a fast and fun flying machine, but fragile!", 4, [["flying machine", 510, 510, 142, 0.5, 0.5, 1.0, 3, 90, 6.0, 6.0, 0, 33, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []]]], //27
["Elixir Collector", "You gotta spend Elixir to make Elixir! This building makes 8 Elixir over its Lifetime. Does not appear in your starting hand.", 6, [["elixir collector", 888, 888, 0, 0.5, 0.5, 2, 0, 0, -1.0, -1.0, 0, 255, 255, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 2100], ["elixir", 255, 255]]]]], //28
["Bats", "Spawns a handful of tiny flying creatures. Think of them as sweet, purple... balls of DESTRUCTION!", 2, [["bat", 67, 67, 67, 0.5+sin(radians(36)), 0.5+cos(radians(36)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(108)), 0.5+cos(radians(108)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(180)), 0.5+cos(radians(180)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(252)), 0.5+cos(radians(252)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(324)), 0.5+cos(radians(324)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], []]]], //29
["Witch", "Summons Skeletons, shoots destructo beams, has glowing pink eyes that unfortunately don't shoot lasers.", 5, [["witch", 696, 696, 111, 0.5, 0.5, 1.0, 8, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 1, "ground", "all", 1, 30, 30, [], [["spawner", 105, 210, [["skeleton", 67, 67, 67, 2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, 2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, -2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, -2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []],]]]]]], //30
["Night Witch", "Summons Bats to do her bidding, even after death! If you get too close, she isn't afraid of pitching in with her mean-looking battle staff.", 4, [["night witch", 750, 750, 260, 0.5, 0.5, 1.0, 4, 60, 1.6, 5.5, 0, 45, 22.5, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["split", [["bat", 67, 67, 67, 0, -1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, -1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, 1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["spawner", 105, 210, [["bat", 67, 67, 67, 0, 1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, -1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["dspawn"]]]]], //31
["Goblin Hut", "Building that spawns Spear Goblins. But don't look inside. You don't want to see how they are made.", 5, [["goblin hut", 1293, 1293, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 135, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1500], ["spawner", 1, 135, [["spear goblin", 110, 110, 67, -0.5, 0, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 0, 0, [], []]]]]]]], //32
["Tombstone", "Troop building that periodically deploys Skeletons to fight the enemy... and when destroyed, spawns 3 Skeletons! Creepy.", 3, [["tombstone", 422, 422, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1200], ["split", [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, -0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, 0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []],]], ["spawner", 93, 93, [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //33
["Inferno Dragon", "Shoots a focused beam of fire that increases in damage over time. Wears a helmet because flying can be dangerous.", 4, [["inferno dragon", 1070, 1070, 30, 0.5, 0.5, 1.0, 5, 60, 3.5, 5.5, 0, 12, 36, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["inferno", 0, 60, 30, 70, 350]]]]], //34
["Inferno Tower", "Defensive building, roasts targets for damage that increases over time. Burns through even the biggest and toughest enemies!", 5, [["inferno tower", 1452, 1452, 35, 0.5, 0.5, 1.2, 0, 0, 6, 6, 0, 12, 60, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 900], ["inferno", 0, 60, 35, 132, 704]]]]], //35
["Prince", "Don't let the little pony fool you. Once the Prince gets a running start, you WILL be trampled. Deals double damage once he gets charging.", 5, [["prince", 1615, 1615, 325, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 42, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 325, 60, 651, 120]]]]], //36
["Battle Ram", "Two Barbarians holding a big log charge at the nearest building, dealing significant damage if they connect; then they go to town with their swords!", 4, [["battle ram", 756, 756, 220, 0.5, 0.5, 1.5, 6, 60, 0.5, 5.5, 0, 12, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 220, 60, 440, 120], ["kamikaze"], ["split", [["barbarian", 555, 555, 159, 0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []], ["barbarian", 555, 555, 159, -0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []]]], ["dsplit"]]]]], //37
["Barbarians", "A horde of melee attackers with mean mustaches and even meaner tempers.", 5, [["barbarian", 555, 555, 159, 0.5+sin(radians(54)), 0.5+cos(radians(54)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(126)), 0.5+cos(radians(126)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(198)), 0.5+cos(radians(198)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(270)), 0.5+cos(radians(270)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 43.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(342)), 0.5+cos(radians(342)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 48, 30, [], []]]], //38
["Electro Dragon", "Spits out bolts of electricity hitting up to three targets. Suffers from middle child syndrome to boot.", 5, [["electro dragon", 790, 790, 159, 0.5, 0.5, 1.2, 7, 60, 3.5, 5.5, 0, 63, 21, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["stun", 15], ["ps", 2000], ["chain", 2, 3.5, 159, []]]]]], //39
["Elite Barbarians", "Spawns a pair of leveled up Barbarians. They're like regular Barbarians, only harder, better, faster and stronger.", 6, [["elite barbarian", 970, 970, 301, 0.5, 1.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["elite barbarian", 970, 970, 301, 0.5, -0.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //40
["Archers", "A pair of lightly armored ranged attackers. They'll help you take down ground and air units, but you're on your own with hair coloring advice.", 3, [["archer", 252, 252, 89, 0.5, 1.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []], ["archer", 252, 252, 89, 0.5, -0.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []]]], //41
["Three Musketeers", "Trio of powerful, independent markswomen, fighting for justice and honor. Disrespecting them would not be just a mistake, it would be a cardinal sin!", 9, [["musketeer", 598, 598, 181, 0.5-0.7, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 60, 60, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(-30)), 0.5-0.7*cos(radians(-30)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 60, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(210)), 0.5-0.7*cos(radians(210)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 45, 60, []],]], //42
["Rascals", "Spawns a mischievous trio of Rascals! The boy takes the lead, while the girls pelt enemies from behind... with slingshots full of Double Trouble Gum!", 5, [["rascal boy", 1515, 1515, 110, -0.1, 0.5, 1.5, 10, 60, 0.8, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, -0.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 34.5, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, 1.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 39, 30, [], []]]], //43
["Fireball", "Annnnnd... Fireball. Incinerates a small area, dealing high damage. Reduced damage to Crown Towers.", 4, [["fireball", 0, 0, 572, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.8], ["spell"]]]]]], "spell"], //44 (GOT EEM!)
["Giant Snowball", "It’s HUGE! Once it began rolling down Frozen Peak, there was no stopping it. Enemies hit are knocked back and slowed down.", 2, [["snowball", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.5], ["slow", 75], ["spell"]]]]]], "spell"], //45
["Arrows", "Arrows pepper a large area, damaging all enemies hit. Reduced damage to Crown Towers.", 3, [["arrows", 0, 0, 101, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["spell", [["spell"]]], ["spell", [["spell"], ["wait", 6]]], ["spell", [["spell"], ["wait", 12]]], ["ps", 1600]]]], "spell"], //46
["Rocket", "Deals high damage to a small area. Looks really awesome doing it. Reduced damage to Crown Towers.", 6, [["rocket", 0, 0, 1232, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1], ["spell"]]], ["ps", 500]]]], "spell"], //47
["Zap", "Zaps enemies, briefly stunning them and dealing damage inside a small radius. Reduced damage to Crown Towers.", 2, [["zap", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"]]]]]], "spell"], //48
["Freeze", "Freezes and damages troops and buildings, making them unable to move or attack. Everybody chill.", 4, [["freeze", 0, 0, 95, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 120], ["spell"]]]]]], "spell"], //49
["Ice Golem", "He's tough, targets buildings and explodes when destroyed, slowing nearby enemies. Made entirely out of ice... or is he?! Yes.", 2, [["ice golem", 994, 994, 70, 0.5, 0.5, 1.4, 6, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["ddmg", 70, 2, [["slow", 30]]]]]]], //50
["Skeleton Barrel", "It's a Skeleton party in the sky, until all the balloons pop... then it's a Skeleton party on the ground!", 3, [["skeleton barrel", 636, 636, 0, 0.5, 0.5, 1.0, 7, 90, 0.4, 7.7, 0, 9, 3, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["kamikaze"], ["ddmg", 110, 2, [["knockback", 1], ["wait", 15]]], ["split", [["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+360/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-360/7, 1.2]]],]]]]]], //51
["Poison", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 4, [["poison", 0, 0, 75, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 30], ["spell"]]], ["instspell", [["wait", 60], ["spell"]]], ["instspell", [["wait", 90], ["spell"]]], ["instspell", [["wait", 120], ["spell"]]], ["instspell", [["wait", 150], ["spell"]]], ["instspell", [["wait", 180], ["spell"]]], ["instspell", [["wait", 210], ["spell"]]], ["instspell", [["wait", 240], ["spell"]]]]]], "spell"], //52
["Valkyrie", "Tough melee fighter, deals area damage around her. Swarm or horde, no problem! She can take them all out with a few spins.", 4, [["valkryie", 1654, 1654, 221, 0.5, 0.5, 1.0, 5, 60, 1.2, 5.5, 0, 45, 3, -1, false, 0, 1.7, "ground", "ground", 1, 30, 30, [], [["aoea", [["ground"]]]]]]], //53
["Wall Breakers", "A daring duo of dangerous dive bombers. Nothing warms a Wall Breaker's cold and undead heart like blowing up buildings.", 2, [["wall breaker", 275, 275, 325, 0.5, 1.25, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]], ["wall breaker", 275, 275, 325, 0.5, -0.25, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]]]], //54
["Royal Recruits", "Deploys a line of recruits armed with spears, shields and wooden buckets. They dream of ponies and one day wearing metal buckets.", 7, [["recruit", 199, 199, 101, 0.3, -0.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, -3.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, -6, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 1.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, 4.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 7, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]], "recruits"], //55
["Giant Skeleton", "The bigger the skeleton, the bigger the bomb. Carries a bomb that blows up when the Giant Skeleton dies.", 6, [["giant skeleton", 2793, 2793, 172, 0.5, 0.5, 2.0, 18, 60, 0.8, 5.0, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["split", [["bomb", 10000, 10000, 957, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 2.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 957, 2, [["knockback", 1]]], ["lifetime", 90]]]]]]]]], //56
["Balloon", "As pretty as they are, you won't want a parade of THESE balloons showing up on the horizon. Drops powerful bombs and when shot down, crashes dealing area damage.", 5, [["balloon", 1396, 1396, 798, 0.5, 0.5, 1.0, 6, 60, 0.1, 7.7, 0, 90, 6, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["split", [["bomb", 10000, 10000, 272, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 272, 3, []], ["lifetime", 90]]]]]]]]], //57
["Bomb Tower", "Defensive building that houses a Bomber. Deals area damage to anything dumb enough to stand near it.", 4, [["bomb tower", 1126, 1126, 168, 0.5, 0.5, 1.2, 0, 0, 6.0, 6.0, 0, 48, 15, -1, false, 0, 1.5, "building", "ground", 1, 30, 30, [], [["lifetime", 1050], ["split", [["bomb", 10000, 10000, 336, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 336, 2, []], ["lifetime", 90]]]]]]]]], //58
["Golem", "Slow but durable, only attacks buildings. When destroyed, explosively splits into two Golemites and deals area damage!", 8, [["golem", 4256, 4256, 259, 0.5, 0.5, 1.5, 20, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 90, [], [["ddmg", 259, 2, [["knockback", 1.8]]], ["resistance"], ["split", [["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, 0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]], ["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, -0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]]]], ["dsplit"]]]]], //59
["Heal", "Heal your troops to keep them in the fight! Friendly troops are healed over time while in the target area. Doesn't affect buildings.", 1, [["heal", 0, 0, -33, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 30], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 45], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 60], ["noCrown"], ["friendly"]]]]]], "spell"], //60
["Rage", "Increases troop movement and attack speed. Buildings attack faster and summon troops quicker, too. Chaaaarge!", 2, [["rage", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["rage", 60], ["time", 225], ["rage", 60], ["friendly"]]]]]], "spell"], //61
["Lumberjack", "He chops trees by day and hunts The Log by night. His bottle of Rage spills everywhere when he's defeated.", 4, [["lumberjack", 1060, 1060, 200, 0.5, 0.5, 1.0, 4, 120, 0.7, 5.5, 0, 24, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["ddmg", 0, 4, [["rage", 60], ["friendly"], ["time", 234], ["rage", 60], ["wait", 9]]]]]]], //62
["Goblin Barrel", "Spawns three Goblins anywhere in the Arena. It's going to be a thrilling ride, boys!", 3, [["barrel", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["spawn", [["goblin", 167, 167, 99, 0.4, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, 0.4, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, -0.5, 0, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ]], ["spell"]]], ["ps", 600]]]], "spell"], //63
["Electro Wizard", "He lands with a \"POW!\", stuns nearby enemies and shoots lightning with both hands! What a show off.", 4, [["ewiz", 590, 590, 96, 0.5, 0.5, 1.0, 5, 90, 5.0, 5.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["defender", 5], ["ps", 100000], ["sdmg", 159, 2.5, [["stun", 15]]]]]]], //64
["Princess", "This stunning Princess shoots flaming arrows from long range. If you're feeling warm feelings towards her, it's probably because you're on fire.", 3, [["princess", 216, 216, 140, 0.5, 0.5, 1.0, 3, 60, 9.0, 9.5, 0, 90, 15, -1, false, 0, 2.0, "ground", "all", 1, 30, 30, [], [["sptrgt"]]]]], //65
["Mortar", "Defensive building with a long range. Shoots big boulders that deal area damage, but cannot hit targets that get very close!", 4, [["mortar", 1221, 1221, 220, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 150, 30, -1, false, 0, 2.0, "building", "ground", 1, 30, 105, [], [["sptrgt", [["ground"]]], ["mrange", 3.5], ["lifetime", 900], ["ps", 630]]]]], //66
["Goblin Gang", "Spawns five Goblins - three with knives, two with spears - at a discounted Elixir cost. It's like a Goblin Value Pack!", 3, [["spear goblin", 110, 110, 67, 1.4, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 43.5, 30, []], ["spear goblin", 110, 110, 67, 1.4, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 48, 30, []], ["goblin", 167, 167, 99, -0.6, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["goblin", 167, 167, 99, -0.3, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, -0.3, 1.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []]]], //67
["Lava Hound", "The Lava Hound is a majestic flying beast that attacks buildings. The Lava Pups are less majestic angry babies that attack anything.", 7, [["lava hound", 3150, 3150, 45, 0.5, 0.5, 1.5, 5, 45, 3.5, 5.5, 0, 39, 9, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 0, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 60, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 120, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 180, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 240, 2.5]], []], ["lava pup", 179, 179, 75, 0, 0, 1, 5, 60, 1.6, 5.5, 0, 51, 30, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 300, 2.5]], []],]]]]]], //68
["Magic Archer", "Not quite a Wizard, nor an Archer - he shoots a magic arrow that passes through and damages all enemies in its path. It's not a trick, it's magic!", 4, [["magic archer", 490, 490, 111, 0.5, 0.5, 1.2, 3, 60, 7.0, 7.5, 0, 33, 15, -1, false, 0, 0.25, "ground", "all", 1, 30, 30, [], [["sptrgt", [["pass", 0, 11.6, []]]], ["ps", 1200]]]]], //69
["Bowler", "This big blue dude digs the simple things in life - Dark Elixir drinks and throwing rocks. His massive boulders roll through their target, hitting everything behind for a strike!", 5, [["bowler", 1596, 1596, 239, 0.5, 0.5, 1.5, 18, 45, 5.0, 5.5, 0, 75, 15, -1, false, 0, 0.9, "ground", "ground", 1, 30, 30, [], [["resistance"], ["sprnge", 0.8, 4.95, [["knockback", 1], ["pass", 0, 5, []], ["ground"]]], ["ps", 600]]]]], //70
["Hunter", "He deals BIG damage up close - not so much at range. What he lacks in accuracy, he makes up for with his impressively bushy eyebrows.", 4, [["hunter", 696, 696, 70, 0.5, 0.5, 1.2, 5, 60, 4.0, 5.5, 0, 66, 21, -1, false, 0, 0.07, "ground", "all", 1, 30, 30, [], [["shotgun", 10, 9], ["sptrgt", [["killOnHit"], ["pass", 0, 4, []]]],]]]], //71
["Graveyard", "Surprise! It's a party. A Skeleton party, anywhere in the Arena. Yay!", 5, [["graveyard", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 0, [], [["instspell", [["time", 315], ["graveyard", 90, 15, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], ["friendly"]]]]]], "spell"], //72
["Executioner", "He throws his axe like a boomerang, striking all enemies on the way out AND back. It's a miracle he doesn't lose an arm.", 5, [["executioner", 1010, 1010, 140, 0.5, 0.5, 1.2, 4, 60, 4.5, 5.5, 0, 21, 30, -1, false, 0, 1, "ground", "all", 1, 30, 30, [], [["sprnge", 0.6, 5.9, [["tmr", 0, 21, []]], [["tmr", 0, 30, []]]], ["hitp", 0, 51]]]]], //73
["Barbarian Hut", "Troop building that periodically deploys Barbarians to fight the enemy. Time to make the Barbarians", 7, [["hut", 1804, 1804, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1800], ["spawner", 1, 405, [["barbarian", 555, 555, 159, -0.7, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []], ["barbarian", 555, 555, 159, -0.6, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 9, 0, [], []]]]]]]], //74
["Furnace", "The Furnace spawns two Fire Spirits at a time. It also makes great brick-oven pancakes.", 4, [["furnace", 1003, 1003, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1501], ["spawner", 1, 300, [["fire spirit", 91, 91, 178, -0.7, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 0, 0, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, -0.6, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 9, 0, [], [["kamikaze"]]], ]]]]]], //75
["Hog Rider", "Fast melee troop that targets buildings and can jump over the river. He followed the echoing call of \"Hog Riderrrrr\" all the way through the Arena doors.", 4, [["hog", 1408, 1408, 264, 0.5, 0.5, 1.2, 4, 120, 0.8, 9.5, 0, 48, 18, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //76
["Royal Hogs", "The King’s personal pets are loose! They love to chomp on apples and towers alike - who let the hogs out?!", 5, [["hoggie", 695, 695, 56, 0.5, -1.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, -0.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, 1.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, 2.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //77
["Royal Ghost", "He drifts invisibly through the Arena until he's startled by an enemy... then he attacks! Then he's invisible again! Zzzz.", 3, [["ghost", 1000, 1000, 216, 0.5, 0.5, 1.2, 3, 90, 1.2, 5.5, 0, 54, 18, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["invis", 0, 48, 12, 12]]]]], //78
["Tornado", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 3, [["nado", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["time", 60], ["nado", 20]]]]], ["nado", 0, 0, 35, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"]]], ["instspell", [["wait", 30], ["noCrown"]]], ["instspell", [["wait", 45], ["noCrown"]]], ["instspell", [["wait", 60], ["noCrown"]]]]]], "spell"], //79
["Lightning", "Bolts of lightning damage and stun up to three enemy troops or buildings with the most hitpoints in the target area. Reduced damage to Crown Towers.", 6, [["lightning", 0, 0, 877, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"], ["tmr", 45], ["hit", 0, 3, 15, 15, []], ["stun", 15]]]]]], "spell"], //80
["Earthquake", "Deals Damage per second to Troops and Crown Towers. Deals huge Building Damage! Does not affect flying units (it is an EARTHquake, after all).", 3, [["earthquake", 0, 0, 61, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["noBuildings"], ["wait", 15], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 30], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 45], ["ground"]]]]], ["earthquake", 0, 0, 244, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 15]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 30]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 45]]]]]], "spell"], //81
["The Log", "A spilt bottle of Rage turned an innocent tree trunk into \"The Log\". Now, it seeks revenge by crushing anything in its path!", 2, [["log", 0, 0, 240, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 13.1, []], ["rect", 3.9, 1.2], ["sudoKnockback", 1], ["forward", 13.1], ["ground"], ["spell"]]], ["ps", 300]]]]], //82
["Barbarian Barrel", "It rolls over and damages anything in its path, then breaks open and out pops a Barbarian! How did he get inside?!", 2, [["barb", 0, 0, 0, -4.75, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["spawn", [["barbarian", 555, 555, 159, 0, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 4, [], []]]], ["wait", 36]]]]], ["barrel", 0, 0, 200, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 5.5, []], ["rect", 2.6, 1.2], ["forward", 5.5], ["ground"], ["spell"]]], ["ps", 300]]]]], //83
["Skeleton Army", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 3, [["skeleton", 67, 67, 67, -1.25, -1.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.3, -0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, -0.9, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, -2.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.1, -1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.4, -0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.8, 0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.5, 0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.65, 1.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.6, 2.2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.2, 0.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.35, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //84
["Tesla", "Defensive building. Whenever it's not zapping the enemy, the power of Electrickery is best kept grounded.", 4, [["tesla", 954, 954, 190, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 33, 15, -1, false, 0, 0, "building", "all", 1, 30, 30, [], [["hiding", -30, 15, 0, 12], ["lifetime", 1050], ["ps", 990]]]]], //85
["Goblin Giant", "This jolly green Goblin Giant stomps towards enemy buildings. He carries two Spear Goblins everywhere he goes. It's a weird but functional arrangement.", 6, [["goblin giant", 2616, 2616, 146, 0.5, 0.5, 1.5, 18, 60, 1.2, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["link", false, [["    ", 110, 110, 67, 0, -0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []], ["    ", 110, 110, 67, 0, 0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []]]], ["split", [["spear goblin", 110, 110, 67, 0, -0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []], ["spear goblin", 110, 110, 67, 0, 0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []]]], ["dsplit"]]]]], //86
["Ram Rider", "Together they charge through the Arena; snaring enemies, knocking down towers ... and chewing grass!?", 5, [["ram", 1461, 1461, 220, 0.5, 0.5, 1.2, 4, 60, 0.8, 7.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"], ["charge", 0, 3.5, 220, 60, 440, 120], ["resistance"], ["link", false, [["rider", 490, 490, 86, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 33, 12, -1, false, 0, 0, "link", "troops", 1, 0, 30, [], [["snare", 60], ["retarget"], ["deprioritize", "snare"]]]]]]]]], //87
["Battle Healer", "With each attack, she unleashes a powerful healing aura that restores Hitpoints to herself and friendly Troops. When she isn't attacking, she passively heals herself!", 4, [["healer", 1584, 1584, 123, 0.5, 0.5, 1.0, 6, 60, 1.6, 5.5, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["regen", 15, 15, 13], ["atkSpawn", [["heal", 0, 0, -21, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 0, 10, [], [["instspell", [["wait", 6, 6], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 12, 12], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 18, 18], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 24, 24], ["noCrown"], ["friendly"]]]]]]]]]]], //88
["Dark Prince", "The Dark Prince deals area damage and lets his spiked club do the talking for him - because when he does talk, it sounds like he has a bucket on his head.", 4, [["dark prince", 199, 199, 206, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 30, 30, [], [["split", [["dark prince", 1030, 1030, 206, 0, 0, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 0, 0, [], [["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], ["noTargetChange"], ["retainTarget"], ["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], //89
["Bandit", "The Bandit dashes to her target and delivers an extra big hit! While dashing, she can't be touched. The mask keeps her identity safe... and gives her bonus cool points!", 3, [["bandit", 750, 750, 160, 0.5, 0.5, 1.2, 3, 90, 0.8, 6.0, 0, 30, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["dash", 3.5, 6, 160, 90, 320, 500, 0, 24, -1]]]]], //90
["Mega Knight", "He lands with the force of 1,000 mustaches, then jumps from one foe to the next dealing huge area damage. Stand aside!", 7, [["mega knight", 3300, 3300, 222, 0.5, 0.5, 1.5, 18, 60, 1.2, 5.5, 0, 51, 15, -1, false, 0, 1.3, "ground", "ground", 1, 30, 30, [], [["jump", 3.5, 5, 222, 90, 444, 250, 0, 33, -1, 2.2, [["knockback", 1]]], ["resistance"], ["ps", 1400], ["sdmg", 444, 2.2, [["knockback", 1], ["wait", 15]]]]]]], //91
["Miner", "The Miner can burrow his way underground and appear anywhere in the Arena. It's not magic, it's a shovel.", 3, [["miner", 100000, 100000, 0, 0.5, 0.5, 1.0, 6, 650, 1.2, 5.5, 0, 36, 21, -1, false, 0, 0.0, "uground", "none", 1, 30, 0, [], [["resistance"], ["mining", 0, 0, false, [["miner", 1000, 1000, 160, 0, 0, 1.0, 6, 90, 1.2, 5.5, 0, 36, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], [["ctreduc", 0.4]]]]]]]], "spell"], //92 
["Fisherman", "His Ranged Attack can pull enemies towards him, and pull himself to enemy buildings. He's also mastered the ancient art of 'Fish Slapping'.", 3, [["fisherman", 800, 800, 160, 0.5, 0.5, 1.0, 10, 60, 1.2, 7.5, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["pull", 3.5, 7, 0, 45, -1, false], ["resistance"]]]]], //93
["Mirror", "Mirrors your last card played for +1 Elixir. Will not appear in your starting cards.", 0, []], //94
["Clone", "Duplicates all friendly troops in the target area. Cloned troops are fragile, but pack the same punch as the original! Doesn't affect buildings.", 3, [["clone", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["clone"], ["noCrown"], ["friendly"]]]]]], "spell"], //95
["Firecracker", "Shoots a firework that explodes on impact, damaging the target and showering anything behind it with sparks. This is what happens when Archers get bored!", 3, [["firecracker", 252, 252, 0, 0.5, 0.5, 1.0, 6, 90, 6.0, 10, 0, 90, 30, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], [["recoil", 2], ["sptrgt", [["spread", 5, 15, 6, 53]]], ["ps", 600]]]]], //96
];
};
}
if(version === "legacy-1219"){
    var cardsInit = function(){
    cards = [
["Spear Goblins", "Three unarmored ranged attackers. Who the heck taught these guys to throw spears!?! Who thought that was a good idea?!", 2, [["spear goblin", 110, 110, 67, 0, 0.5, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //0
["Dart Goblin", "Runs fast, shoots far and chews gum. How does he blow darts with a mouth full of Double Trouble gum? Years of didgeridoo lessons.", 3, [["dart goblin", 216, 216, 100, 0.5, 0.5, 1, 3, 120, 12, 6.5, 0, 21, 10.5, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //1
["Elixir Golem", "Splits into two Elixir Golemites when destroyed, which split into two sentient Blobs when defeated. A Blob gives your opponent 1 Elixir when destroyed!", 3, [["elixir golem", 1267, 1267, 212, 0.5, 0.5, 1.2, 15, 45, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["elixir golemite", 633, 633, 106, 0, 0.5, 1, 10, 60, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 316, 316, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 316, 316, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]], ["elixir golemite", 633, 633, 106, 0, -0.5, 1, 10, 60, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 316, 316, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 316, 316, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 39, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]]]], ["dsplit"]]]]], //Again, all one troop. //2
["X-Bow", "Nice tower you got there. Would be a shame if this X-Bow whittled it down from this side of the Arena...", 6, [["xbow", 1383, 1383, 26, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 7.5, 7.5, -1, false, 0, 0, "building", "ground", 1, 30, 105, [], [["lifetime", 1200], ["ps", 1600]]]]], //3
["Knight", "A tough melee fighter. The Barbarian's handsome, cultured cousin. Rumor has it that he was knighted based on the sheer awesomeness of his mustache alone.", 3, [["knight", 1452, 1452, 167, 0.5, 0.5, 1, 6, 60, 1.2, 5.5, 0, 36, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //4
["Giant", "Slow but durable, only attacks buildings. A real one-man wrecking crew!", 5, [["giant", 3275, 3275, 211, 0.5, 0.5, 1.5, 18, 45, 1.2, 7.5, 0, 45, 15, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]],]], //5
["Musketeer", "Don't be fooled by her delicately coiffed hair, the Musketeer is a mean shot with her trusty boomstick.", 4, [["musketeer", 598, 598, 181, 0.5, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []],]], //6
["Skeletons", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 1, [["skeleton", 67, 67, 67, 0, 0.5, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, -0.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, 1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //7
["Cannon", "Defensive building. Shoots cannonballs with deadly effect, but cannot target flying troops.", 3, [["cannon", 742, 742, 167, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0, "building", "ground", 1, 30, 30, [], [["lifetime", 900], ["ps", 900]]]]], //8
["Wizard", "The most awesome man to ever set foot in the arena, the Wizard will blow you away with his handsomeness... and/or fireballs.", 5, [["wizard", 598, 598, 234, 0.5, 0.5, 1, 5, 60, 5.5, 5.5, 0, 42, 12, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, []],]], //9
["Fire Spirits", "These three Fire Spirits are on a kamikaze mission to give you a warm hug. It'd be adorable if they weren't on fire.", 2, [["fire spirit", 91, 91, 178, 0, 0.5, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, -0.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, 1.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]],]], //10
["Ice Spirit", "Spawns one lively little Ice Spirit to freeze a group of enemies. Stay frosty.", 1, [["ice spirit", 190, 190, 91, 0.5, 0.5, 0.8, 1, 120, 2.5, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"], ["stun", 30]]],]], //11
["Zappies", "Spawns a pack of miniature Zap machines. Who controls them...? Only the Master Builder knows.", 4, [["zappy", 440, 440, 70, -0.2, 0.5, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 70, 0.8, -0.2, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 70, 0.8, 1.2, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]]]], //12 (mass unknown)
["P.E.K.K.A.", "A heavily armored, slow melee fighter. Swings from the hip but packs a huge punch.", 7, [["pekka", 3125, 3125, 678, 0.5, 0.5, 1.5, 18, 45, 1.2, 5.0, 0, 54, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, [], [["resistance"]]],]], //13
["Sparky", "Sparky slowly charges up, then unloads MASSIVE area damage. Overkill isn't in her vocabulary.", 6, [["sparky", 1200, 1200, 1100, 0.5, 0.5, 2, 18, 45, 5.5, 5.5, 120, 120, 15, -1, false, 0, 1.8, "ground", "ground", 1, 30, 30, [], [["resistance"], ["weak-stun"], ["recoil", 0.75]]],]], //14
["Mini P.E.K.K.A.", "The Arena is a certified butterfly-free zone. No distractions for P.E.K.K.A, only destruction.", 4, [["mini pekka", 1129, 1129, 598, 0.5, 0.5, 0.9, 4, 90, 1.2, 5.5, 0, 54, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //15 (First generated one!)
["Ice Wizard", "This chill caster throws ice shards that slow down enemies' movement and attack speed. Despite being freezing cold, he has a handlebar mustache that's too hot for TV.", 3, [["ice wizard", 590, 590, 75, 0.5, 0.5, 1.0, 5, 60, 5.5, 5.5, 0, 51, 15, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["slow", 75]]]]], //16
["Goblin Cage", "When the Goblin Cage is destroyed, a Goblin Brawler is unleashed into the Arena! Goblin Brawler always skips leg day.", 4, [["cage", 800, 800, 0, 0.5, 0.5, 2, 0, 0, 0.0, 0.0, 0, 27000, 27000, -1, false, 0, 0.0, "building", "ground", 1, 30, 30, [], [["lifetime", 600], ["split", [["brawler", 853, 853, 264, 0, 0, 1.0, 2, 90, 0.8, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 5, 15, [], []]]]]]]], //17
["Cannon Cart", "A Cannon on wheels?! Bet they won't see that coming! Once you break its shield, it becomes a Cannon not on wheels.", 5, [["cannon cart", 742, 742, 168, 0.5, 0.5, 1.2, 3, 90, 5.5, 6, 0, 30, 18, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["resistance"], ["split", [["cannon cart", 742, 742, 168, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0.0, "building", "ground", 1, 2, 3, [], [["lifetime", 900]]]]]]]]], //18
["Mega Minion", "Flying, armored and powerful. What could be its weakness?! Cupcakes.", 3, [["mega minion", 695, 695, 258, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 48, 12, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]]]], //19
["Baby Dragon", "Burps fireballs from the sky that deal area damage. Baby dragons hatch cute, hungry and ready for a barbeque.", 4, [["baby dragon", 1024, 1024, 133, 0.5, 0.5, 1.0, 5, 90, 3.5, 5.5, 0, 45, 9, -1, false, 0, 1.2, "air", "all", 1, 30, 30, [], []]]], //20
["Royal Giant", "Destroying enemy buildings with his massive cannon is his job; making a raggedy blond beard look good is his passion.", 6, [["royal giant", 2544, 2544, 254, 0.5, 0.5, 1.5, 18, 45, 5.0, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]]]], //21
["Minions", "Three fast, unarmored flying attackers. Roses are red, minions are blue, they can fly, and will crush you!", 3, [["minion", 190, 190, 84, 0, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, -0.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, 1.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]]]], //22
["Minion Horde", "Six fast, unarmored flying attackers. Three's a crowd, six is a horde!", 5, [["minion", 190, 190, 84, 1.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, -0.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 52.5, 30, [], [["ps", 810.0001]]]]], //23
["Goblins", "Three fast, unarmored melee attackers. Small, fast, green and mean!", 2, [["goblin", 167, 167, 99, 0, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, -0.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, 1.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //24
["Guards", "Three ruthless bone brothers with shields. Knock off their shields and all that's left are three ruthless bone brothers.", 3, [["guard", 199, 199, 90, 0, 0.5, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, -0.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, 1.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //25
["Bomber", "Small, lightly protected skeleton that throws bombs. Deals area damage that can wipe out a swarm of enemies.", 3, [["bomber", 398, 398, 271, 0.5, 0.5, 1.0, 4, 60, 5.0, 5.5, 0, 57, 6, -1, false, 0, 1.5, "ground", "ground", 1, 30, 30, [], []]]], //26
["Flying Machine", "The Master Builder has sent his first contraption to the Arena! It's a fast and fun flying machine, but fragile!", 4, [["flying machine", 510, 510, 142, 0.5, 0.5, 1.0, 3, 90, 6.0, 6.0, 0, 33, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []]]], //27
["Elixir Collector", "You gotta spend Elixir to make Elixir! This building makes 8 Elixir over its Lifetime. Does not appear in your starting hand.", 6, [["elixir collector", 888, 888, 0, 0.5, 0.5, 2, 0, 0, -1.0, -1.0, 0, 255, 255, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 2100], ["elixir", 255, 255]]]]], //28
["Bats", "Spawns a handful of tiny flying creatures. Think of them as sweet, purple... balls of DESTRUCTION!", 2, [["bat", 67, 67, 67, 0.5+sin(radians(36)), 0.5+cos(radians(36)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(108)), 0.5+cos(radians(108)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(180)), 0.5+cos(radians(180)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(252)), 0.5+cos(radians(252)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(324)), 0.5+cos(radians(324)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], []]]], //29
["Witch", "Summons Skeletons, shoots destructo beams, has glowing pink eyes that unfortunately don't shoot lasers.", 5, [["witch", 696, 696, 111, 0.5, 0.5, 1.0, 8, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 1, "ground", "all", 1, 30, 30, [], [["spawner", 105, 210, [["skeleton", 67, 67, 67, 2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, 2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, -2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, -2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []],]]]]]], //30
["Night Witch", "Summons Bats to do her bidding, even after death! If you get too close, she isn't afraid of pitching in with her mean-looking battle staff.", 4, [["night witch", 750, 750, 260, 0.5, 0.5, 1.0, 4, 60, 1.6, 5.5, 0, 45, 18, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["split", [["bat", 67, 67, 67, 0, -1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, -1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, 1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["spawner", 39, 210, [["bat", 67, 67, 67, 0, 1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, -1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["dspawn"]]]]], //31
["Goblin Hut", "Building that spawns Spear Goblins. But don't look inside. You don't want to see how they are made.", 5, [["goblin hut", 1293, 1293, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 135, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1500], ["spawner", 1, 135, [["spear goblin", 110, 110, 67, -0.5, 0, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 0, 0, [], []]]]]]]], //32
["Tombstone", "Troop building that periodically deploys Skeletons to fight the enemy... and when destroyed, spawns 3 Skeletons! Creepy.", 3, [["tombstone", 422, 422, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1200], ["split", [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, -0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, 0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []],]], ["spawner", 93, 93, [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //33
["Inferno Dragon", "Shoots a focused beam of fire that increases in damage over time. Wears a helmet because flying can be dangerous.", 4, [["inferno dragon", 1070, 1070, 30, 0.5, 0.5, 1.0, 5, 60, 3.5, 5.5, 0, 12, 36, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["inferno", 0, 60, 30, 70, 350]]]]], //34
["Inferno Tower", "Defensive building, roasts targets for damage that increases over time. Burns through even the biggest and toughest enemies!", 5, [["inferno tower", 1452, 1452, 35, 0.5, 0.5, 1.2, 0, 0, 6, 6, 0, 12, 60, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 900], ["inferno", 0, 60, 35, 132, 704]]]]], //35
["Prince", "Don't let the little pony fool you. Once the Prince gets a running start, you WILL be trampled. Deals double damage once he gets charging.", 5, [["prince", 1615, 1615, 325, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 42, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 325, 60, 651, 120]]]]], //36
["Battle Ram", "Two Barbarians holding a big log charge at the nearest building, dealing significant damage if they connect; then they go to town with their swords!", 4, [["battle ram", 756, 756, 220, 0.5, 0.5, 1.5, 6, 60, 0.5, 5.5, 0, 12, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 220, 60, 440, 120], ["kamikaze"], ["split", [["barbarian", 555, 555, 159, 0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []], ["barbarian", 555, 555, 159, -0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []]]], ["dsplit"]]]]], //37
["Barbarians", "A horde of melee attackers with mean mustaches and even meaner tempers.", 5, [["barbarian", 555, 555, 159, 0.5+sin(radians(54)), 0.5+cos(radians(54)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(126)), 0.5+cos(radians(126)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(198)), 0.5+cos(radians(198)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(270)), 0.5+cos(radians(270)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 43.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(342)), 0.5+cos(radians(342)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 48, 30, [], []]]], //38
["Electro Dragon", "Spits out bolts of electricity hitting up to three targets. Suffers from middle child syndrome to boot.", 5, [["electro dragon", 790, 790, 159, 0.5, 0.5, 1.2, 7, 60, 3.5, 5.5, 0, 63, 21, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["stun", 15], ["ps", 2000], ["chain", 2, 3.5, 159, []]]]]], //39
["Elite Barbarians", "Spawns a pair of leveled up Barbarians. They're like regular Barbarians, only harder, better, faster and stronger.", 6, [["elite barbarian", 970, 970, 301, 0.5, 1.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["elite barbarian", 970, 970, 301, 0.5, -0.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //40
["Archers", "A pair of lightly armored ranged attackers. They'll help you take down ground and air units, but you're on your own with hair coloring advice.", 3, [["archer", 252, 252, 89, 0.5, 1.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []], ["archer", 252, 252, 89, 0.5, -0.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []]]], //41
["Three Musketeers", "Trio of powerful, independent markswomen, fighting for justice and honor. Disrespecting them would not be just a mistake, it would be a cardinal sin!", 9, [["musketeer", 598, 598, 181, 0.5-0.7, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 60, 60, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(-30)), 0.5-0.7*cos(radians(-30)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 60, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(210)), 0.5-0.7*cos(radians(210)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 45, 60, []],]], //42
["Rascals", "Spawns a mischievous trio of Rascals! The boy takes the lead, while the girls pelt enemies from behind... with slingshots full of Double Trouble Gum!", 5, [["rascal boy", 1515, 1515, 110, -0.1, 0.5, 1.5, 10, 60, 0.8, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, -0.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 34.5, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, 1.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 39, 30, [], []]]], //43
["Fireball", "Annnnnd... Fireball. Incinerates a small area, dealing high damage. Reduced damage to Crown Towers.", 4, [["fireball", 0, 0, 572, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.8], ["spell"]]]]]], "spell"], //44 (GOT EEM!)
["Giant Snowball", "It’s HUGE! Once it began rolling down Frozen Peak, there was no stopping it. Enemies hit are knocked back and slowed down.", 2, [["snowball", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.5], ["slow", 75], ["spell"]]]]]], "spell"], //45
["Arrows", "Arrows pepper a large area, damaging all enemies hit. Reduced damage to Crown Towers.", 3, [["arrows", 0, 0, 101, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["spell", [["spell"]]], ["spell", [["spell"], ["wait", 6]]], ["spell", [["spell"], ["wait", 12]]], ["ps", 1600]]]], "spell"], //46
["Rocket", "Deals high damage to a small area. Looks really awesome doing it. Reduced damage to Crown Towers.", 6, [["rocket", 0, 0, 1232, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1], ["spell"]]], ["ps", 500]]]], "spell"], //47
["Zap", "Zaps enemies, briefly stunning them and dealing damage inside a small radius. Reduced damage to Crown Towers.", 2, [["zap", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"]]]]]], "spell"], //48
["Freeze", "Freezes and damages troops and buildings, making them unable to move or attack. Everybody chill.", 4, [["freeze", 0, 0, 95, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 120], ["spell"]]]]]], "spell"], //49
["Ice Golem", "He's tough, targets buildings and explodes when destroyed, slowing nearby enemies. Made entirely out of ice... or is he?! Yes.", 2, [["ice golem", 994, 994, 70, 0.5, 0.5, 1.4, 6, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["ddmg", 70, 2, [["slow", 30]]]]]]], //50
["Skeleton Barrel", "It's a Skeleton party in the sky, until all the balloons pop... then it's a Skeleton party on the ground!", 3, [["skeleton barrel", 636, 636, 0, 0.5, 0.5, 1.0, 7, 90, 0.4, 7.7, 0, 9, 3, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["kamikaze"], ["ddmg", 110, 2, [["knockback", 1], ["wait", 15]]], ["split", [["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+360/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-360/7, 1.2]]],]]]]]], //51
["Poison", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 4, [["poison", 0, 0, 75, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 30], ["spell"]]], ["instspell", [["wait", 60], ["spell"]]], ["instspell", [["wait", 90], ["spell"]]], ["instspell", [["wait", 120], ["spell"]]], ["instspell", [["wait", 150], ["spell"]]], ["instspell", [["wait", 180], ["spell"]]], ["instspell", [["wait", 210], ["spell"]]], ["instspell", [["wait", 240], ["spell"]]]]]], "spell"], //52
["Valkyrie", "Tough melee fighter, deals area damage around her. Swarm or horde, no problem! She can take them all out with a few spins.", 4, [["valkryie", 1654, 1654, 221, 0.5, 0.5, 1.0, 5, 60, 1.2, 5.5, 0, 45, 3, -1, false, 0, 1.7, "ground", "ground", 1, 30, 30, [], [["aoea", [["ground"]]]]]]], //53
["Wall Breakers", "A daring duo of dangerous dive bombers. Nothing warms a Wall Breaker's cold and undead heart like blowing up buildings.", 2, [["wall breaker", 275, 275, 325, 0.5, 1.25, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]], ["wall breaker", 275, 275, 325, 0.5, -0.25, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]]]], //54
["Royal Recruits", "Deploys a line of recruits armed with spears, shields and wooden buckets. They dream of ponies and one day wearing metal buckets.", 7, [["recruit", 199, 199, 101, 0.3, -0.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, -3.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, -6, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 1.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, 4.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 7, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]], "recruits"], //55
["Giant Skeleton", "The bigger the skeleton, the bigger the bomb. Carries a bomb that blows up when the Giant Skeleton dies.", 6, [["giant skeleton", 2793, 2793, 172, 0.5, 0.5, 2.0, 18, 60, 0.8, 5.0, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["split", [["bomb", 10000, 10000, 957, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 2.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 957, 2, [["knockback", 1]]], ["lifetime", 90]]]]]]]]], //56
["Balloon", "As pretty as they are, you won't want a parade of THESE balloons showing up on the horizon. Drops powerful bombs and when shot down, crashes dealing area damage.", 5, [["balloon", 1396, 1396, 798, 0.5, 0.5, 1.0, 6, 60, 0.1, 7.7, 0, 90, 6, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["split", [["bomb", 10000, 10000, 272, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 272, 3, []], ["lifetime", 90]]]]]]]]], //57
["Bomb Tower", "Defensive building that houses a Bomber. Deals area damage to anything dumb enough to stand near it.", 4, [["bomb tower", 1126, 1126, 168, 0.5, 0.5, 1.2, 0, 0, 6.0, 6.0, 0, 48, 15, -1, false, 0, 1.5, "building", "ground", 1, 30, 30, [], [["lifetime", 1050], ["split", [["bomb", 10000, 10000, 336, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 336, 2, []], ["lifetime", 90]]]]]]]]], //58
["Golem", "Slow but durable, only attacks buildings. When destroyed, explosively splits into two Golemites and deals area damage!", 8, [["golem", 4256, 4256, 259, 0.5, 0.5, 1.5, 20, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 90, [], [["ddmg", 259, 2, [["knockback", 1.8]]], ["resistance"], ["split", [["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, 0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]], ["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, -0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]]]], ["dsplit"]]]]], //59
["Heal", "Heal your troops to keep them in the fight! Friendly troops are healed over time while in the target area. Doesn't affect buildings.", 1, [["heal", 0, 0, -33, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 30], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 45], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 60], ["noCrown"], ["friendly"]]]]]], "spell"], //60
["Rage", "Increases troop movement and attack speed. Buildings attack faster and summon troops quicker, too. Chaaaarge!", 2, [["rage", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["rage", 60], ["time", 225], ["rage", 60], ["friendly"]]]]]], "spell"], //61
["Lumberjack", "He chops trees by day and hunts The Log by night. His bottle of Rage spills everywhere when he's defeated.", 4, [["lumberjack", 1060, 1060, 200, 0.5, 0.5, 1.0, 4, 120, 0.7, 5.5, 0, 24, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["ddmg", 0, 4, [["rage", 60], ["friendly"], ["time", 234], ["rage", 60], ["wait", 9]]]]]]], //62
["Goblin Barrel", "Spawns three Goblins anywhere in the Arena. It's going to be a thrilling ride, boys!", 3, [["barrel", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["spawn", [["goblin", 167, 167, 99, 0.4, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, 0.4, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, -0.5, 0, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ]], ["spell"]]], ["ps", 600]]]], "spell"], //63
["Electro Wizard", "He lands with a \"POW!\", stuns nearby enemies and shoots lightning with both hands! What a show off.", 4, [["ewiz", 590, 590, 96, 0.5, 0.5, 1.0, 5, 90, 5.0, 5.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["defender", 5], ["ps", 100000], ["sdmg", 159, 2.5, [["stun", 15]]]]]]], //64
["Princess", "This stunning Princess shoots flaming arrows from long range. If you're feeling warm feelings towards her, it's probably because you're on fire.", 3, [["princess", 216, 216, 140, 0.5, 0.5, 1.0, 3, 60, 9.0, 9.5, 0, 90, 15, -1, false, 0, 2.0, "ground", "all", 1, 30, 30, [], [["sptrgt"]]]]], //65
["Mortar", "Defensive building with a long range. Shoots big boulders that deal area damage, but cannot hit targets that get very close!", 4, [["mortar", 1221, 1221, 220, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 150, 30, -1, false, 0, 2.0, "building", "ground", 1, 30, 105, [], [["sptrgt", [["ground"]]], ["mrange", 3.5], ["lifetime", 900], ["ps", 630]]]]], //66
["Goblin Gang", "Spawns five Goblins - three with knives, two with spears - at a discounted Elixir cost. It's like a Goblin Value Pack!", 3, [["spear goblin", 110, 110, 67, 1.4, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 43.5, 30, []], ["spear goblin", 110, 110, 67, 1.4, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 48, 30, []], ["goblin", 167, 167, 99, -0.6, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["goblin", 167, 167, 99, -0.3, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, -0.3, 1.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []]]], //67
["Lava Hound", "The Lava Hound is a majestic flying beast that attacks buildings. The Lava Pups are less majestic angry babies that attack anything.", 7, [["lava hound", 3150, 3150, 45, 0.5, 0.5, 1.5, 5, 45, 2.0, 5.5, 0, 39, 9, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 0, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 60, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 120, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 180, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 240, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 300, 2.5]], []],]]]]]], //68
["Magic Archer", "Not quite a Wizard, nor an Archer - he shoots a magic arrow that passes through and damages all enemies in its path. It's not a trick, it's magic!", 4, [["magic archer", 490, 490, 111, 0.5, 0.5, 1.2, 3, 60, 7.0, 7.5, 0, 33, 15, -1, false, 0, 0.25, "ground", "all", 1, 30, 30, [], [["sptrgt", [["pass", 0, 11.6, []]]], ["ps", 1200]]]]], //69
["Bowler", "This big blue dude digs the simple things in life - Dark Elixir drinks and throwing rocks. His massive boulders roll through their target, hitting everything behind for a strike!", 5, [["bowler", 1596, 1596, 239, 0.5, 0.5, 1.5, 18, 45, 5.0, 5.5, 0, 75, 15, -1, false, 0, 0.9, "ground", "ground", 1, 30, 30, [], [["resistance"], ["sprnge", 0.8, 4.95, [["knockback", 1], ["pass", 0, 5, []], ["ground"]]], ["ps", 600]]]]], //70
["Hunter", "He deals BIG damage up close - not so much at range. What he lacks in accuracy, he makes up for with his impressively bushy eyebrows.", 4, [["hunter", 696, 696, 70, 0.5, 0.5, 1.2, 5, 60, 4.0, 5.5, 0, 66, 21, -1, false, 0, 0.07, "ground", "all", 1, 30, 30, [], [["shotgun", 10, 9], ["sptrgt", [["killOnHit"], ["pass", 0, 4, []]]],]]]], //71
["Graveyard", "Surprise! It's a party. A Skeleton party, anywhere in the Arena. Yay!", 5, [["graveyard", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 0, [], [["instspell", [["time", 315], ["graveyard", 90, 15, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], ["friendly"]]]]]], "spell"], //72
["Executioner", "He throws his axe like a boomerang, striking all enemies on the way out AND back. It's a miracle he doesn't lose an arm.", 5, [["executioner", 1010, 1010, 140, 0.5, 0.5, 1.2, 4, 60, 4.5, 5.5, 0, 21, 30, -1, false, 0, 1, "ground", "all", 1, 30, 30, [], [["sprnge", 0.6, 5.9, [["tmr", 0, 21, []]], [["tmr", 0, 30, []]]], ["hitp", 0, 51]]]]], //73
["Barbarian Hut", "Troop building that periodically deploys Barbarians to fight the enemy. Time to make the Barbarians", 7, [["hut", 1804, 1804, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1800], ["spawner", 1, 405, [["barbarian", 555, 555, 159, -0.7, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []], ["barbarian", 555, 555, 159, -0.6, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 9, 0, [], []]]]]]]], //74
["Furnace", "The Furnace spawns two Fire Spirits at a time. It also makes great brick-oven pancakes.", 4, [["furnace", 1003, 1003, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1501], ["spawner", 1, 300, [["fire spirit", 91, 91, 178, -0.7, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 0, 0, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, -0.6, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 9, 0, [], [["kamikaze"]]], ]]]]]], //75
["Hog Rider", "Fast melee troop that targets buildings and can jump over the river. He followed the echoing call of \"Hog Riderrrrr\" all the way through the Arena doors.", 4, [["hog", 1408, 1408, 264, 0.5, 0.5, 1.2, 4, 120, 0.8, 9.5, 0, 48, 18, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //76
["Royal Hogs", "The King’s personal pets are loose! They love to chomp on apples and towers alike - who let the hogs out?!", 5, [["hoggie", 695, 695, 56, 0.5, -1.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, -0.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, 1.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, 2.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //77
["Royal Ghost", "He drifts invisibly through the Arena until he's startled by an enemy... then he attacks! Then he's invisible again! Zzzz.", 3, [["ghost", 1000, 1000, 216, 0.5, 0.5, 1.2, 3, 90, 1.2, 5.5, 0, 54, 18, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["invis", 0, 48, 12, 12]]]]], //78
["Tornado", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 3, [["nado", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["time", 60], ["nado", 20]]]]], ["nado", 0, 0, 35, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"]]], ["instspell", [["wait", 30], ["noCrown"]]], ["instspell", [["wait", 45], ["noCrown"]]], ["instspell", [["wait", 60], ["noCrown"]]]]]], "spell"], //79
["Lightning", "Bolts of lightning damage and stun up to three enemy troops or buildings with the most hitpoints in the target area. Reduced damage to Crown Towers.", 6, [["lightning", 0, 0, 877, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"], ["tmr", 45], ["hit", 0, 3, 15, 15, []], ["stun", 15]]]]]], "spell"], //80
["Earthquake", "Deals Damage per second to Troops and Crown Towers. Deals huge Building Damage! Does not affect flying units (it is an EARTHquake, after all).", 3, [["earthquake", 0, 0, 61, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["noBuildings"], ["wait", 15], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 30], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 45], ["ground"]]]]], ["earthquake", 0, 0, 244, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 15]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 30]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 45]]]]]], "spell"], //81
["The Log", "A spilt bottle of Rage turned an innocent tree trunk into \"The Log\". Now, it seeks revenge by crushing anything in its path!", 2, [["log", 0, 0, 240, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 13.1, []], ["rect", 3.9, 1.2], ["sudoKnockback", 1], ["forward", 13.1], ["ground"], ["spell"]]], ["ps", 300]]]]], //82
["Barbarian Barrel", "It rolls over and damages anything in its path, then breaks open and out pops a Barbarian! How did he get inside?!", 2, [["barb", 0, 0, 0, -4.75, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["spawn", [["barbarian", 555, 555, 159, 0, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 4, [], []]]], ["wait", 36]]]]], ["barrel", 0, 0, 200, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 5.5, []], ["rect", 2.6, 1.2], ["forward", 5.5], ["ground"], ["spell"]]], ["ps", 300]]]]], //83
["Skeleton Army", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 3, [["skeleton", 67, 67, 67, -1.25, -1.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.3, -0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, -0.9, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, -2.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.1, -1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.4, -0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.8, 0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.5, 0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.65, 1.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.6, 2.2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.2, 0.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.35, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //84
["Tesla", "Defensive building. Whenever it's not zapping the enemy, the power of Electrickery is best kept grounded.", 4, [["tesla", 954, 954, 190, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 33, 15, -1, false, 0, 0, "building", "all", 1, 30, 30, [], [["hiding", -30, 15, 0, 12], ["lifetime", 1050], ["ps", 990]]]]], //85
["Goblin Giant", "This jolly green Goblin Giant stomps towards enemy buildings. He carries two Spear Goblins everywhere he goes. It's a weird but functional arrangement.", 6, [["goblin giant", 2616, 2616, 146, 0.5, 0.5, 1.5, 18, 60, 1.2, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["link", false, [["    ", 110, 110, 67, 0, -0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []], ["    ", 110, 110, 67, 0, 0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []]]], ["split", [["spear goblin", 110, 110, 67, 0, -0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []], ["spear goblin", 110, 110, 67, 0, 0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []]]], ["dsplit"]]]]], //86
["Ram Rider", "Together they charge through the Arena; snaring enemies, knocking down towers ... and chewing grass!?", 5, [["ram", 1461, 1461, 220, 0.5, 0.5, 1.2, 4, 60, 0.8, 7.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"], ["charge", 0, 3.5, 220, 60, 440, 120], ["resistance"], ["link", false, [["rider", 490, 490, 86, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 33, 12, -1, false, 0, 0, "link", "troops", 1, 0, 30, [], [["snare", 60], ["retarget"], ["deprioritize", "snare"]]]]]]]]], //87
["Battle Healer", "With each attack, she unleashes a powerful healing aura that restores Hitpoints to herself and friendly Troops. When she isn't attacking, she passively heals herself!", 4, [["healer", 1584, 1584, 123, 0.5, 0.5, 1.0, 6, 60, 1.6, 5.5, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["regen", 15, 15, 13], ["atkSpawn", [["heal", 0, 0, -21, 0, 0, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 0, 10, [], [["instspell", [["wait", 6, 6], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 12, 12], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 18, 18], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 24, 24], ["noCrown"], ["friendly"]]]]]]]]]]], //88
["Dark Prince", "The Dark Prince deals area damage and lets his spiked club do the talking for him - because when he does talk, it sounds like he has a bucket on his head.", 4, [["dark prince", 199, 199, 206, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 30, 30, [], [["split", [["dark prince", 1030, 1030, 206, 0, 0, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 0, 0, [], [["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], ["noTargetChange"], ["retainTarget"], ["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], //89
["Bandit", "The Bandit dashes to her target and delivers an extra big hit! While dashing, she can't be touched. The mask keeps her identity safe... and gives her bonus cool points!", 3, [["bandit", 750, 750, 160, 0.5, 0.5, 1.2, 3, 90, 0.8, 6.0, 0, 30, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["dash", 3.5, 6, 160, 90, 320, 500, 0, 24, -1]]]]], //90
["Mega Knight", "He lands with the force of 1,000 mustaches, then jumps from one foe to the next dealing huge area damage. Stand aside!", 7, [["mega knight", 3300, 3300, 222, 0.5, 0.5, 1.5, 18, 60, 1.2, 5.5, 0, 51, 15, -1, false, 0, 1.3, "ground", "ground", 1, 30, 30, [], [["jump", 3.5, 5, 222, 90, 444, 250, 0, 33, -1, 2.2, [["knockback", 1]]], ["resistance"], ["ps", 1400], ["sdmg", 444, 2.2, [["knockback", 1], ["wait", 15]]]]]]], //91
["Miner", "The Miner can burrow his way underground and appear anywhere in the Arena. It's not magic, it's a shovel.", 3, [["miner", 100000, 100000, 0, 0.5, 0.5, 1.0, 6, 650, 1.2, 5.5, 0, 36, 21, -1, false, 0, 0.0, "uground", "none", 1, 30, 0, [], [["resistance"], ["mining", 0, 0, false, [["miner", 1000, 1000, 160, 0, 0, 1.0, 6, 90, 1.2, 5.5, 0, 36, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], [["ctreduc", 0.4]]]]]]]], "spell"], //92 
["Fisherman", "His Ranged Attack can pull enemies towards him, and pull himself to enemy buildings. He's also mastered the ancient art of 'Fish Slapping'.", 3, [["fisherman", 800, 800, 160, 0.5, 0.5, 1.0, 10, 60, 1.2, 7.5, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["pull", 3.5, 6, 0, 33, -1, false], ["resistance"]]]]], //93
["Mirror", "Mirrors your last card played for +1 Elixir. Will not appear in your starting cards.", 0, []], //94
["Clone", "Duplicates all friendly troops in the target area. Cloned troops are fragile, but pack the same punch as the original! Doesn't affect buildings.", 3, [["clone", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["clone"], ["noCrown"], ["friendly"]]]]]], "spell"], //95
];
};
}
if(version === "legacy-1119"){
    var cardsInit = function(){
    cards = [
["Spear Goblins", "Three unarmored ranged attackers. Who the heck taught these guys to throw spears!?! Who thought that was a good idea?!", 2, [["spear goblin", 110, 110, 67, 0, 0.5, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //0
["Dart Goblin", "Runs fast, shoots far and chews gum. How does he blow darts with a mouth full of Double Trouble gum? Years of didgeridoo lessons.", 3, [["dart goblin", 216, 216, 100, 0.5, 0.5, 1, 3, 120, 12, 6.5, 0, 21, 10.5, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //1
["Elixir Golem", "Splits into two Elixir Golemites when destroyed, which split into two sentient Blobs when defeated. A Blob gives your opponent 1 Elixir when destroyed!", 3, [["elixir golem", 1267, 1267, 212, 0.5, 0.5, 1.2, 15, 45, 0.75, 7, 0, 60, 30, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["elixir golemite", 633, 633, 106, 0, 0.5, 1, 10, 60, 0.75, 7, 0, 45, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 316, 316, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 30, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 316, 316, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 30, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]], ["elixir golemite", 633, 633, 106, 0, -0.5, 1, 10, 60, 0.75, 7, 0, 45, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 316, 316, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 30, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 316, 316, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 30, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]]]], ["dsplit"]]]]], //Again, all one troop. //2
["X-Bow", "Nice tower you got there. Would be a shame if this X-Bow whittled it down from this side of the Arena...", 6, [["xbow", 1383, 1383, 26, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 7.5, 7.5, -1, false, 0, 0, "building", "ground", 1, 30, 105, [], [["lifetime", 1200], ["ps", 1600]]]]], //3
["Knight", "A tough melee fighter. The Barbarian's handsome, cultured cousin. Rumor has it that he was knighted based on the sheer awesomeness of his mustache alone.", 3, [["knight", 1382, 1382, 167, 0.5, 0.5, 1, 6, 60, 1.2, 5.5, 0, 33, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //4
["Giant", "Slow but durable, only attacks buildings. A real one-man wrecking crew!", 5, [["giant", 3275, 3275, 211, 0.5, 0.5, 1.5, 18, 45, 1.2, 7.5, 0, 45, 15, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]],]], //5
["Musketeer", "Don't be fooled by her delicately coiffed hair, the Musketeer is a mean shot with her trusty boomstick.", 4, [["musketeer", 598, 598, 181, 0.5, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []],]], //6
["Skeletons", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 1, [["skeleton", 67, 67, 67, 0, 0.5, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, -0.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, 1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //7
["Cannon", "Defensive building. Shoots cannonballs with deadly effect, but cannot target flying troops.", 3, [["cannon", 742, 742, 167, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0, "building", "ground", 1, 30, 30, [], [["lifetime", 900], ["ps", 900]]]]], //8
["Wizard", "The most awesome man to ever set foot in the arena, the Wizard will blow you away with his handsomeness... and/or fireballs.", 5, [["wizard", 598, 598, 234, 0.5, 0.5, 1, 5, 60, 5.5, 5.5, 0, 42, 12, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, []],]], //9
["Fire Spirits", "These three Fire Spirits are on a kamikaze mission to give you a warm hug. It'd be adorable if they weren't on fire.", 2, [["fire spirit", 91, 91, 178, 0, 0.5, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, -0.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, 1.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]],]], //10
["Ice Spirit", "Spawns one lively little Ice Spirit to freeze a group of enemies. Stay frosty.", 1, [["ice spirit", 190, 190, 91, 0.5, 0.5, 0.8, 1, 120, 2.5, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"], ["stun", 30]]],]], //11
["Zappies", "Spawns a pack of miniature Zap machines. Who controls them...? Only the Master Builder knows.", 4, [["zappy", 440, 440, 70, -0.2, 0.5, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 70, 0.8, -0.2, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 70, 0.8, 1.2, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]]]], //12 (mass unknown)
["P.E.K.K.A.", "A heavily armored, slow melee fighter. Swings from the hip but packs a huge punch.", 7, [["pekka", 3125, 3125, 678, 0.5, 0.5, 1.5, 18, 45, 1.2, 5.0, 0, 54, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, [], [["resistance"]]],]], //13
["Sparky", "Sparky slowly charges up, then unloads MASSIVE area damage. Overkill isn't in her vocabulary.", 6, [["sparky", 1200, 1200, 1100, 0.5, 0.5, 2, 18, 45, 5.5, 5.5, 120, 120, 15, -1, false, 0, 1.8, "ground", "ground", 1, 30, 30, [], [["resistance"], ["weak-stun"], ["recoil", 0.75]]],]], //14
["Mini P.E.K.K.A.", "The Arena is a certified butterfly-free zone. No distractions for P.E.K.K.A, only destruction.", 4, [["mini pekka", 1129, 1129, 598, 0.5, 0.5, 0.9, 4, 90, 1.2, 5.5, 0, 54, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //15 (First generated one!)
["Ice Wizard", "This chill caster throws ice shards that slow down enemies' movement and attack speed. Despite being freezing cold, he has a handlebar mustache that's too hot for TV.", 3, [["ice wizard", 590, 590, 75, 0.5, 0.5, 1.0, 5, 60, 5.5, 5.5, 0, 51, 15, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["slow", 75]]]]], //16
["Goblin Cage", "When the Goblin Cage is destroyed, a Goblin Brawler is unleashed into the Arena! Goblin Brawler always skips leg day.", 4, [["cage", 800, 800, 0, 0.5, 0.5, 2, 0, 0, 0.0, 0.0, 0, 27000, 27000, -1, false, 0, 0.0, "building", "ground", 1, 30, 30, [], [["lifetime", 600], ["split", [["brawler", 853, 853, 264, 0, 0, 1.0, 2, 90, 0.8, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 5, 15, [], []]]]]]]], //17
["Cannon Cart", "A Cannon on wheels?! Bet they won't see that coming! Once you break its shield, it becomes a Cannon not on wheels.", 5, [["cannon cart", 742, 742, 168, 0.5, 0.5, 1.2, 3, 90, 5.5, 6, 0, 30, 18, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["resistance"], ["split", [["cannon cart", 742, 742, 168, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0.0, "building", "ground", 1, 2, 3, [], [["lifetime", 900]]]]]]]]], //18
["Mega Minion", "Flying, armored and powerful. What could be its weakness?! Cupcakes.", 3, [["mega minion", 695, 695, 258, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 48, 12, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]]]], //19
["Baby Dragon", "Burps fireballs from the sky that deal area damage. Baby dragons hatch cute, hungry and ready for a barbeque.", 4, [["baby dragon", 1024, 1024, 133, 0.5, 0.5, 1.0, 5, 90, 3.5, 5.5, 0, 45, 9, -1, false, 0, 1.2, "air", "all", 1, 30, 30, [], []]]], //20
["Royal Giant", "Destroying enemy buildings with his massive cannon is his job; making a raggedy blond beard look good is his passion.", 6, [["royal giant", 2544, 2544, 254, 0.5, 0.5, 1.5, 18, 45, 5.0, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]]]], //21
["Minions", "Three fast, unarmored flying attackers. Roses are red, minions are blue, they can fly, and will crush you!", 3, [["minion", 190, 190, 84, 0, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, -0.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, 1.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]]]], //22
["Minion Horde", "Six fast, unarmored flying attackers. Three's a crowd, six is a horde!", 5, [["minion", 190, 190, 84, 1.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, -0.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 52.5, 30, [], [["ps", 810.0001]]]]], //23
["Goblins", "Three fast, unarmored melee attackers. Small, fast, green and mean!", 2, [["goblin", 167, 167, 99, 0, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, -0.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, 1.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //24
["Guards", "Three ruthless bone brothers with shields. Knock off their shields and all that's left are three ruthless bone brothers.", 3, [["guard", 199, 199, 90, 0, 0.5, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, -0.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, 1.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //25
["Bomber", "Small, lightly protected skeleton that throws bombs. Deals area damage that can wipe out a swarm of enemies.", 3, [["bomber", 398, 398, 271, 0.5, 0.5, 1.0, 4, 60, 5.0, 5.5, 0, 57, 6, -1, false, 0, 1.5, "ground", "ground", 1, 30, 30, [], []]]], //26
["Flying Machine", "The Master Builder has sent his first contraption to the Arena! It's a fast and fun flying machine, but fragile!", 4, [["flying machine", 510, 510, 142, 0.5, 0.5, 1.0, 3, 90, 6.0, 6.0, 0, 33, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []]]], //27
["Elixir Collector", "You gotta spend Elixir to make Elixir! This building makes 8 Elixir over its Lifetime. Does not appear in your starting hand.", 6, [["elixir collector", 888, 888, 0, 0.5, 0.5, 2, 0, 0, -1.0, -1.0, 0, 255, 255, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 2100], ["elixir", 255, 255]]]]], //28
["Bats", "Spawns a handful of tiny flying creatures. Think of them as sweet, purple... balls of DESTRUCTION!", 2, [["bat", 67, 67, 67, 0.5+sin(radians(36)), 0.5+cos(radians(36)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(108)), 0.5+cos(radians(108)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(180)), 0.5+cos(radians(180)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(252)), 0.5+cos(radians(252)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(324)), 0.5+cos(radians(324)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], []]]], //29
["Witch", "Summons Skeletons, shoots destructo beams, has glowing pink eyes that unfortunately don't shoot lasers.", 5, [["witch", 696, 696, 220, 0.5, 0.5, 1.0, 8, 60, 5.0, 5.5, 0, 51, 30, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["spawner", 105, 210, [["skeleton", 67, 67, 67, 2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, 2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, -2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, -2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []],]]]]]], //30
["Night Witch", "Summons Bats to do her bidding, even after death! If you get too close, she isn't afraid of pitching in with her mean-looking battle staff.", 4, [["night witch", 750, 750, 260, 0.5, 0.5, 1.0, 4, 60, 1.6, 5.5, 0, 45, 18, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["split", [["bat", 67, 67, 67, 0, -1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, -1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, 1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["spawner", 39, 210, [["bat", 67, 67, 67, 0, 1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, -1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["dspawn"]]]]], //31
["Goblin Hut", "Building that spawns Spear Goblins. But don't look inside. You don't want to see how they are made.", 5, [["goblin hut", 1293, 1293, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 135, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1500], ["spawner", 1, 135, [["spear goblin", 110, 110, 67, -0.5, 0, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 0, 0, [], []]]]]]]], //32
["Tombstone", "Troop building that periodically deploys Skeletons to fight the enemy... and when destroyed, spawns 3 Skeletons! Creepy.", 3, [["tombstone", 422, 422, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1200], ["split", [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, -0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, 0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []],]], ["spawner", 93, 93, [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //33
["Inferno Dragon", "Shoots a focused beam of fire that increases in damage over time. Wears a helmet because flying can be dangerous.", 4, [["inferno dragon", 1070, 1070, 30, 0.5, 0.5, 1.0, 5, 60, 3.5, 5.5, 0, 12, 36, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["inferno", 0, 60, 30, 70, 350]]]]], //34
["Inferno Tower", "Defensive building, roasts targets for damage that increases over time. Burns through even the biggest and toughest enemies!", 5, [["inferno tower", 1452, 1452, 35, 0.5, 0.5, 1.2, 0, 0, 6, 6, 0, 12, 60, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 900], ["inferno", 0, 60, 35, 132, 704]]]]], //35
["Prince", "Don't let the little pony fool you. Once the Prince gets a running start, you WILL be trampled. Deals double damage once he gets charging.", 5, [["prince", 1615, 1615, 325, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 42, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 325, 60, 651, 120]]]]], //36
["Battle Ram", "Two Barbarians holding a big log charge at the nearest building, dealing significant damage if they connect; then they go to town with their swords!", 4, [["battle ram", 756, 756, 220, 0.5, 0.5, 1.5, 6, 60, 0.5, 5.5, 0, 12, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 220, 60, 440, 120], ["kamikaze"], ["split", [["barbarian", 555, 555, 159, 0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []], ["barbarian", 555, 555, 159, -0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []]]], ["dsplit"]]]]], //37
["Barbarians", "A horde of melee attackers with mean mustaches and even meaner tempers.", 5, [["barbarian", 555, 555, 159, 0.5+sin(radians(54)), 0.5+cos(radians(54)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(126)), 0.5+cos(radians(126)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(198)), 0.5+cos(radians(198)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(270)), 0.5+cos(radians(270)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 43.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(342)), 0.5+cos(radians(342)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 48, 30, [], []]]], //38
["Electro Dragon", "Spits out bolts of electricity hitting up to three targets. Suffers from middle child syndrome to boot.", 5, [["electro dragon", 790, 790, 159, 0.5, 0.5, 1.2, 7, 60, 3.5, 5.5, 0, 63, 21, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["stun", 15], ["ps", 2000], ["chain", 2, 3.5, 159, []]]]]], //39
["Elite Barbarians", "Spawns a pair of leveled up Barbarians. They're like regular Barbarians, only harder, better, faster and stronger.", 6, [["elite barbarian", 970, 970, 301, 0.5, 1.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["elite barbarian", 970, 970, 301, 0.5, -0.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //40
["Archers", "A pair of lightly armored ranged attackers. They'll help you take down ground and air units, but you're on your own with hair coloring advice.", 3, [["archer", 252, 252, 89, 0.5, 1.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []], ["archer", 252, 252, 89, 0.5, -0.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []]]], //41
["Three Musketeers", "Trio of powerful, independent markswomen, fighting for justice and honor. Disrespecting them would not be just a mistake, it would be a cardinal sin!", 9, [["musketeer", 598, 598, 181, 0.5-0.7, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 39, 90, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(-30)), 0.5-0.7*cos(radians(-30)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 90, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(210)), 0.5-0.7*cos(radians(210)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 34.5, 90, []],]], //42
["Rascals", "Spawns a mischievous trio of Rascals! The boy takes the lead, while the girls pelt enemies from behind... with slingshots full of Double Trouble Gum!", 5, [["rascal boy", 1515, 1515, 110, -0.1, 0.5, 1.5, 10, 60, 0.8, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, -0.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 34.5, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, 1.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 39, 30, [], []]]], //43
["Fireball", "Annnnnd... Fireball. Incinerates a small area, dealing high damage. Reduced damage to Crown Towers.", 4, [["fireball", 0, 0, 572, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.8], ["spell"]]]]]], "spell"], //44 (GOT EEM!)
["Giant Snowball", "It’s HUGE! Once it began rolling down Frozen Peak, there was no stopping it. Enemies hit are knocked back and slowed down.", 2, [["snowball", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.5], ["slow", 75], ["spell"]]]]]], "spell"], //45
["Arrows", "Arrows pepper a large area, damaging all enemies hit. Reduced damage to Crown Towers.", 3, [["arrows", 0, 0, 243, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["spell", [["spell"]]], ["ps", 1600]]]], "spell"], //46
["Rocket", "Deals high damage to a small area. Looks really awesome doing it. Reduced damage to Crown Towers.", 6, [["rocket", 0, 0, 1232, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1], ["spell"]]], ["ps", 500]]]], "spell"], //47
["Zap", "Zaps enemies, briefly stunning them and dealing damage inside a small radius. Reduced damage to Crown Towers.", 2, [["zap", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"]]]]]], "spell"], //48
["Freeze", "Freezes and damages troops and buildings, making them unable to move or attack. Everybody chill.", 4, [["freeze", 0, 0, 95, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 120], ["spell"]]]]]], "spell"], //49
["Ice Golem", "He's tough, targets buildings and explodes when destroyed, slowing nearby enemies. Made entirely out of ice... or is he?! Yes.", 2, [["ice golem", 994, 994, 70, 0.5, 0.5, 1.4, 6, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["ddmg", 70, 2, [["slow", 30]]]]]]], //50
["Skeleton Barrel", "It's a Skeleton party in the sky, until all the balloons pop... then it's a Skeleton party on the ground!", 3, [["skeleton barrel", 636, 636, 0, 0.5, 0.5, 1.0, 7, 90, 0.4, 7.7, 0, 9, 3, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["kamikaze"], ["ddmg", 110, 2, [["knockback", 1], ["wait", 15]]], ["split", [["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+360/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-360/7, 1.2]]],]]]]]], //51
["Poison", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 4, [["poison", 0, 0, 75, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 30], ["spell"]]], ["instspell", [["wait", 60], ["spell"]]], ["instspell", [["wait", 90], ["spell"]]], ["instspell", [["wait", 120], ["spell"]]], ["instspell", [["wait", 150], ["spell"]]], ["instspell", [["wait", 180], ["spell"]]], ["instspell", [["wait", 210], ["spell"]]], ["instspell", [["wait", 240], ["spell"]]]]]], "spell"], //52
["Valkyrie", "Tough melee fighter, deals area damage around her. Swarm or horde, no problem! She can take them all out with a few spins.", 4, [["valkryie", 1654, 1654, 221, 0.5, 0.5, 1.0, 5, 60, 1.2, 5.5, 0, 45, 3, -1, false, 0, 1.7, "ground", "ground", 1, 30, 30, [], [["aoea", [["ground"]]]]]]], //53
["Wall Breakers", "A daring duo of dangerous dive bombers. Nothing warms a Wall Breaker's cold and undead heart like blowing up buildings.", 2, [["wall breaker", 275, 275, 325, 0.5, 1.25, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]], ["wall breaker", 275, 275, 325, 0.5, -0.25, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]]]], //54
["Royal Recruits", "Deploys a line of recruits armed with spears, shields and wooden buckets. They dream of ponies and one day wearing metal buckets.", 7, [["recruit", 199, 199, 101, 0.3, -0.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, -3.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, -6, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 1.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, 4.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 7, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]], "recruits"], //55
["Giant Skeleton", "The bigger the skeleton, the bigger the bomb. Carries a bomb that blows up when the Giant Skeleton dies.", 6, [["giant skeleton", 2793, 2793, 172, 0.5, 0.5, 2.0, 18, 60, 0.8, 5.0, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["split", [["bomb", 10000, 10000, 957, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 2.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 957, 2, [["knockback", 1]]], ["lifetime", 90]]]]]]]]], //56
["Balloon", "As pretty as they are, you won't want a parade of THESE balloons showing up on the horizon. Drops powerful bombs and when shot down, crashes dealing area damage.", 5, [["balloon", 1396, 1396, 798, 0.5, 0.5, 1.0, 6, 60, 0.1, 7.7, 0, 90, 6, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["split", [["bomb", 10000, 10000, 272, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 272, 3, []], ["lifetime", 90]]]]]]]]], //57
["Bomb Tower", "Defensive building that houses a Bomber. Deals area damage to anything dumb enough to stand near it.", 4, [["bomb tower", 1126, 1126, 168, 0.5, 0.5, 1.2, 0, 0, 6.0, 6.0, 0, 48, 15, -1, false, 0, 1.5, "building", "ground", 1, 30, 30, [], [["lifetime", 1050], ["split", [["bomb", 10000, 10000, 336, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 336, 2, []], ["lifetime", 90]]]]]]]]], //58
["Golem", "Slow but durable, only attacks buildings. When destroyed, explosively splits into two Golemites and deals area damage!", 8, [["golem", 4256, 4256, 259, 0.5, 0.5, 1.5, 20, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 90, [], [["ddmg", 259, 2, [["knockback", 1.8]]], ["resistance"], ["split", [["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, 0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]], ["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, -0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]]]], ["dsplit"]]]]], //59
["Heal", "Heal your troops to keep them in the fight! Friendly troops are healed over time while in the target area. Doesn't affect buildings.", 1, [["heal", 0, 0, -33, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 30], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 45], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 60], ["noCrown"], ["friendly"]]]]]], "spell"], //60
["Rage", "Increases troop movement and attack speed. Buildings attack faster and summon troops quicker, too. Chaaaarge!", 2, [["rage", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["rage", 60], ["time", 225], ["rage", 60], ["friendly"]]]]]], "spell"], //61
["Lumberjack", "He chops trees by day and hunts The Log by night. His bottle of Rage spills everywhere when he's defeated.", 4, [["lumberjack", 1060, 1060, 200, 0.5, 0.5, 1.0, 4, 120, 0.7, 5.5, 0, 24, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["ddmg", 0, 4, [["rage", 60], ["friendly"], ["time", 234], ["rage", 60], ["wait", 9]]]]]]], //62
["Goblin Barrel", "Spawns three Goblins anywhere in the Arena. It's going to be a thrilling ride, boys!", 3, [["barrel", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["spawn", [["goblin", 167, 167, 99, 0.4, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, 0.4, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, -0.5, 0, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ]], ["spell"]]], ["ps", 600]]]], "spell"], //63
["Electro Wizard", "He lands with a \"POW!\", stuns nearby enemies and shoots lightning with both hands! What a show off.", 4, [["ewiz", 590, 590, 96, 0.5, 0.5, 1.0, 5, 90, 5.0, 5.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["defender", 5], ["ps", 100000], ["sdmg", 159, 2.5, [["stun", 15]]]]]]], //64
["Princess", "This stunning Princess shoots flaming arrows from long range. If you're feeling warm feelings towards her, it's probably because you're on fire.", 3, [["princess", 216, 216, 140, 0.5, 0.5, 1.0, 3, 60, 9.0, 9.5, 0, 90, 15, -1, false, 0, 2.0, "ground", "all", 1, 30, 30, [], [["sptrgt"]]]]], //65
["Mortar", "Defensive building with a long range. Shoots big boulders that deal area damage, but cannot hit targets that get very close!", 4, [["mortar", 1221, 1221, 220, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 150, 30, -1, false, 0, 2.0, "building", "ground", 1, 30, 105, [], [["sptrgt", [["ground"]]], ["mrange", 3.5], ["lifetime", 900], ["ps", 630]]]]], //66
["Goblin Gang", "Spawns five Goblins - three with knives, two with spears - at a discounted Elixir cost. It's like a Goblin Value Pack!", 3, [["spear goblin", 110, 110, 67, 1.4, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 43.5, 30, []], ["spear goblin", 110, 110, 67, 1.4, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 48, 30, []], ["goblin", 167, 167, 99, -0.6, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["goblin", 167, 167, 99, -0.3, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, -0.3, 1.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []]]], //67
["Lava Hound", "The Lava Hound is a majestic flying beast that attacks buildings. The Lava Pups are less majestic angry babies that attack anything.", 7, [["lava hound", 3150, 3150, 45, 0.5, 0.5, 1.5, 5, 45, 2.0, 5.5, 0, 39, 9, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 0, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 60, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 120, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 180, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 240, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 300, 2.5]], []],]]]]]], //68
["Magic Archer", "Not quite a Wizard, nor an Archer - he shoots a magic arrow that passes through and damages all enemies in its path. It's not a trick, it's magic!", 4, [["magic archer", 490, 490, 111, 0.5, 0.5, 1.2, 3, 60, 7.0, 7.5, 0, 33, 15, -1, false, 0, 0.25, "ground", "all", 1, 30, 30, [], [["sptrgt", [["pass", 0, 11.6, []]]], ["ps", 1200]]]]], //69
["Bowler", "This big blue dude digs the simple things in life - Dark Elixir drinks and throwing rocks. His massive boulders roll through their target, hitting everything behind for a strike!", 5, [["bowler", 1596, 1596, 239, 0.5, 0.5, 1.5, 18, 45, 5.0, 5.5, 0, 75, 15, -1, false, 0, 0.9, "ground", "ground", 1, 30, 30, [], [["resistance"], ["sprnge", 0.8, 4.95, [["knockback", 1], ["pass", 0, 5, []], ["ground"]]], ["ps", 600]]]]], //70
["Hunter", "He deals BIG damage up close - not so much at range. What he lacks in accuracy, he makes up for with his impressively bushy eyebrows.", 4, [["hunter", 696, 696, 70, 0.5, 0.5, 1.2, 5, 60, 4.0, 5.5, 0, 66, 21, -1, false, 0, 0.07, "ground", "all", 1, 30, 30, [], [["shotgun", 10, 9], ["sptrgt", [["killOnHit"], ["pass", 0, 4, []]]],]]]], //71
["Graveyard", "Surprise! It's a party. A Skeleton party, anywhere in the Arena. Yay!", 5, [["graveyard", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 0, [], [["instspell", [["time", 315], ["graveyard", 90, 15, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], ["friendly"]]]]]], "spell"], //72
["Executioner", "He throws his axe like a boomerang, striking all enemies on the way out AND back. It's a miracle he doesn't lose an arm.", 5, [["executioner", 960, 960, 259, 0.5, 0.5, 1.2, 4, 60, 4.0, 5.5, 0, 21, 30, -1, false, 0, 0.8, "ground", "all", 1, 30, 30, [], [["sprnge", 0.6, 4.4, [["tmr", 0, 21, []]], [["tmr", 0, 33, []]]], ["hitp", 0, 54]]]]], //73
["Barbarian Hut", "Troop building that periodically deploys Barbarians to fight the enemy. Time to make the Barbarians", 7, [["hut", 1804, 1804, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1800], ["spawner", 1, 405, [["barbarian", 555, 555, 159, -0.7, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []], ["barbarian", 555, 555, 159, -0.6, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 9, 0, [], []]]]]]]], //74
["Furnace", "The Furnace spawns two Fire Spirits at a time. It also makes great brick-oven pancakes.", 4, [["furnace", 1003, 1003, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1501], ["spawner", 1, 300, [["fire spirit", 91, 91, 178, -0.7, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 0, 0, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, -0.6, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 9, 0, [], [["kamikaze"]]], ]]]]]], //75
["Hog Rider", "Fast melee troop that targets buildings and can jump over the river. He followed the echoing call of \"Hog Riderrrrr\" all the way through the Arena doors.", 4, [["hog", 1408, 1408, 264, 0.5, 0.5, 1.2, 4, 120, 0.8, 9.5, 0, 48, 18, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //76
["Royal Hogs", "The King’s personal pets are loose! They love to chomp on apples and towers alike - who let the hogs out?!", 5, [["hoggie", 695, 695, 56, 0.5, -1.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, -0.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, 1.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, 2.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //77
["Royal Ghost", "He drifts invisibly through the Arena until he's startled by an enemy... then he attacks! Then he's invisible again! Zzzz.", 3, [["ghost", 1000, 1000, 216, 0.5, 0.5, 1.2, 3, 90, 1.2, 5.5, 0, 54, 18, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["invis", 0, 48, 12, 12]]]]], //78
["Tornado", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 3, [["nado", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["time", 60], ["nado", 20]]]]], ["nado", 0, 0, 35, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"]]], ["instspell", [["wait", 30], ["noCrown"]]], ["instspell", [["wait", 45], ["noCrown"]]], ["instspell", [["wait", 60], ["noCrown"]]]]]], "spell"], //79
["Lightning", "Bolts of lightning damage and stun up to three enemy troops or buildings with the most hitpoints in the target area. Reduced damage to Crown Towers.", 6, [["lightning", 0, 0, 877, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"], ["tmr", 45], ["hit", 0, 3, 15, 15, []], ["stun", 15]]]]]], "spell"], //80
["Earthquake", "Deals Damage per second to Troops and Crown Towers. Deals huge Building Damage! Does not affect flying units (it is an EARTHquake, after all).", 3, [["earthquake", 0, 0, 61, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["noBuildings"], ["wait", 15], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 30], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 45], ["ground"]]]]], ["earthquake", 0, 0, 244, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 15]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 30]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 45]]]]]], "spell"], //81
["The Log", "A spilt bottle of Rage turned an innocent tree trunk into \"The Log\". Now, it seeks revenge by crushing anything in its path!", 2, [["log", 0, 0, 240, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 13.1, []], ["rect", 3.9, 1.2], ["sudoKnockback", 1], ["forward", 13.1], ["ground"], ["spell"]]], ["ps", 300]]]]], //82
["Barbarian Barrel", "It rolls over and damages anything in its path, then breaks open and out pops a Barbarian! How did he get inside?!", 2, [["barb", 0, 0, 0, -4.75, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["spawn", [["barbarian", 555, 555, 159, 0, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 4, [], []]]], ["wait", 36]]]]], ["barrel", 0, 0, 200, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 5.5, []], ["rect", 2.6, 1.2], ["forward", 5.5], ["ground"], ["spell"]]], ["ps", 300]]]]], //83
["Skeleton Army", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 3, [["skeleton", 67, 67, 67, -1.25, -1.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.3, -0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, -0.9, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, -2.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.1, -1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.4, -0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.8, 0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.5, 0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.65, 1.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.6, 2.2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.2, 0.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.35, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //84
["Tesla", "Defensive building. Whenever it's not zapping the enemy, the power of Electrickery is best kept grounded.", 4, [["tesla", 954, 954, 190, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 33, 15, -1, false, 0, 0, "building", "all", 1, 30, 30, [], [["hiding", -30, 15, 0, 12], ["lifetime", 1050], ["ps", 990]]]]], //85
["Goblin Giant", "This jolly green Goblin Giant stomps towards enemy buildings. He carries two Spear Goblins everywhere he goes. It's a weird but functional arrangement.", 6, [["goblin giant", 2616, 2616, 146, 0.5, 0.5, 1.5, 18, 60, 1.2, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["link", false, [["    ", 110, 110, 67, 0, -0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []], ["    ", 110, 110, 67, 0, 0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []]]], ["split", [["spear goblin", 110, 110, 67, 0, -0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []], ["spear goblin", 110, 110, 67, 0, 0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []]]], ["dsplit"]]]]], //86
["Ram Rider", "Together they charge through the Arena; snaring enemies, knocking down towers ... and chewing grass!?", 5, [["ram", 1461, 1461, 220, 0.5, 0.5, 1.2, 4, 60, 0.8, 7.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"], ["charge", 0, 3.5, 220, 60, 440, 120], ["resistance"], ["link", false, [["rider", 490, 490, 86, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 33, 12, -1, false, 0, 0, "link", "troops", 1, 0, 30, [], [["snare", 60], ["retarget"], ["deprioritize", "snare"]]]]]]]]], //87
["Dark Prince", "The Dark Prince deals area damage and lets his spiked club do the talking for him - because when he does talk, it sounds like he has a bucket on his head.", 4, [["dark prince", 199, 199, 206, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 30, 30, [], [["split", [["dark prince", 1030, 1030, 206, 0, 0, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 0, 0, [], [["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], ["noTargetChange"], ["retainTarget"], ["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], //88
["Bandit", "The Bandit dashes to her target and delivers an extra big hit! While dashing, she can't be touched. The mask keeps her identity safe... and gives her bonus cool points!", 3, [["bandit", 750, 750, 160, 0.5, 0.5, 1.2, 3, 90, 0.8, 6.0, 0, 30, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["dash", 3.5, 6, 160, 90, 320, 500, 0, 24, -1]]]]], //89
["Mega Knight", "He lands with the force of 1,000 mustaches, then jumps from one foe to the next dealing huge area damage. Stand aside!", 7, [["mega knight", 3300, 3300, 222, 0.5, 0.5, 1.5, 18, 60, 1.2, 5.5, 0, 51, 15, -1, false, 0, 1.3, "ground", "ground", 1, 30, 30, [], [["jump", 3.5, 5, 222, 90, 444, 250, 0, 33, -1, 2.2, [["knockback", 1]]], ["resistance"], ["ps", 1400], ["sdmg", 444, 2.2, [["knockback", 1], ["wait", 15]]]]]]], //90
["Miner", "The Miner can burrow his way underground and appear anywhere in the Arena. It's not magic, it's a shovel.", 3, [["miner", 100000, 100000, 0, 0.5, 0.5, 1.0, 6, 650, 1.2, 5.5, 0, 36, 21, -1, false, 0, 0.0, "uground", "none", 1, 30, 0, [], [["resistance"], ["mining", 0, 0, false, [["miner", 1000, 1000, 160, 0, 0, 1.0, 6, 90, 1.2, 5.5, 0, 36, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], [["ctreduc", 0.4]]]]]]]], "spell"], //91
["Fisherman", "His Ranged Attack can pull enemies towards him, and pull himself to enemy buildings. He's also mastered the ancient art of 'Fish Slapping'.", 3, [["fisherman", 800, 800, 160, 0.5, 0.5, 1.0, 10, 60, 1.2, 7.5, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["pull", 3.5, 6, 0, 33, -1, false], ["resistance"]]]]], //92
["Mirror", "Mirrors your last card played for +1 Elixir. Will not appear in your starting cards.", 0, []], //93
["Clone", "Duplicates all friendly troops in the target area. Cloned troops are fragile, but pack the same punch as the original! Doesn't affect buildings.", 3, [["clone", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["clone"], ["noCrown"], ["friendly"]]]]]], "spell"], //94
];
};
}
if(version === "legacy-1019"){
    var cardsInit = function(){
    cards = [
["Spear Goblins", "Three unarmored ranged attackers. Who the heck taught these guys to throw spears!?! Who thought that was a good idea?!", 2, [["spear goblin", 110, 110, 67, 0, 0.5, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 67, 0.7, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //0
["Dart Goblin", "Runs fast, shoots far and chews gum. How does he blow darts with a mouth full of Double Trouble gum? Years of didgeridoo lessons.", 3, [["dart goblin", 216, 216, 100, 0.5, 0.5, 1, 3, 120, 12, 6.5, 0, 21, 10.5, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //1
["Elixir Golem", "Splits into two Elixir Golemites when destroyed, which split into two sentient Blobs when defeated. A Blob gives your opponent 1 Elixir when destroyed!", 3, [["elixir golem", 1408, 1408, 212, 0.5, 0.5, 1.2, 15, 45, 0.75, 7, 0, 60, 30, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["elixir golemite", 704, 704, 106, 0, 0.5, 1, 10, 60, 0.75, 7, 0, 45, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 352, 352, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 30, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 352, 352, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 30, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]], ["elixir golemite", 704, 704, 106, 0, -0.5, 1, 10, 60, 0.75, 7, 0, 45, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["split", [["blob", 352, 352, 53, 0, 0.25, 0.8, 5, 90, 0.75, 7, 0, 30, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]], ["blob", 352, 352, 53, 0, -0.25, 0.8, 5, 90, 0.75, 7, 0, 30, 30, -1, false, 0, 0, "ground", "buildings", 1, 5, 0, [], [["deathElixir"]]]]], ["dsplit"]]]]], ["dsplit"]]]]], //Again, all one troop. //2
["X-Bow", "Nice tower you got there. Would be a shame if this X-Bow whittled it down from this side of the Arena...", 6, [["xbow", 1383, 1383, 26, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 7.5, 7.5, -1, false, 0, 0, "building", "ground", 1, 30, 105, [], [["lifetime", 1200], ["ps", 1600]]]]], //3
["Knight", "A tough melee fighter. The Barbarian's handsome, cultured cousin. Rumor has it that he was knighted based on the sheer awesomeness of his mustache alone.", 3, [["knight", 1382, 1382, 167, 0.5, 0.5, 1, 6, 60, 1.2, 5.5, 0, 33, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //4
["Giant", "Slow but durable, only attacks buildings. A real one-man wrecking crew!", 5, [["giant", 3275, 3275, 211, 0.5, 0.5, 1.5, 18, 45, 1.2, 7.5, 0, 45, 15, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]],]], //5
["Musketeer", "Don't be fooled by her delicately coiffed hair, the Musketeer is a mean shot with her trusty boomstick.", 4, [["musketeer", 598, 598, 181, 0.5, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []],]], //6
["Skeletons", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 1, [["skeleton", 67, 67, 67, 0, 0.5, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, -0.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.7, 1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //7
["Cannon", "Defensive building. Shoots cannonballs with deadly effect, but cannot target flying troops.", 3, [["cannon", 742, 742, 167, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0, "building", "ground", 1, 30, 30, [], [["lifetime", 900], ["ps", 900]]]]], //8
["Wizard", "The most awesome man to ever set foot in the arena, the Wizard will blow you away with his handsomeness... and/or fireballs.", 5, [["wizard", 598, 598, 234, 0.5, 0.5, 1, 5, 60, 5.5, 5.5, 0, 42, 12, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, []],]], //9
["Fire Spirits", "These three Fire Spirits are on a kamikaze mission to give you a warm hug. It'd be adorable if they weren't on fire.", 2, [["fire spirit", 91, 91, 178, 0, 0.5, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, -0.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, 0.7, 1.1, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"]]],]], //10
["Ice Spirit", "Spawns one lively little Ice Spirit to freeze a group of enemies. Stay frosty.", 1, [["ice spirit", 190, 190, 91, 0.5, 0.5, 0.8, 1, 120, 2.5, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 30, 30, [], [["kamikaze"], ["stun", 30]]],]], //11
["Zappies", "Spawns a pack of miniature Zap machines. Who controls them...? Only the Master Builder knows.", 4, [["zappy", 440, 440, 70, -0.2, 0.5, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 70, 0.8, -0.2, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]], ["zappy", 440, 440, 70, 0.8, 1.2, 1.2, 4, 60, 4.5, 5.5, 0, 48, 42, -1, false, 0, 0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["ps", 100000]]]]], //12 (mass unknown)
["P.E.K.K.A.", "A heavily armored, slow melee fighter. Swings from the hip but packs a huge punch.", 7, [["pekka", 3125, 3125, 678, 0.5, 0.5, 1.5, 18, 45, 1.2, 5.0, 0, 54, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, [], [["resistance"]]],]], //13
["Sparky", "Sparky slowly charges up, then unloads MASSIVE area damage. Overkill isn't in her vocabulary.", 6, [["sparky", 1200, 1200, 1100, 0.5, 0.5, 2, 18, 45, 5.5, 5.5, 120, 120, 15, -1, false, 0, 1.8, "ground", "ground", 1, 30, 30, [], [["resistance"], ["weak-stun"], ["recoil", 0.75]]],]], //14
["Mini P.E.K.K.A.", "The Arena is a certified butterfly-free zone. No distractions for P.E.K.K.A, only destruction.", 4, [["mini pekka", 1129, 1129, 598, 0.5, 0.5, 0.9, 4, 90, 1.2, 5.5, 0, 54, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //15 (First generated one!)
["Ice Wizard", "This chill caster throws ice shards that slow down enemies' movement and attack speed. Despite being freezing cold, he has a handlebar mustache that's too hot for TV.", 3, [["ice wizard", 590, 590, 75, 0.5, 0.5, 1.0, 5, 60, 5.5, 5.5, 0, 51, 15, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["slow", 75]]]]], //16
["Goblin Cage", "When the Goblin Cage is destroyed, a Goblin Brawler is unleashed into the Arena! Goblin Brawler always skips leg day.", 4, [["cage", 800, 800, 0, 0.5, 0.5, 2, 0, 0, 0.0, 0.0, 0, 27000, 27000, -1, false, 0, 0.0, "building", "ground", 1, 30, 30, [], [["lifetime", 600], ["split", [["brawler", 853, 853, 264, 0, 0, 1.0, 2, 90, 0.8, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 5, 15, [], []]]]]]]], //17
["Cannon Cart", "A Cannon on wheels?! Bet they won't see that coming! Once you break its shield, it becomes a Cannon not on wheels.", 5, [["cannon cart", 742, 742, 168, 0.5, 0.5, 1.2, 3, 90, 5.5, 6, 0, 30, 18, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["resistance"], ["split", [["cannon cart", 742, 742, 168, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 30, 18, -1, false, 0, 0.0, "building", "ground", 1, 2, 3, [], [["lifetime", 900]]]]]]]]], //18
["Mega Minion", "Flying, armored and powerful. What could be its weakness?! Cupcakes.", 3, [["mega minion", 695, 695, 258, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 48, 12, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]]]], //19
["Baby Dragon", "Burps fireballs from the sky that deal area damage. Baby dragons hatch cute, hungry and ready for a barbeque.", 4, [["baby dragon", 1064, 1064, 133, 0.5, 0.5, 1.0, 5, 90, 3.5, 5.5, 0, 45, 9, -1, false, 0, 1.2, "air", "all", 1, 30, 30, [], []]]], //20
["Royal Giant", "Destroying enemy buildings with his massive cannon is his job; making a raggedy blond beard look good is his passion.", 6, [["royal giant", 2544, 2544, 254, 0.5, 0.5, 1.5, 18, 45, 5.0, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]]]], //21
["Minions", "Three fast, unarmored flying attackers. Roses are red, minions are blue, they can fly, and will crush you!", 3, [["minion", 190, 190, 84, 0, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, -0.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, 1.2, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]]]], //22
["Minion Horde", "Six fast, unarmored flying attackers. Three's a crowd, six is a horde!", 5, [["minion", 190, 190, 84, 1.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, -0.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, -0.5, 0.5, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, 1.3, 1.0, 2, 90, 1.6, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 52.5, 30, [], [["ps", 810.0001]]]]], //23
["Goblins", "Three fast, unarmored melee attackers. Small, fast, green and mean!", 2, [["goblin", 167, 167, 99, 0, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, -0.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, 0.7, 1.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //24
["Guards", "Three ruthless bone brothers with shields. Knock off their shields and all that's left are three ruthless bone brothers.", 3, [["guard", 199, 199, 90, 0, 0.5, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, -0.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["guard", 199, 199, 90, 0.7, 1.2, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["guard", 90, 90, 90, 0, 0, 1.0, 1, 90, 1.6, 5.5, 0, 33, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //25
["Bomber", "Small, lightly protected skeleton that throws bombs. Deals area damage that can wipe out a swarm of enemies.", 3, [["bomber", 398, 398, 271, 0.5, 0.5, 1.0, 4, 60, 5.0, 5.5, 0, 57, 6, -1, false, 0, 1.5, "ground", "ground", 1, 30, 30, [], []]]], //26
["Flying Machine", "The Master Builder has sent his first contraption to the Arena! It's a fast and fun flying machine, but fragile!", 4, [["flying machine", 510, 510, 142, 0.5, 0.5, 1.0, 3, 90, 6.0, 6.0, 0, 33, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []]]], //27
["Elixir Collector", "You gotta spend Elixir to make Elixir! This building makes 8 Elixir over its Lifetime. Does not appear in your starting hand.", 6, [["elixir collector", 888, 888, 0, 0.5, 0.5, 2, 0, 0, -1.0, -1.0, 0, 255, 255, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 2100], ["elixir", 255, 255]]]]], //28
["Bats", "Spawns a handful of tiny flying creatures. Think of them as sweet, purple... balls of DESTRUCTION!", 2, [["bat", 67, 67, 67, 0.5+sin(radians(36)), 0.5+cos(radians(36)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(108)), 0.5+cos(radians(108)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 34.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(180)), 0.5+cos(radians(180)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 39, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(252)), 0.5+cos(radians(252)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 43.5, 30, [], []], ["bat", 67, 67, 67, 0.5+sin(radians(324)), 0.5+cos(radians(324)), 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 48, 30, [], []]]], //29
["Witch", "Summons Skeletons, shoots destructo beams, has glowing pink eyes that unfortunately don't shoot lasers.", 5, [["witch", 696, 696, 220, 0.5, 0.5, 1.0, 4, 60, 5.0, 5.5, 0, 42, 30, -1, false, 0, 0.6, "ground", "all", 1, 30, 30, [], [["spawner", 30, 210, [["skeleton", 67, 67, 67, 2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, 2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, -2, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 67, 67, 67, 0, -2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []],]]]]]], //30
["Night Witch", "Summons Bats to do her bidding, even after death! If you get too close, she isn't afraid of pitching in with her mean-looking battle staff.", 4, [["night witch", 750, 750, 260, 0.5, 0.5, 1.0, 4, 60, 1.6, 5.5, 0, 45, 18, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["split", [["bat", 67, 67, 67, 0, -1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, -1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, 1.5, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 1.5, 0, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["spawner", 39, 210, [["bat", 67, 67, 67, 0, 1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []], ["bat", 67, 67, 67, 0, -1, 1.0, 1, 120, 1.2, 5.5, 0, 33, 18, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [], []]]], ["dspawn"]]]]], //31
["Goblin Hut", "Building that spawns Spear Goblins. But don't look inside. You don't want to see how they are made.", 5, [["goblin hut", 1293, 1293, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 135, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1500], ["spawner", 1, 135, [["spear goblin", 110, 110, 67, -0.5, 0, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 0, 0, [], []]]]]]]], //32
["Tombstone", "Troop building that periodically deploys Skeletons to fight the enemy... and when destroyed, spawns 3 Skeletons! Creepy.", 3, [["tombstone", 422, 422, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1200], ["split", [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, -0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 67, 67, 67, 0.2, 0.6, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []],]], ["spawner", 93, 93, [["skeleton", 67, 67, 67, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //33
["Inferno Dragon", "Shoots a focused beam of fire that increases in damage over time. Wears a helmet because flying can be dangerous.", 4, [["inferno dragon", 1070, 1070, 30, 0.5, 0.5, 1.0, 5, 60, 3.5, 5.5, 0, 12, 36, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["inferno", 0, 60, 30, 70, 350]]]]], //34
["Inferno Tower", "Defensive building, roasts targets for damage that increases over time. Burns through even the biggest and toughest enemies!", 5, [["inferno tower", 1452, 1452, 35, 0.5, 0.5, 1.2, 0, 0, 6, 6, 0, 12, 60, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 900], ["inferno", 0, 60, 35, 132, 704]]]]], //35
["Prince", "Don't let the little pony fool you. Once the Prince gets a running start, you WILL be trampled. Deals double damage once he gets charging.", 5, [["prince", 1615, 1615, 325, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 42, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 325, 60, 651, 120]]]]], //36
["Battle Ram", "Two Barbarians holding a big log charge at the nearest building, dealing significant damage if they connect; then they go to town with their swords!", 4, [["battle ram", 756, 756, 220, 0.5, 0.5, 1.5, 6, 60, 0.5, 5.5, 0, 12, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["charge", 0, 3.5, 220, 60, 440, 120], ["kamikaze"], ["split", [["barbarian", 555, 555, 159, 0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []], ["barbarian", 555, 555, 159, -0.5, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], []]]], ["dsplit"]]]]], //37
["Barbarians", "A horde of melee attackers with mean mustaches and even meaner tempers.", 5, [["barbarian", 555, 555, 159, 0.5+sin(radians(54)), 0.5+cos(radians(54)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(126)), 0.5+cos(radians(126)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(198)), 0.5+cos(radians(198)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(270)), 0.5+cos(radians(270)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 43.5, 30, [], []], ["barbarian", 555, 555, 159, 0.5+sin(radians(342)), 0.5+cos(radians(342)), 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 48, 30, [], []]]], //38
["Electro Dragon", "Spits out bolts of electricity hitting up to three targets. Suffers from middle child syndrome to boot.", 5, [["electro dragon", 790, 790, 159, 0.5, 0.5, 1.2, 7, 60, 3.5, 5.5, 0, 63, 21, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["stun", 15], ["ps", 2000], ["chain", 2, 3.5, 159, []]]]]], //39
["Elite Barbarians", "Spawns a pair of leveled up Barbarians. They're like regular Barbarians, only harder, better, faster and stronger.", 6, [["elite barbarian", 970, 970, 301, 0.5, 1.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["elite barbarian", 970, 970, 301, 0.5, -0.1, 1.0, 4, 120, 1.2, 5.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //40
["Archers", "A pair of lightly armored ranged attackers. They'll help you take down ground and air units, but you're on your own with hair coloring advice.", 3, [["archer", 252, 252, 89, 0.5, 1.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []], ["archer", 252, 252, 89, 0.5, -0.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 3, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []]]], //41
["Three Musketeers", "Trio of powerful, independent markswomen, fighting for justice and honor. Disrespecting them would not be just a mistake, it would be a cardinal sin!", 9, [["musketeer", 598, 598, 181, 0.5-0.7, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 39, 90, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(-30)), 0.5-0.7*cos(radians(-30)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 90, []], ["musketeer", 598, 598, 181, 0.5-0.7*sin(radians(210)), 0.5-0.7*cos(radians(210)), 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 34.5, 90, []],]], //42
["Rascals", "Spawns a mischievous trio of Rascals! The boy takes the lead, while the girls pelt enemies from behind... with slingshots full of Double Trouble Gum!", 5, [["rascal boy", 1515, 1515, 110, -0.1, 0.5, 1.5, 10, 60, 0.8, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, -0.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 34.5, 30, [], []], ["rascal girl", 216, 216, 110, 1.2, 1.2, 1.0, 2, 60, 5.0, 5.5, 0, 33, 30, -1, false, 0, 0.0, "ground", "all", 1, 39, 30, [], []]]], //43
["Fireball", "Annnnnd... Fireball. Incinerates a small area, dealing high damage. Reduced damage to Crown Towers.", 4, [["fireball", 0, 0, 572, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.8], ["spell"]]]]]], "spell"], //44 (GOT EEM!)
["Giant Snowball", "It’s HUGE! Once it began rolling down Frozen Peak, there was no stopping it. Enemies hit are knocked back and slowed down.", 2, [["snowball", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.5], ["slow", 75], ["spell"]]]]]], "spell"], //45
["Arrows", "Arrows pepper a large area, damaging all enemies hit. Reduced damage to Crown Towers.", 3, [["arrows", 0, 0, 243, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["spell", [["spell"]]], ["ps", 1600]]]], "spell"], //46
["Rocket", "Deals high damage to a small area. Looks really awesome doing it. Reduced damage to Crown Towers.", 6, [["rocket", 0, 0, 1232, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1], ["spell"]]], ["ps", 500]]]], "spell"], //47
["Zap", "Zaps enemies, briefly stunning them and dealing damage inside a small radius. Reduced damage to Crown Towers.", 2, [["zap", 0, 0, 159, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"]]]]]], "spell"], //48
["Freeze", "Freezes and damages troops and buildings, making them unable to move or attack. Everybody chill.", 4, [["freeze", 0, 0, 95, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 120], ["spell"]]]]]], "spell"], //49
["Ice Golem", "He's tough, targets buildings and explodes when destroyed, slowing nearby enemies. Made entirely out of ice... or is he?! Yes.", 2, [["ice golem", 994, 994, 70, 0.5, 0.5, 1.4, 6, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["ddmg", 70, 2, [["slow", 30]]]]]]], //50
["Skeleton Barrel", "It's a Skeleton party in the sky, until all the balloons pop... then it's a Skeleton party on the ground!", 3, [["skeleton barrel", 636, 636, 0, 0.5, 0.5, 1.0, 7, 90, 0.4, 7.7, 0, 9, 3, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["kamikaze"], ["ddmg", 110, 2, [["knockback", 1], ["wait", 15]]], ["split", [["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+360/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0+1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-1080/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-720/7, 1.2]]], ["skeleton", 67, 67, 67, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 15, 0, [["knockback", 9, 9, 0-360/7, 1.2]]],]]]]]], //51
["Poison", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 4, [["poison", 0, 0, 75, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 30], ["spell"]]], ["instspell", [["wait", 60], ["spell"]]], ["instspell", [["wait", 90], ["spell"]]], ["instspell", [["wait", 120], ["spell"]]], ["instspell", [["wait", 150], ["spell"]]], ["instspell", [["wait", 180], ["spell"]]], ["instspell", [["wait", 210], ["spell"]]], ["instspell", [["wait", 240], ["spell"]]]]]], "spell"], //52
["Valkyrie", "Tough melee fighter, deals area damage around her. Swarm or horde, no problem! She can take them all out with a few spins.", 4, [["valkryie", 1654, 1654, 221, 0.5, 0.5, 1.0, 5, 60, 1.2, 5.5, 0, 45, 3, -1, false, 0, 1.7, "ground", "ground", 1, 30, 30, [], [["aoea", [["ground"]]]]]]], //53
["Wall Breakers", "A daring duo of dangerous dive bombers. Nothing warms a Wall Breaker's cold and undead heart like blowing up buildings.", 2, [["wall breaker", 275, 275, 400, 0.5, 1, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]], ["wall breaker", 275, 275, 400, 0.5, 0, 1.0, 4, 120, 0.5, 7.0, 0, 36, 6, -1, false, 0, 1.5, "ground", "buildings", 1, 30, 30, [], [["aoea"], ["kamikaze"]]]]], //54
["Royal Recruits", "Deploys a line of recruits armed with spears, shields and wooden buckets. They dream of ponies and one day wearing metal buckets.", 7, [["recruit", 199, 199, 101, 0.3, -0.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, -3.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, -6, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 1.8, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.3, 4.4, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]], ["recruit", 199, 199, 101, 0.7, 7, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["noTargetChange"], ["retainTarget"], ["split", [["recruit", 440, 440, 101, 0, 0, 1.0, 5, 60, 1.6, 5.5, 0, 39, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []]]]]]], "recruits"], //55
["Giant Skeleton", "The bigger the skeleton, the bigger the bomb. Carries a bomb that blows up when the Giant Skeleton dies.", 6, [["giant skeleton", 2793, 2793, 172, 0.5, 0.5, 2.0, 18, 60, 0.8, 5.0, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["split", [["bomb", 10000, 10000, 957, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 2.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 957, 2, [["knockback", 1]]], ["lifetime", 90]]]]]]]]], //56
["Balloon", "As pretty as they are, you won't want a parade of THESE balloons showing up on the horizon. Drops powerful bombs and when shot down, crashes dealing area damage.", 5, [["balloon", 1396, 1396, 798, 0.5, 0.5, 1.0, 6, 60, 0.1, 7.7, 0, 90, 6, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["split", [["bomb", 10000, 10000, 272, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 272, 3, []], ["lifetime", 90]]]]]]]]], //57
["Bomb Tower", "Defensive building that houses a Bomber. Deals area damage to anything dumb enough to stand near it.", 4, [["bomb tower", 1126, 1126, 168, 0.5, 0.5, 1.2, 0, 0, 6.0, 6.0, 0, 48, 15, -1, false, 0, 1.5, "building", "ground", 1, 30, 30, [], [["lifetime", 1050], ["split", [["bomb", 10000, 10000, 336, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 3.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 336, 2, []], ["lifetime", 90]]]]]]]]], //58
["Golem", "Slow but durable, only attacks buildings. When destroyed, explosively splits into two Golemites and deals area damage!", 8, [["golem", 4256, 4256, 259, 0.5, 0.5, 1.5, 20, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 90, [], [["ddmg", 259, 2, [["knockback", 1.8]]], ["resistance"], ["split", [["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, 0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]], ["golemite", 864, 864, 53, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, -0.6]], [["ddmg", 53, 2, [["knockback", 0.9]]]]]]], ["dsplit"]]]]], //59
["Heal", "Heal your troops to keep them in the fight! Friendly troops are healed over time while in the target area. Doesn't affect buildings.", 1, [["heal", 0, 0, -33, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 30], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 45], ["noCrown"], ["friendly"]]], ["instspell", [["wait", 60], ["noCrown"], ["friendly"]]]]]], "spell"], //60
["Rage", "Increases troop movement and attack speed. Buildings attack faster and summon troops quicker, too. Chaaaarge!", 2, [["rage", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["rage", 60], ["time", 225], ["rage", 60], ["friendly"]]]]]], "spell"], //61
["Lumberjack", "He chops trees by day and hunts The Log by night. His bottle of Rage spills everywhere when he's defeated.", 4, [["lumberjack", 1060, 1060, 200, 0.5, 0.5, 1.0, 4, 120, 0.7, 5.5, 0, 24, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["ddmg", 0, 4, [["rage", 60], ["friendly"], ["time", 234], ["rage", 60], ["wait", 9]]]]]]], //62
["Goblin Barrel", "Spawns three Goblins anywhere in the Arena. It's going to be a thrilling ride, boys!", 3, [["barrel", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["spawn", [["goblin", 167, 167, 99, 0.4, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, 0.4, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ["goblin", 167, 167, 99, -0.5, 0, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 0, 24, [], []], ]], ["spell"]]], ["ps", 600]]]], "spell"], //63
["Electro Wizard", "He lands with a \"POW!\", stuns nearby enemies and shoots lightning with both hands! What a show off.", 4, [["ewiz", 590, 590, 96, 0.5, 0.5, 1.0, 5, 90, 5.0, 5.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], [["stun", 15], ["defender", 5], ["ps", 100000], ["sdmg", 159, 2.5, [["stun", 15]]]]]]], //64
["Princess", "This stunning Princess shoots flaming arrows from long range. If you're feeling warm feelings towards her, it's probably because you're on fire.", 3, [["princess", 216, 216, 140, 0.5, 0.5, 1.0, 3, 60, 9.0, 9.5, 0, 90, 15, -1, false, 0, 2.0, "ground", "all", 1, 30, 30, [], [["sptrgt"]]]]], //65
["Mortar", "Defensive building with a long range. Shoots big boulders that deal area damage, but cannot hit targets that get very close!", 4, [["mortar", 1221, 1221, 220, 0.5, 0.5, 1.2, 0, 0, 11.5, 11.5, 0, 150, 30, -1, false, 0, 2.0, "building", "ground", 1, 30, 105, [], [["sptrgt", [["ground"]]], ["mrange", 3.5], ["lifetime", 900], ["ps", 630]]]]], //66
["Goblin Gang", "Spawns five Goblins - three with knives, two with spears - at a discounted Elixir cost. It's like a Goblin Value Pack!", 3, [["spear goblin", 110, 110, 67, 1.4, 1.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 43.5, 30, []], ["spear goblin", 110, 110, 67, 1.4, -0.2, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 48, 30, []], ["goblin", 167, 167, 99, -0.6, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 34.5, 30, [], []], ["goblin", 167, 167, 99, -0.3, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 167, 167, 99, -0.3, 1.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 6, -1, false, 0, 0.0, "ground", "ground", 1, 39, 30, [], []]]], //67
["Lava Hound", "The Lava Hound is a majestic flying beast that attacks buildings. The Lava Pups are less majestic angry babies that attack anything.", 7, [["lava hound", 3150, 3150, 45, 0.5, 0.5, 1.5, 5, 45, 2.0, 5.5, 0, 39, 9, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["resistance"], ["split", [["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 0, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 60, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 120, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 180, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 240, 2.5]], []], ["lava pup", 179, 179, 45, 0, 0, 1, 5, 60, 2.0, 5.5, 0, 30, 9, -1, false, 0, 0.0, "air", "all", 1, 0, 0, [["knockback", 12, 12, 300, 2.5]], []],]]]]]], //68
["Magic Archer", "Not quite a Wizard, nor an Archer - he shoots a magic arrow that passes through and damages all enemies in its path. It's not a trick, it's magic!", 4, [["magic archer", 490, 490, 111, 0.5, 0.5, 1.2, 3, 60, 7.0, 7.5, 0, 33, 15, -1, false, 0, 0.25, "ground", "all", 1, 30, 30, [], [["sptrgt", [["pass", 0, 11.6, []]]], ["ps", 1200]]]]], //69
["Bowler", "This big blue dude digs the simple things in life - Dark Elixir drinks and throwing rocks. His massive boulders roll through their target, hitting everything behind for a strike!", 5, [["bowler", 1596, 1596, 239, 0.5, 0.5, 1.5, 18, 45, 5.0, 5.5, 0, 75, 15, -1, false, 0, 0.9, "ground", "ground", 1, 30, 30, [], [["resistance"], ["sprnge", 0.8, 4.95, [["knockback", 1], ["pass", 0, 5, []], ["ground"]]], ["ps", 600]]]]], //70
["Hunter", "He deals BIG damage up close - not so much at range. What he lacks in accuracy, he makes up for with his impressively bushy eyebrows.", 4, [["hunter", 696, 696, 70, 0.5, 0.5, 1.2, 5, 60, 4.0, 5.5, 0, 66, 21, -1, false, 0, 0.07, "ground", "all", 1, 30, 30, [], [["shotgun", 10, 9], ["sptrgt", [["killOnHit"], ["pass", 0, 4, []]]],]]]], //71
["Graveyard", "Surprise! It's a party. A Skeleton party, anywhere in the Arena. Yay!", 5, [["graveyard", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 0, [], [["instspell", [["time", 315], ["graveyard", 90, 15, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], ["friendly"]]]]]], "spell"], //72
["Executioner", "He throws his axe like a boomerang, striking all enemies on the way out AND back. It's a miracle he doesn't lose an arm.", 5, [["executioner", 960, 960, 259, 0.5, 0.5, 1.2, 4, 60, 4.0, 5.5, 0, 21, 30, -1, false, 0, 1, "ground", "all", 1, 30, 30, [], [["sprnge", 0.6, 3.9, [["tmr", 0, 18, []]], [["tmr", 0, 36, []]]], ["hitp", 0, 54]]]]], //73
["Barbarian Hut", "Troop building that periodically deploys Barbarians to fight the enemy. Time to make the Barbarians", 7, [["hut", 1804, 1804, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1800], ["spawner", 1, 405, [["barbarian", 555, 555, 159, -0.7, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []], ["barbarian", 555, 555, 159, -0.6, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 9, 0, [], []]]]]]]], //74
["Furnace", "The Furnace spawns two Fire Spirits at a time. It also makes great brick-oven pancakes.", 4, [["furnace", 1003, 1003, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1501], ["spawner", 1, 300, [["fire spirit", 91, 91, 178, -0.7, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 0, 0, [], [["kamikaze"]]], ["fire spirit", 91, 91, 178, -0.6, 0, 0.8, 1, 120, 2, 5.5, 0, 9, 3, -1, false, 0, 1.5, "ground", "all", 1, 9, 0, [], [["kamikaze"]]], ]]]]]], //75
["Hog Rider", "Fast melee troop that targets buildings and can jump over the river. He followed the echoing call of \"Hog Riderrrrr\" all the way through the Arena doors.", 4, [["hog", 1408, 1408, 264, 0.5, 0.5, 1.2, 4, 120, 0.8, 9.5, 0, 48, 18, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //76
["Royal Hogs", "The King’s personal pets are loose! They love to chomp on apples and towers alike - who let the hogs out?!", 5, [["hoggie", 695, 695, 56, 0.5, -1.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, -0.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, 1.2, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]], ["hoggie", 695, 695, 56, 0.5, 2.5, 1.2, 2, 120, 0.8, 9.5, 0, 36, 10.5, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //77
["Royal Ghost", "He drifts invisibly through the Arena until he's startled by an enemy... then he attacks! Then he's invisible again! Zzzz.", 3, [["ghost", 1000, 1000, 216, 0.5, 0.5, 1.2, 3, 90, 1.2, 5.5, 0, 54, 18, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["invis", 0, 48, 12, 12]]]]], //78
["Tornado", "Covers the area in a deadly toxin, damaging enemy troops and buildings over time. Yet somehow leaves the grass green and healthy. Go figure!", 3, [["nado", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["time", 60], ["nado", 20]]]]], ["nado", 0, 0, 35, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 5.5, "spell", "all", 1, 30, 10, [], [["instspell", [["wait", 15], ["noCrown"]]], ["instspell", [["wait", 30], ["noCrown"]]], ["instspell", [["wait", 45], ["noCrown"]]], ["instspell", [["wait", 60], ["noCrown"]]]]]], "spell"], //79
["Lightning", "Bolts of lightning damage and stun up to three enemy troops or buildings with the most hitpoints in the target area. Reduced damage to Crown Towers.", 6, [["lightning", 0, 0, 877, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 15], ["spell"], ["tmr", 45], ["hit", 0, 3, 15, 15, []], ["stun", 15]]]]]], "spell"], //80
["Earthquake", "Deals Damage per second to Troops and Crown Towers. Deals huge Building Damage! Does not affect flying units (it is an EARTHquake, after all).", 3, [["earthquake", 0, 0, 61, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["noBuildings"], ["wait", 15], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 30], ["ground"]]], ["instspell", [["slow", 75], ["noBuildings"], ["wait", 45], ["ground"]]]]], ["earthquake", 0, 0, 244, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 15]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 30]]], ["instspell", [["slow", 75], ["onlyBuildings"], ["wait", 45]]]]]], "spell"], //81
["The Log", "A spilt bottle of Rage turned an innocent tree trunk into \"The Log\". Now, it seeks revenge by crushing anything in its path!", 2, [["log", 0, 0, 240, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 13.1, []], ["rect", 3.9, 1.2], ["sudoKnockback", 1], ["forward", 13.1], ["ground"], ["spell"]]], ["ps", 300]]]]], //82
["Barbarian Barrel", "It rolls over and damages anything in its path, then breaks open and out pops a Barbarian! How did he get inside?!", 2, [["barb", 0, 0, 0, -4.75, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["spawn", [["barbarian", 555, 555, 159, 0, 0, 1.0, 4, 60, 0.7, 5.5, 0, 42, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 4, [], []]]], ["wait", 36]]]]], ["barrel", 0, 0, 186, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 0, "spell", "all", 1, 30, 10, [], [["instspell", [["pass", 0, 5.5, []], ["rect", 2.6, 1.2], ["forward", 5.5], ["ground"], ["spell"]]], ["ps", 300]]]]], //83
["Skeleton Army", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 3, [["skeleton", 67, 67, 67, -1.25, -1.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.3, -0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, -0.9, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.9, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, -2.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.1, -1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.4, -0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, -0.8, 0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0.5, 0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.65, 1.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.6, 2.2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 2.2, 0.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 1.35, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 67, 67, 67, 0, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //84
["Tesla", "Defensive building. Whenever it's not zapping the enemy, the power of Electrickery is best kept grounded.", 4, [["tesla", 954, 954, 190, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 33, 15, -1, false, 0, 0, "building", "all", 1, 30, 30, [], [["hiding", -30, 15, 0, 12], ["lifetime", 1050], ["ps", 990]]]]], //85
["Goblin Giant", "This jolly green Goblin Giant stomps towards enemy buildings. He carries two Spear Goblins everywhere he goes. It's a weird but functional arrangement.", 6, [["goblin giant", 2616, 2616, 146, 0.5, 0.5, 1.5, 18, 60, 1.2, 7.5, 0, 51, 21, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["resistance"], ["link", false, [["    ", 110, 110, 67, 0, -0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []], ["    ", 110, 110, 67, 0, 0.25, 1, 1, 0, 5.5, 5.5, 0, 51, 15, -1, false, 0, 0, "link", "all", 1, 0, 30, [["invulnerable", 100000]], []]]], ["split", [["spear goblin", 110, 110, 67, 0, -0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []], ["spear goblin", 110, 110, 67, 0, 0.6, 1, 1, 120, 5, 5.5, 0, 51, 15, -1, false, 0, 0, "ground", "all", 1, 15, 15, []]]], ["dsplit"]]]]], //86
["Ram Rider", "Together they charge through the Arena; snaring enemies, knocking down towers ... and chewing grass!?", 5, [["ram", 1461, 1461, 220, 0.5, 0.5, 1.2, 4, 60, 0.8, 7.5, 0, 54, 18, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 30, [], [["jumping"], ["charge", 0, 3.5, 220, 60, 440, 120], ["resistance"], ["link", false, [["rider", 490, 490, 86, 0, 0, 1.2, 3, 0, 5.5, 5.5, 0, 33, 12, -1, false, 0, 0, "link", "troops", 1, 0, 30, [], [["snare", 60], ["retarget"], ["deprioritize", "snare"]]]]]]]]], //87
["Dark Prince", "The Dark Prince deals area damage and lets his spiked club do the talking for him - because when he does talk, it sounds like he has a bucket on his head.", 4, [["dark prince", 199, 199, 206, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 30, 30, [], [["split", [["dark prince", 1030, 1030, 206, 0, 0, 1.2, 6, 60, 1.6, 5.5, 0, 39, 12, -1, false, 0, 1.2, "ground", "ground", 1, 0, 0, [], [["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], ["noTargetChange"], ["retainTarget"], ["resistance"], ["charge", 0, 3.5, 206, 60, 412, 120, 2.5], ["ps", 1400]]]]], //88
["Bandit", "The Bandit dashes to her target and delivers an extra big hit! While dashing, she can't be touched. The mask keeps her identity safe... and gives her bonus cool points!", 3, [["bandit", 750, 750, 160, 0.5, 0.5, 1.2, 3, 90, 0.8, 6.0, 0, 30, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["dash", 3.5, 6, 160, 90, 320, 500, 0, 24, -1]]]]], //89
["Mega Knight", "He lands with the force of 1,000 mustaches, then jumps from one foe to the next dealing huge area damage. Stand aside!", 7, [["mega knight", 3300, 3300, 222, 0.5, 0.5, 1.5, 18, 60, 1.2, 5.5, 0, 51, 15, -1, false, 0, 1.3, "ground", "ground", 1, 30, 30, [], [["jump", 3.5, 5, 222, 90, 444, 250, 0, 33, -1, 2.2, [["knockback", 1]]], ["resistance"], ["ps", 1400], ["sdmg", 444, 2.2, [["knockback", 1], ["wait", 15]]]]]]], //90
["Miner", "The Miner can burrow his way underground and appear anywhere in the Arena. It's not magic, it's a shovel.", 3, [["miner", 100000, 100000, 0, 0.5, 0.5, 1.0, 6, 650, 1.2, 5.5, 0, 36, 21, -1, false, 0, 0.0, "uground", "none", 1, 30, 0, [], [["resistance"], ["mining", 0, 0, false, [["miner", 1000, 1000, 160, 0, 0, 1.0, 6, 90, 1.2, 5.5, 0, 36, 15, -1, false, 0, 0.0, "ground", "ground", 1, 0, 30, [], [["ctreduc", 0.4]]]]]]]], "spell"], //91
["Fisherman", "His Ranged Attack can pull enemies towards him, and pull himself to enemy buildings. He's also mastered the ancient art of 'Fish Slapping'.", 3, [["fisherman", 800, 800, 160, 0.5, 0.5, 1.0, 10, 60, 1.2, 7.5, 0, 45, 9, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["pull", 3.5, 7, 0, 30, -1, false], ["resistance"]]]]], //92
["Mirror", "Mirrors your last card played for +1 Elixir. Will not appear in your starting cards.", 0, []], //93
["Clone", "Duplicates all friendly troops in the target area. Cloned troops are fragile, but pack the same punch as the original! Doesn't affect buildings.", 3, [["clone", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3, "spell", "all", 1, 30, 10, [], [["instspell", [["clone"], ["noCrown"], ["friendly"]]]]]], "spell"], //94
];
};
}
//}
//Retro version (cards at launch at launch stats) 
else if(version === "retro"){
    var cardsInit = function(){
    cards = [
["Spear Goblins", "Three unarmored ranged attackers. Who the heck taught these guys to throw spears!?! Who thought that was a good idea?!", 2, [["spear goblin", 110, 110, 50, 0, 0.5, 1, 1, 120, 5, 5.5, 0, 39, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 50, 0.7, -0.2, 1, 1, 120, 5, 5.5, 0, 39, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []], ["spear goblin", 110, 110, 50, 0.7, 1.2, 1, 1, 120, 5, 5.5, 0, 39, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []]]], //0
["X-Bow", "Nice tower you got there. Would be a shame if this X-Bow whittled it down from this side of the Arena...", 6, [["xbow", 1330, 1330, 26, 0.5, 0.5, 1.2, 0, 0, 12.5, 12.5, 0, 7.5, 7.5, -1, false, 0, 0, "building", "all", 1, 30, 90, [], [["lifetime", 1200], ["ps", 1600]]]]], //1
["Knight", "A tough melee fighter. The Barbarian's handsome, cultured cousin. Rumor has it that he was knighted based on the sheer awesomeness of his mustache alone.", 3, [["knight", 1272, 1272, 159, 0.5, 0.5, 1, 6, 60, 1, 5.5, 0, 33, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //2
["Giant", "Slow but durable, only attacks buildings. A real one-man wrecking crew!", 5, [["giant", 3344, 3344, 211, 0.5, 0.5, 1.5, 18, 45, 1.2, 7.5, 0, 45, 15, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["resistance"]]],]], //3
["Musketeer", "Don't be fooled by her delicately coiffed hair, the Musketeer is a mean shot with her trusty boomstick.", 5, [["musketeer", 598, 598, 211, 0.5, 0.5, 1, 5, 60, 6, 6, 0, 33, 15, -1, false, 0, 0, "ground", "all", 1, 30, 30, []],]], //4
["Skeletons", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 1, [["skeleton", 57, 57, 57, 0, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 57, 57, 57, 1, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 57, 57, 57, 0, 1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 57, 57, 57, 1, 1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //5
["Cannon", "Defensive building. Shoots cannonballs with deadly effect, but cannot target flying troops.", 6, [["cannon", 2120, 2120, 127, 0.5, 0.5, 1.2, 0, 0, 6.5, 6.5, 0, 24, 18, -1, false, 0, 0, "building", "ground", 1, 30, 30, [], [["lifetime", 900], ["ps", 1800]]]]], //6
["Wizard", "The most awesome man to ever set foot in the arena, the Wizard will blow you away with his handsomeness... and/or fireballs.", 5, [["wizard", 598, 598, 246, 0.5, 0.5, 1, 5, 60, 5.0, 5.5, 0, 51, 12, -1, false, 0, 1.2, "ground", "all", 1, 30, 30, []],]], //7
["P.E.K.K.A.", "A heavily armored, slow melee fighter. Swings from the hip but packs a huge punch.", 8, [["pekka", 3980, 3980, 600, 0.5, 0.5, 1.5, 18, 45, 0.75, 5.0, 0, 54, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 90, [], [["resistance"]]],]], //8
["Mini P.E.K.K.A.", "The Arena is a certified butterfly-free zone. No distractions for P.E.K.K.A, only destruction.", 4, [["mini pekka", 1020, 1020, 572, 0.5, 0.5, 0.9, 4, 90, 1.05, 5.5, 0, 54, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //9 (First generated one!)
["Baby Dragon", "Burps fireballs from the sky that deal area damage. Baby dragons hatch cute, hungry and ready for a barbeque.", 4, [["baby dragon", 1064, 1064, 133, 0.5, 0.5, 1.0, 5, 90, 3.0, 5.5, 0, 54, 9, -1, false, 0, 1.2, "air", "all", 1, 30, 30, [], []]]], //10
["Minions", "Three fast, unarmored flying attackers. Roses are red, minions are blue, they can fly, and will crush you!", 3, [["minion", 190, 190, 84, 0, 0.5, 1.0, 2, 90, 2, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, -0.2, 1.0, 2, 90, 2, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]], ["minion", 190, 190, 84, 0.7, 1.2, 1.0, 2, 90, 2, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]]]], //11
["Minion Horde", "Six fast, unarmored flying attackers. Three's a crowd, six is a horde!", 5, [["minion", 190, 190, 84, 1.5, 0.5, 1.0, 2, 90, 2, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, -0.3, 1.0, 2, 90, 2, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, -0.3, 1.0, 2, 90, 2, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, -0.5, 0.5, 1.0, 2, 90, 2, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 0, 1.3, 1.0, 2, 90, 2, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]],["minion", 190, 190, 84, 1, 1.3, 1.0, 2, 90, 2, 5.5, 0, 30, 15, -1, false, 0, 0.0, "air", "all", 1, 30, 30, [], [["ps", 810.0001]]]]], //12
["Goblins", "Three fast, unarmored melee attackers. Small, fast, green and mean!", 2, [["goblin", 169, 169, 106, 0, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 27, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 169, 169, 106, 0.7, -0.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 27, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["goblin", 169, 169, 106, 0.7, 1.2, 1.0, 2, 120, 0.5, 5.5, 0, 33, 27, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //13
["Bomber", "Small, lightly protected skeleton that throws bombs. Deals area damage that can wipe out a swarm of enemies.", 3, [["bomber", 318, 318, 212, 0.5, 0.5, 1.0, 4, 60, 4.5, 5.5, 0, 60, 6, -1, false, 0, 1.5, "ground", "ground", 1, 30, 30, [], []]]], //14
["Elixir Collector", "You gotta spend Elixir to make Elixir.", 5, [["elixir collector", 1408, 1408, 0, 0.5, 0.5, 2, 0, 0, -1.0, -1.0, 0, 297, 297, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 2100], ["elixir", 297, 297]]]]], //15
["Witch", "Summons Skeletons, shoots destructo beams, has glowing pink eyes that unfortunately don't shoot lasers.", 5, [["witch", 665, 665, 46, 0.5, 0.5, 1.0, 4, 60, 5.0, 5.5, 0, 21, 15, -1, false, 0, 1, "ground", "all", 1, 30, 30, [], [["spawner", 30, 225, [["skeleton", 62, 62, 62, -0.7, 0.000001, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []], ["skeleton", 62, 62, 62, -0.7, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 1, 0, [], []], ["skeleton", 62, 62, 62, -0.7, -0.000001, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 2, 0, [], []]]], ["dspawn"]]]]], //16
["Goblin Hut", "Building that spawns Spear Goblins. But don't look inside. You don't want to see how they are made.", 5, [["goblin hut", 1232, 1232, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 147, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1800], ["spawner", 1, 147, [["spear goblin", 110, 110, 50, -0.5, 0, 1, 1, 120, 5, 5.5, 0, 39, 30, -1, false, 0, 0, "ground", "all", 1, 0, 0, [], []]]]]]]], //17
["Tombstone", "Troop building that periodically deploys Skeletons to fight the enemy. When destroyed, spawns 6 Skeletons. Creepy!", 3, [["tombstone", 352, 352, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 87, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1800], ["split", [["skeleton", 57, 57, 57, 1.5, 0.5, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 57, 57, 57, 1, -0.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 57, 57, 57, 0, -0.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 57, 57, 57, -0.5, 0.5, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 57, 57, 57, 0, 1.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []], ["skeleton", 57, 57, 57, 1, 1.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, []],]], ["spawner", 1, 87, [["skeleton", 57, 57, 57, -0.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 0, [], []]]]]]]], //18
["Inferno Tower", "Defensive building, roasts targets for damage that increases over time. Burns through even the biggest and toughest enemies!", 5, [["inferno tower", 1496, 1496, 35, 0.5, 0.5, 1.2, 0, 0, 6, 6, 0, 12, 108, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1800], ["inferno", 0, 60, 35, 132, 704]]]]], //19
["Prince", "Don't let the little pony fool you. Once the Prince gets a running start, you WILL be trampled. Deals double damage once he gets charging.", 5, [["prince", 1529, 1529, 292, 0.5, 0.5, 1.2, 6, 60, 1.6, 5.5, 0, 42, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["charge", 0, 2.5, 292, 60, 584, 140]]]]], //20
["Barbarians", "A horde of melee attackers with mean mustaches and even meaner tempers.", 5, [["barbarian", 657, 657, 159, 0, 0, 1.0, 4, 60, 0.7, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["barbarian", 657, 657, 159, 1, 0, 1.0, 4, 60, 0.7, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["barbarian", 657, 657, 159, 0, 1, 1.0, 4, 60, 0.7, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []], ["barbarian", 657, 657, 159, 1, 1, 1.0, 4, 60, 0.7, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], []]]], //21
["Archers", "A pair of lightly armored ranged attackers. They'll help you take down ground and air units, but you're on your own with coloring your hair.", 3, [["archer", 265, 265, 84, 0.5, 1.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 18, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []], ["archer", 265, 265, 84, 0.5, -0.1, 1.0, 3, 60, 5.0, 5.5, 0, 36, 18, -1, false, 0, 0.0, "ground", "all", 1, 30, 30, [], []]]], //22
["Fireball", "Annnnnd... Fireball. Incinerates a small area, dealing high damage. Reduced damage to Crown Towers.", 4, [["fireball", 0, 0, 572, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1.8], ["spell", 0.5]]]]]], "spell"], //23 (GOT EEM!)
["Arrows", "Arrows pepper a large area, damaging all enemies hit. Reduced damage to Crown Towers.", 3, [["arrows", 0, 0, 254, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["spell", [["spell", 0.5]]], ["ps", 1200]]]], "spell"], //24
["Rocket", "Deals high damage to a small area. Looks really awesome doing it. Reduced damage to Crown Towers.", 6, [["rocket", 0, 0, 1232, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2, "spell", "all", 1, 30, 10, [], [["spell", [["knockback", 1], ["spell", 0.5]]], ["ps", 500]]]], "spell"], //25
["Zap", "Lightning zaps enemies, dealing damage inside a small radius. Reduced damage to Crown Towers.", 2, [["zap", 0, 0, 169, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 10, [], [["instspell", [["spell", 0.5]]]]]], "spell"], //26
["Freeze", "Freezes troops and buildings, making them unable to move or attack. Everybody chill.", 4, [["freeze", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 186], ["spell"]]]]]], "spell"], //27
["Valkyrie", "Tough melee fighter, deals area damage around her. Swarm or horde, no problem! She can take them all out with a few spins.", 4, [["valkryie", 1408, 1408, 193, 0.5, 0.5, 1.0, 5, 60, 1, 5.5, 0, 48, 30, -1, false, 0, 1.6, "ground", "ground", 1, 30, 30, [], [["aoea", [["ground"]]]]]]], //28
["Giant Skeleton", "The bigger the skeleton, the bigger the bomb. Carries a bomb that blows up when the Giant Skeleton dies.", 6, [["giant skeleton", 2394, 2394, 133, 0.5, 0.5, 2.0, 15, 60, 0.8, 5.0, 0, 45, 15, -1, false, 0, 0.0, "ground", "ground", 1, 30, 30, [], [["resistance"], ["split", [["bomb", 10000, 10000, 957, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 2.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 957, 2, [["knockback", 1]]], ["lifetime", 30]]]]]]]]], //29
["Balloon", "As pretty as they are, you won't want a parade of THESE balloons showing up on the horizon. Drops powerful bombs and when shot down, crashes dealing area damage.", 5, [["balloon", 1330, 1330, 798, 0.5, 0.5, 1.0, 6, 60, 0.1, 7.7, 0, 90, 6, -1, false, 0, 0.0, "air", "buildings", 1, 30, 30, [], [["split", [["bomb", 10000, 10000, 133, 0, 0, 1.0, 0, 0, -1.0, -5.0, 0, 30000, 30000, -1, false, 0, 2.0, "bomb", "all", 1, 0, 0, [], [["ddmg", 272, 3, []], ["lifetime", 30]]]]]]]]], //30
["Bomb Tower", "Defensive building that houses a Bomber. Deals area damage to anything dumb enough to stand near it.", 5, [["bomb tower", 1584, 1584, 176, 0.5, 0.5, 1.2, 0, 0, 6.0, 6.0, 0, 54, 15, -1, false, 0, 1.5, "building", "ground", 1, 30, 30, [], [["lifetime", 1800], ["ps", 540]]]]], //31
["Golem", "Slow but durable, only attacks buildings. When destroyed, explosively splits into two Golemites and deals area damage!", 8, [["golem", 2926, 2926, 172, 0.5, 0.5, 1.5, 20, 45, 0.8, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 30, 90, [], [["ddmg", 172, 2, [["knockback", 1.8]]], ["resistance"], ["split", [["golemite", 1463, 1463, 86, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, 0.6]], [["ddmg", 86, 2, [["knockback", 1.8]]]]], ["golemite", 1463, 1463, 86, 0, 0, 1.0, 6, 45, 0.3, 7.0, 0, 75, 30, -1, false, 0, 0.0, "ground", "buildings", 1, 0, 6, [["knockback", 6, 6, 90, -0.6]], [["ddmg", 86, 2, [["knockback", 1.8]]]]]]], ["dsplit"]]]]], //32
["Rage", "Increases troop movement and attack speed. Buildings attack faster and summon troops quicker, too. Chaaaarge!", 3, [["rage", 0, 0, 0, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 4, "spell", "all", 1, 30, 10, [], [["instspell", [["rage", 60], ["time", 345], ["rage", 60], ["friendly"]]]]]], "spell"], //33
["Goblin Barrel", "Spawns three Goblins anywhere in the Arena. It's going to be a thrilling ride, boys!", 4, [["barrel", 0, 0, 66, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 1.5, "spell", "all", 1, 30, 10, [], [["spell", [["spawn", [["goblin", 186, 186, 116, 0.4, -0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 27, -1, false, 0, 0.0, "ground", "ground", 1, 0, 27, [], []], ["goblin", 186, 186, 116, 0.4, 0.5, 1.0, 2, 120, 0.5, 5.5, 0, 33, 27, -1, false, 0, 0.0, "ground", "ground", 1, 0, 27, [], []], ["goblin", 186, 186, 116, -0.5, 0, 1.0, 2, 120, 0.5, 5.5, 0, 33, 27, -1, false, 0, 0.0, "ground", "ground", 1, 0, 27, [], []], ]], ["spell", 0.5]]], ["ps", 600]]]], "spell"], //34
["Mortar", "Defensive building with a long range. Shoots big boulders that deal area damage, but cannot hit targets that get very close!", 6, [["mortar", 1272, 1272, 424, 0.5, 0.5, 1.2, 0, 0, 12.5, 12.5, 0, 150, 30, -1, false, 0, 1.8, "building", "ground", 1, 30, 90, [], [["sptrgt", [["ground"]]], ["mrange", 4.5], ["lifetime", 2400], ["ps", 630]]]]], //35
["Barbarian Hut", "Troop building that periodically deploys Barbarians to fight the enemy. Time to make the Barbarians", 7, [["hut", 1760, 1760, 0, 0.5, 0.5, 2.0, 0, 0, -1.0, -1.0, 0, 93, 30, -1, false, 0, 0.0, "building", "all", 1, 30, 30, [], [["lifetime", 1800], ["spawner", 1, 405, [["barbarian", 657, 657, 159, -0.7, 0, 1.0, 4, 60, 0.7, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 0, 0, [], []], ["barbarian", 657, 555, 159, -0.6, 0, 1.0, 4, 60, 0.7, 5.5, 0, 45, 12, -1, false, 0, 0.0, "ground", "ground", 1, 9, 0, [], []]]]]]]], //36
["Hog Rider", "Fast melee troop that targets buildings and can jump over the river. He followed the echoing call of \"Hog Riderrrrr\" all the way through the Arena doors.", 4, [["hog", 1408, 1408, 281, 0.5, 0.5, 1.2, 4, 120, 0.8, 9.5, 0, 45, 15, -1, false, 0, 0, "ground", "buildings", 1, 30, 30, [], [["jumping"]]]]], //37
["Skeleton Army", "Three fast, very weak melee fighters. Surround your enemies with this pile of bones!", 4, [["skeleton", 35, 35, 35, -1.25, -1.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, -0.3, -0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 1.9, -0.9, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 1.9, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 1.5, -2.3, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 1.1, -1.1, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 1.5, 0, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 0.4, -0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, -0.8, 0.7, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 0.5, 0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 1.65, 1.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 2.6, 2.2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 2.2, 0.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 1.35, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 0, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, -0.5, -0.8, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, -1.65, -1.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, -2.6, -2.2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 1.8, 0.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 0.95, 2.4, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []], ["skeleton", 35, 35, 35, 0, 2, 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 30, 30, []],]], //38
["Lightning", "Bolts of lightning damage up to three enemy troops or buildings with the most hitpoints in the target area. Reduced damage to Crown Towers.", 6, [["lightning", 0, 0, 864, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 3.5, "spell", "all", 1, 30, 10, [], [["instspell", [["stun", 0], ["tmr", 45], ["spell", 0.5], ["hit", 0, 3, 15, 15, []], ["stun", 0]], ["spell", 0.5]]]]], "spell"], //39
["Tesla", "Defensive building. Whenever it's not zapping the enemy, the power of Electrickery is best kept grounded.", 4, [["tesla", 890, 890, 127, 0.5, 0.5, 1.2, 0, 0, 5.5, 5.5, 0, 21, 57, -1, false, 0, 0, "building", "all", 1, 30, 30, [], [["hiding", -30, 15, 0, 12], ["lifetime", 1800], ["ps", 990]]]]], //40
["Mirror", "Mirrors your last card played for +1 Elixir.", 0, []], //41
];
};
}

//This is about as far as you want to edit, except if you're creating a new attribute/feature to the program.

cardsInit();

//Card select search
var searchCode = "";
var slot = 0;
var backS = "search";
var countmatch = 0;
var cardSelect = -1;
void keyPressed(){
    if(key >= 97 && key <= 122){
        var array = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
        searchCode += array[key-97];
        backS = "search";
    }
    else if(key+0 === 46){
        searchCode += ".";
        backS = "search";
    }
    else if(key+0 === 32){
        searchCode += " ";
        backS = "search";
    }
    else if(key >= 48 && key <= 57){
        slot = slot*10+(key-48);
        backS = "slot";
    }
    else{
        if(backS === "search"){
            searchCode = searchCode.substring(0, searchCode.length-1);
        }
        else{
            slot = floor(slot/10);
        }
    }
    countmatch = 0;
    var i = 0;
    var endSearch = false;
    while(i < cards.length && !endSearch){
        var strTest = cards[i][0].toLowerCase();
        var j = 0;
        var good = true;
        while(j < strTest.length && j < searchCode.length){
            if(strTest[j] !== searchCode[j]){
                good = false;
            }
            j++;
        }
        if(strTest.length < searchCode.length){
            good = false;
        }
        if(strTest.length === searchCode.length && good){
            countmatch = 0;
            endSearch = true;
        }
        if(good){
            countmatch++;
            cardSelect = i;
        }
        i++;
    }
    if(countmatch === 1 && keyCode === ENTER){
        if(br === "Blue" && slot < bDeck.length){
            bDeck[bOrder[slot]] = cardSelect;
        }
        else if(slot < rDeck.length){
            rDeck[rOrder[slot]] = cardSelect;
        }
        slot = 0;
        backS = "search";
    }
}

//Info tab
var infoTab = 1;

//Mirror
var lastCardB = -1;
var lastCardR = -1;

//["name", health, max, attack, x, y, size(diameter), mass, speed, range, srange, cool, maxCool, ret, target, lock, shield, aoe, type, targetType, penalty, load time, deploy time, [effects], [special]]

//Active troops on your team
var bTroops = [
["ctower", 4008, 4008, 90, 29, 9, 2.8, 0, 0, 7, 7, 0, 30, 15, -1, false, 180, 0, "building", "all", 1, 0, 0, []],
["ptower", 2534, 2534, 90, 25.5, 3.5, 2, 0, 0, 7.5, 7.5, 0, 24, 12, -1, false, 180, 0, "building", "all", 1, 0, 0, []],
["ptower", 2534, 2534, 90, 25.5, 14.5, 2, 0, 0, 7.5, 7.5, 0, 24, 12, -1, false, 180, 0, "building", "all", 1, 0, 0, []],
];

//Active troops on enemy team
var rTroops = [
["ctower", 4008, 4008, 90, 3, 9, 2.8, 0, 0, 7, 7, 0, 30, 15, -1, false, 0, 0, "building", "all", 1, 0, 0, []],
["ptower", 2534, 2534, 90, 6.5, 3.5, 2, 0, 0, 7.5, 7.5, 0, 24, 12, -1, false, 0, 0, "building", "all", 1, 0, 0, []],
["ptower", 2534, 2534, 90, 6.5, 14.5, 2, 0, 0, 7.5, 7.5, 0, 24, 12, -1, false, 0, 0, "building", "all", 1, 0, 0, []],
];

cardsInit();

var i = 0;
while(i < bDeck.length){
    var j = 0;
    var found = false;
    while(j < cards.length){
        if(bDeck[i] === cards[j][0]){
            bDeck[i] = j;
            found = true;
        }
        j++;
    }
    if(!found){
        bDeck[i] = 0;
    }
    bOrder.push(i);
    i++;
}
var i = 0;
while(i < rDeck.length){
    var j = 0;
    var found = false;
    while(j < cards.length){
        if(rDeck[i] === cards[j][0]){
            rDeck[i] = j;
            found = true;
        }
        j++;
    }
    if(!found){
        rDeck[i] = 0;
    }
    rOrder.push(i);
    i++;
}

//["name", x, y, target, damage, speed, aoe]

//Active targeting projectiles on your team
var bProj = [

];

//Active targeting projectiles on enemy team
var rProj = [
    
];

//["name", x, y, tx, ty, damage, speed, waitTime, aoe]

//Active non-targeting projectiles on your team
var bNProj = [
    
];

//Active non-targeting projectiles on enemy team
var rNProj = [
    
];

//Tagged for deletion
var bTDel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var rTDel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var bPDel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var rPDel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var bNPDel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var rNPDel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

//Tagged as about to commit die
var bTDed = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var rTDed = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

//Dist
var distance = function(x1, y1, x2, y2){
    var xdifb = x1 - x2;
    var ydifb = y1 - y2;
    var cdisb = sqrt(xdifb*xdifb+ydifb*ydifb);
};
var circleToRect = function(cx, cy, cr, rx, ry, rw, rh){
    var collide = false;
    var leftX = rx-rw/2;
    var topY = ry-rh/2;
    if(distance(cx, cy, leftX, topY) < cr){
        collide = true;
    }
    var rightX = rx+rw/2;
    if(distance(cx, cy, rightX, topY) < cr){
        collide = true;
    }
    var bottomY = ry+rh/2;
    if(distance(cx, cy, rightX, bottomY) < cr){
        collide = true;
    }
    if(distance(cx, cy, leftX, bottomY) < cr){
        collide = true;
    }
    //Rectangles
    //Left
    if(cy < bottomY && cy > topY && cx > leftX-cr && cx < leftX){
        collide = true;
    }
    //Right
    if(cy < bottomY && cy > topY && cx < rightX+cr && cx > rightX){
        collide = true;
    }
    //Top
    if(cy > topY-cr && cy < ry && cx > leftX && cx < rightX){
        collide = true;
    }
    //Bottom
    if(cy < bottomY+cr && cy > ry && cx > leftX && cx < rightX){
        collide = true;
    }
    return collide;
};
var angCircRect = function(cx, cy, cr, rx, ry, rw, rh){
    var ang = -1;
    var leftX = rx-rw/2;
    var topY = ry-rh/2;
    if(distance(cx, cy, leftX, topY) < cr){
        ang = degrees(atan2(topY-cy, leftX-cx));
    }
    var rightX = rx+rw/2;
    if(distance(cx, cy, rightX, topY) < cr){
        ang = degrees(atan2(topY-cy, rightX-cx));
    }
    var bottomY = ry+rh/2;
    if(distance(cx, cy, rightX, bottomY) < cr){
        ang = degrees(atan2(bottomY-cy, rightX-cx));
    }
    if(distance(cx, cy, leftX, bottomY) < cr){
        ang = degrees(atan2(bottomY-cy, leftX-cx));
    }
    //Rectangles
    //Left
    if(cy < bottomY && cy > topY && cx > leftX-cr && cx < leftX){
        ang = 180;
    }
    //Right
    if(cy < bottomY && cy > topY && cx < rightX+cr && cx > rightX){
        ang = 0;
    }
    //Top
    if(cy > topY-cr && cy < ry && cx > leftX && cx < rightX){
        ang = 90;
    }
    //Bottom
    if(cy < bottomY+cr && cy > ry && cx > leftX && cx < rightX){
        ang = 270;
    }
    return ang + 90;
};
//Shuffle
var shuffle = function(array) {
    for(var i = array.length - 1; i > 0; i--){
        var j = Math.floor(Math.random() * (i + 1));
        var t = array[i]; 
        array[i] = array[j]; 
        array[j] = t;
    }
};

if(reorder){
    shuffle(bOrder);
    shuffle(rOrder);
}

// POINT/CIRCLE
var pointCircle = function(px, py, cx, cy, r) {
    // get distance between the point and circle's center
    // using the Pythagorean Theorem
    var distX = px - cx;
    var distY = py - cy;
    var distance = sqrt( (distX*distX) + (distY*distY) );

    // if the distance is less than the circle's
    // radius the point is inside!
    if (distance <= r) {
        return true;
    }
    return false;
};

// LINE/POINT
var linePoint = function(x1, y1, x2, y2, px, py, b) {

    // get distance from the point to the two ends of the line
    var d1 = dist(px,py, x1,y1);
    var d2 = dist(px,py, x2,y2);

    // get the length of the line
    var lineLen = dist(x1,y1, x2,y2);

    // since floats are so minutely accurate, add
    // a little buffer zone that will give collision
    var buffer = 0.1 || b;    // higher # = less accurate

    // if the two distances are equal to the line's
    // length, the point is on the line!
    // note we use the buffer here to give a range,
    // rather than one #
    if (d1+d2 >= lineLen-buffer && d1+d2 <= lineLen+buffer) {
        return true;
    }
    return false;
};

// LINE/CIRCLE
var doesLineInterceptCircle = function(x1, y1, x2, y2, cx, cy, r) {

    // is either end INSIDE the circle?
    // if so, return true immediately
    var inside1 = pointCircle(x1,y1, cx,cy,r);
    var inside2 = pointCircle(x2,y2, cx,cy,r);
    if (inside1 || inside2){
        return true;
    }

    // get length of the line
    var distX = x1 - x2;
    var distY = y1 - y2;
    var len = sqrt( (distX*distX) + (distY*distY) );

    // get dot product of the line and circle
    var dot = ( ((cx-x1)*(x2-x1)) + ((cy-y1)*(y2-y1)) ) / pow(len,2);

    // find the closest point on the line
    var closestX = x1 + (dot * (x2-x1));
    var closestY = y1 + (dot * (y2-y1));

    // is this point actually on the line segment?
    // if so keep going, but if not, return false
    var onSegment = linePoint(x1,y1,x2,y2, closestX,closestY);
    if (!onSegment){
        return false;
    }

    // get distance to closest point
    distX = closestX - cx;
    distY = closestY - cy;
    var distance = sqrt( (distX*distX) + (distY*distY) );

    if (distance <= r) {
        return true;
    }
    return false;
};

//Frame number
var frame = 0;

//Terminal tabs
var tab = 0; 
//0-messages, 1-save, 2-push, 3-settings, 4-card info, 5-battle rules

//Tab animations
var tabs = [[0, 0], [16, 0], [16, 0], [16, 0], [16, 0], [16, 0]];

//Color animation
var colorD = [50, 50, 50];
var targetD = [50, 50, 50];

//Save states
var save1 = false;
var save2 = false;
var save3 = false;
var saveI1 = -1;
var saveI2 = -1;
var saveI3 = -1;
var counter = 0;

//All data
var dataSave = [];

//Difficulty
var difficulty = 0;

//Push creation
//[card, x, y, time]
var push = [];
var pushT = [];
var pushTmr = 0;
var pushCounter = 0;
var pushCur = 0;
var pushName = 0;
var reset = false;
var setDeck = false;
var setOrder = [];
var pushO = [];
var pushE = [];
var orderDeck = true;
var fRate = 1;
var pushInit = function(){
    push = [[["Spear Goblins", 12, 3, 30], ["Freeze", 25, 3, 120]], [["Goblin Gang", 12, 3, 30], ["Mini P.E.K.K.A.", 12, 13, 60]], [["Giant", 12, 3, 90], ["Witch", 9, 3, 30]], [["Battle Ram", 13, 13, 30], ["Spear Goblins", 13, 13, 90]], [["Ice Spirit", 13, 13, 30], ["Balloon", 13, 13, 90]], [["Skeleton Barrel", 12, 3, 30], ["Ice Golem", 12, 3, 60]], [["Goblins", 12, 8, 30]], [["Balloon", 12, 3, 30], ["Fireball", 23, 3, 120]], [["Lumberjack", 12, 3, 30], ["Battle Ram", 14, 3, 30]], [["Golem", 0, 7, 30], ["Night Witch", 0, 6, 150], ["Baby Dragon", 2, 4, 300]], [["Wall Breakers", 14, 3, 30]], [["Princess", 14, 3, 30], ["Goblin Barrel", 25, 14, 60]]];
    pushT = [300, 450, 600, 300, 300, 240, 60, 450, 450, 900, 90, 300]; //Time provided
    pushE = [5, 7, 9, 5, 5, 4]; //Elixir provided on resets
    pushTmr = 0;
    pushCounter = -1;
    pushCur = [];
    //More of a description.
    pushName = "Defend the pushes! This default scenario was created by Scholarly Gaming.";
    //Forced elixir rate
    fRate = 1;
    var i = 0;
    var tTime = 0;
    var tElixir = 0;
    while(i < push.length){
        var k = 0;
        while(k < push[i].length){
            var j = 0;
            while(j < cards.length){
                if(push[i][k][0] === cards[j][0]){
                    push[i][k][0] = j;
                    tElixir += cards[j][2];
                }
                j++;
            }
            k++;
        }
        tTime += pushT[i];
        setOrder.push(i);
        i++;
    }
    difficulty = (tElixir+push.length-4)/(tTime*fRate/84+5);
    reset = false;
    //Reset scenario every time a push is successfully defended
    setDeck = false;
    //Change this to an array like ["X-Bow", "Tesla", "Ice Wizard", "Ice Spirit", "Ice Golem", "Rocket", "Tornado", "Log"] to force a deck in push mode. Reset will make this be set for every push.
    orderDeck = false; 
    //Keep the deck's order, or shuffle it every time.
    var setOrder = []; //(Will be set automatically)
    if(setDeck !== false){
        while(i < setDeck.length){
            var j = 0;
            while(j < cards.length){
                if(setDeck[i] === cards[j][0]){
                    setDeck[i] = j;
                }
                j++;
            }
            setOrder.push(i);
            i++;
        }
    }
    //Flip some pushes?
    var flip = true;
    if(flip){
        var i = 0;
        while(i < push.length){
            var rand = floor(random(0, 2));
            if(rand === 1){
                var j = 0;
                while(j < push[i].length){
                    push[i][j][2] = 17-push[i][j][2];
                    j++;
                }
            }
            i++;
        }
    }
    var pushS = true; //Shuffle push?
    pushO = [];
    var i = 0;
    while(i < push.length){
        pushO.push(i);
        i++;
    }
    if(pushS){
        shuffle(pushO);
    }
    //pushO.unshift(push.length-1);
};
//pushInit();

//Messages system
var messages = ["0: Game started"];

var say = function(txt){
    messages.unshift(frame+": "+txt);
};

//Slow framerate to give time for calculation
frameRate(30);

textSize(10);

//Click tester
var click = false;
void mouseClicked(){
    click = true;
}

//Drag tester
var drag = false;
var dragOX = -1;
var dragOY = -1;
var dragDX = 0;
var dragDY = 0;

//Save tab
var dragST = 0;
var dragSD = 0;
var dragSDir = 0;

//States what tile it is
var getTileInfo = function(i, j){
    var type = "normal";
    //i distance from middle
    var trueI = abs(15.5-i)-0.5;
    //j distance from middle
    var trueJ = abs(8.5-j)-0.5;
    //Banned tiles (no cards can be placed centered on this tile, and troops cannot travel here)
    if(trueI === 15){
        if(j < 6 || j > 11){
            var type = "banned";
        }
    }
    //Crown Tower (spells and air troops can be placed here, but ground troops and other cards cannot go here)
    if(trueI > 10 && trueI < 15 && trueJ < 2){
        var type = "crown";
    }
    //Princess Tower (same as above)
    if(trueI > 7 && trueI < 11 && trueJ > 3 && trueJ < 7){
        var type = "princess";
    }
    //River (ground troops have to travel/be placed over rivers, air troops can go over it - marks midpoint and end of placable area until a tower is taken)
    if(trueI < 1){
        //Water
        if(trueJ < 5 || trueJ > 5){
            var type = "river";
        }
    }
    return type;
};

var arena = "default"; //"default", "dark", "ice"
var blueC = "blue"; //"blue", "purple", "orange", "green", "red"
var redC = "red"; //"blue", "purple", "orange", "green", "red"

//Fills tiles for arena [default]
var getTileFill = function(i, j){
    fill(250, 250, 250);
    if((i + j)%2 === 1){
        fill(246, 246, 246);
    }
    //i distance from middle
    var trueI = abs(15.5-i)-0.5;
    //j distance from middle
    var trueJ = abs(8.5-j)-0.5;
    //Banned tiles (no cards can be placed centered on this tile, and troops cannot travel here)
    if(trueI === 15){
        if(j < 6 || j > 11){
            fill(255, 200, 200);
        }
    }
    //Crown Tower (spells and air troops can be placed here, but ground troops and other cards cannot go here)
    if(trueI > 10 && trueI < 15 && trueJ < 2){
        fill(255, 255, 0);
    }
    //Princess Tower (same as above)
    if(trueI > 7 && trueI < 11 && trueJ > 3 && trueJ < 7){
        fill(255, 255, 0);
    }
    //River (ground troops have to travel/be placed over rivers, air troops can go over it - marks midpoint and end of placable area until a tower is taken)
    if(trueI < 1){
        //Bridges
        if(trueJ > 4 && trueJ < 6){
            fill(200, 100, 0);
        }
        //Water
        else{
            fill(0, 127, 255);
        }
    }
};
//Tiles [dark]
var getTileFillDark = function(i, j){
    fill(50, 50, 50);
    if((i + j)%2 === 1){
        fill(58, 58, 58);
    }
    //i distance from middle
    var trueI = abs(15.5-i)-0.5;
    //j distance from middle
    var trueJ = abs(8.5-j)-0.5;
    //Banned tiles (no cards can be placed centered on this tile, and troops cannot travel here)
    if(trueI === 15){
        if(j < 6 || j > 11){
            fill(100, 0, 0);
        }
    }
    //Crown Tower (spells and air troops can be placed here, but ground troops and other cards cannot go here)
    if(trueI > 10 && trueI < 15 && trueJ < 2){
        fill(100, 100, 100);
    }
    //Princess Tower (same as above)
    if(trueI > 7 && trueI < 11 && trueJ > 3 && trueJ < 7){
        fill(100, 100, 100);
    }
    //River (ground troops have to travel/be placed over rivers, air troops can go over it - marks midpoint and end of placable area until a tower is taken)
    if(trueI < 1){
        //Bridges
        if(trueJ > 4 && trueJ < 6){
            fill(80, 80, 80);
        }
        //Lava (dark theme, hello?)
        else{
            fill(200, 100, 0);
            if(j === floor(frame%80/4) || j === floor((frame+40)%80/4)){
                fill(204, 102, 0);
            }
        }
    }
};
//Tiles [ice]
var getTileFillIce = function(i, j){
    fill(220, 220, 250);
    if((i + j)%2 === 1){
        fill(216, 216, 246);
    }
    //i distance from middle
    var trueI = abs(15.5-i)-0.5;
    //j distance from middle
    var trueJ = abs(8.5-j)-0.5;
    //Banned tiles (no cards can be placed centered on this tile, and troops cannot travel here)
    if(trueI === 15){
        if(j < 6 || j > 11){
            fill(200, 200, 255);
        }
    }
    //Crown Tower (spells and air troops can be placed here, but ground troops and other cards cannot go here)
    if(trueI > 10 && trueI < 15 && trueJ < 2){
        fill(225, 225, 250);
    }
    //Princess Tower (same as above)
    if(trueI > 7 && trueI < 11 && trueJ > 3 && trueJ < 7){
        fill(225, 225, 250);
    }
    //River (ground troops have to travel/be placed over rivers, air troops can go over it - marks midpoint and end of placable area until a tower is taken)
    if(trueI < 1){
        //Bridges
        if(trueJ > 4 && trueJ < 6){
            fill(200, 100, 150);
        }
        //Water
        else{
            fill(245, 245, 255);
        }
    }
};
//Tiles (royal)
var getTileFillRoyal = function(i, j){
    fill(100, 200, 100);
    if((i + j)%2 === 1){
        fill(100, 196, 100);
    }
    //i distance from middle
    var trueI = abs(15.5-i)-0.5;
    //j distance from middle
    var trueJ = abs(8.5-j)-0.5;
    if(trueJ === 5 && trueI < 12){
        fill(244, 244, 0);
        if((i + j)%2 === 1){
            fill(240, 240, 0);
        }
    }
    if(trueI === 12 && trueJ < 6){
        fill(244, 244, 0);
        if((i + j)%2 === 1){
            fill(240, 240, 0);
        }
    }
    //Banned tiles (no cards can be placed centered on this tile, and troops cannot travel here)
    if(trueI === 15){
        if(j < 6 || j > 11){
            fill(150, 150, 150);
        }
    }
    //Crown Tower (spells and air troops can be placed here, but ground troops and other cards cannot go here)
    if(trueI > 10 && trueI < 15 && trueJ < 2){
        fill(244, 244, 0);
    }
    //Princess Tower (same as above)
    if(trueI > 7 && trueI < 11 && trueJ > 3 && trueJ < 7){
        fill(244, 244, 0);
    }
    //River (ground troops have to travel/be placed over rivers, air troops can go over it - marks midpoint and end of placable area until a tower is taken)
    if(trueI < 1){
        //Bridges
        if(trueJ > 4 && trueJ < 6){
            fill(244, 244, 0);
            if((i + j)%2 === 1){
                fill(240, 240, 0);
            }
        }
        //Water
        else{
            fill(0, 127, 255);
            if(j === floor(frame%80/4) || j === floor((frame+40)%80/4)){
                fill(0, 125, 250);
            }
        }
    }
};



//For tile position to graphics position.
var tg = function(t){
    return t*15+60;
};

//For easier typing and scaling if I so choose.
var mX;
var mY;

var getTileOver = function(){
    if(mX < 60 || mY < 60 || mX > 330 || mY > 540){
        return null;
    }
    return [floor((mY-60)/15), floor((mX-60)/15)];
};

var i = 0;
var warnings = 0;
while(i < cards.length){
    var j = cards[i][3].length-1;
    while(j >= 0){
        if(cards[i][3][j][0].length < 2){
            say(cards[i][0]+" troop "+j+"-Name");
            say("Short names may cause some issues.");
            warnings++;
        }
        if(cards[i][3][j][1] !== cards[i][3][j][2]){
            say(cards[i][0]+" troop "+j+"-HP");
            say("Spawn: "+cards[i][3][j][1]+" Max: "+cards[i][3][j][2]);
            warnings++;
        }
        if(cards[i][3][j][9] > cards[i][3][j][10]){
            say(cards[i][0]+" troop "+j+"-Range");
            say("Range: "+cards[i][3][j][9]+" Sight: "+cards[i][3][j][10]);
            warnings++;
        }
        if(cards[i][3][j][6] < 0){
            say(cards[i][0]+" troop "+j+"-Diameter");
            say("Diameter: "+cards[i][3][j][6]+" (<0)");
            warnings++;
        }
        if(cards[i][3][j][7] > 1000){
            say(cards[i][0]+" troop "+j+"-Mass");
            say("Mass: "+cards[i][3][j][6]+" (>1000)");
            say("Try using 0 for infinite mass.");
            warnings++;
        }
        if(cards[i][3][j][24] !== undefined){
            var k = cards[i][3][j][24].length-1;
            while(k >= 0){
                var a = cards[i][3][j][24][k];
                if(a !== undefined){
                    if(a[0] === "chain" && a.length < 5){
                        say(cards[i][0]+" troop "+j+"-Chain");
                        say("Don't forget the [] for targeting!");
                        warnings++;
                    }
                    if((a[0] === "mrange" || a[0] === "defender" || a[0] === "recoil" || a[0] === "stun" || a[0] === "slow" || a[0] === "snare" || a[0] === "spread") && a[1] <= 0){
                        say(cards[i][0]+" troop "+j+"-"+a[0]);
                        say("This attribute isn't used!");
                        warnings++;
                    }
                    if(a[0] === "ps" && a[1] <= 50){
                        say(cards[i][0]+" troop "+j+"-PSpeed");
                        say("Extremely low projectile speed("+a[1]+")!");
                        warnings++;
                    }
                    if(a[0] === "lifetime" && a[1] === 0){
                        say(cards[i][0]+" troop "+j+"-Lifetime");
                        say("Lifetime of 0 will cause a crash!");
                        warnings++;
                    }
                    if((a[0] === "pull" || a[0] === "jump" || a[0] === "dash") && a[1] > a[2]){
                        say(cards[i][0]+" troop "+j+"-"+a[0]);
                        say("Minimum range is larger than max range!");
                        warnings++;
                    }
                    if(a[0] === "mrange" && cards[i][3][j][9] < a[1]){
                        say(cards[i][0]+" troop "+j+"-"+a[0]);
                        say("Minimum range is larger than max range!");
                        warnings++;
                    }
                    if((a[0] === "hitp" || a[0] === "sdmg" || a[0] === "ddmg") && a[2] <= 0){
                        say(cards[i][0]+" troop "+j+"-"+a[0]);
                        say("This attribute isn't used!");
                        warnings++;
                    }
                }
                k--;
            }
        }
        j--;
    }
    i++;
}
if(warnings > 0){
    say(warnings+" card warnings");
}

cursor("none");

/**
//Drag tester
var drag = false;
var dragOX = -1;
var dragOY = -1;
var dragDX = 0;
var dragDY = 0;

//Save tab
var dragST = 0;
**/

var mouseP = false;
void mousePressed(){
    mouseP = true;
}
void mouseReleased(){
    mouseP = false;
}

void draw(){
    cardsInit();
    
    //Frame number
    frame++;
    
    //Scaling help
    mX = mouseX;
    mY = mouseY;
    
    //Scaling
    if(width !== 600 || height !== 600){
        resetMatrix();
        scale(width/600, height/600);
        mX *= 600/width;
        mY *= 600/height;
    }
    
    if(mouseP){
        if(drag === false){
            dragOX = mX;
            dragOY = mY;
        }
        drag = true;
        dragDX = mX-dragOX;
        dragDY = mY-dragOY;
    }
    else{
        drag = false;
    }
    
    
    //Background
    background(200, 200, 200);
    
    //Draw the arena
    strokeWeight(1);
    stroke(0, 0, 0);
    rect(59, 59, 271, 481);
    noStroke();
    var i = 0;
    var j = 0;
    //Draw the arena tiles
    if(testing){
        textAlign(CENTER, CENTER);
        if(arena === "default"){
            while(i < 32){
                while(j < 18){
                    getTileFill(i, j);
                    rect(60+15*j, 60+15*i, 15, 15);
                    fill(0, 0, 0, 30);
                    text(getTileInfo(i, j)[0], 67.5+15*j, 67.5+15*i);
                    j++;
                }
                i++;
                j = 0;
            }
        }
        else if(arena === "dark"){
            while(i < 32){
                while(j < 18){
                    getTileFillDark(i, j);
                    rect(60+15*j, 60+15*i, 15, 15);
                    fill(0, 0, 0, 30);
                    text(getTileInfo(i, j)[0], 67.5+15*j, 67.5+15*i);
                    j++;
                }
                i++;
                j = 0;
            }
        }
        else if(arena === "ice"){
            while(i < 32){
                while(j < 18){
                    getTileFillIce(i, j);
                    rect(60+15*j, 60+15*i, 15, 15);
                    fill(0, 0, 0, 30);
                    text(getTileInfo(i, j)[0], 67.5+15*j, 67.5+15*i);
                    j++;
                }
                i++;
                j = 0;
            }
        }
        else if(arena === "royal"){
            while(i < 32){
                while(j < 18){
                    getTileFillRoyal(i, j);
                    rect(60+15*j, 60+15*i, 15, 15);
                    fill(0, 0, 0, 30);
                    text(getTileInfo(i, j)[0], 67.5+15*j, 67.5+15*i);
                    j++;
                }
                i++;
                j = 0;
            }
        }
        textAlign(LEFT, BASELINE);
    }
    else{
        //Different arenas
        if(arena === "default"){
            while(i < 32){
                while(j < 18){
                    getTileFill(i, j);
                    rect(60+15*j, 60+15*i, 15, 15);
                    j++;
                }
                i++;
                j = 0;
            }
        }
        else if(arena === "dark"){
            while(i < 32){
                while(j < 18){
                    getTileFillDark(i, j);
                    rect(60+15*j, 60+15*i, 15, 15);
                    j++;
                }
                i++;
                j = 0;
            }
        }
        else if(arena === "ice"){
            while(i < 32){
                while(j < 18){
                    getTileFillIce(i, j);
                    rect(60+15*j, 60+15*i, 15, 15);
                    j++;
                }
                i++;
                j = 0;
            }
        }
        else if(arena === "royal"){
            while(i < 32){
                while(j < 18){
                    getTileFillRoyal(i, j);
                    rect(60+15*j, 60+15*i, 15, 15);
                    j++;
                }
                i++;
                j = 0;
            }
        }
    }
    
    //Take care of troops that are out of bounds
    var i = rTroops.length-1;
    while(i > -1){
        var data = rTroops[i];
        var rad = data[6]/2;
        if(data[4] < rad){
            data[4] = rad;
        }
        if(data[4] > 32-rad){
            data[4] = 32-rad;
        }
        if(data[5] < rad){
            data[5] = rad;
        }
        if(data[5] > 18-rad){
            data[5] = 18-rad;
        }
        if((data[21] >= 26 && data[22] >= 30) && data[4] > 21.25-rad){
            data[4] = 21.25-rad;
        }
        if((data[21] >= 26 && data[22] >= 30) && data[4] > 15.25-rad && data[4] < 16.25-rad && (data[5] < 2.9 || data[5] > 15.1 || (data[5] > 4.1 && data[5] < 13.9))){
            data[4] = 15.25-rad;
        }
        i--;
    }
    var i = bTroops.length-1;
    while(i > -1){
        var data = bTroops[i];
        var rad = data[6]/2;
        if(data[4] < rad){
            data[4] = rad;
        }
        if(data[4] > 32-rad){
            data[4] = 32-rad;
        }
        if(data[5] < rad){
            data[5] = rad;
        }
        if(data[5] > 18-rad){
            data[5] = 18-rad;
        }
        if((data[21] >= 26 && data[22] >= 30) && data[4] < 10.75+rad){
            data[4] = 10.75+rad;
        }
        if((data[21] >= 26 && data[22] >= 30) && data[4] < 16.75+rad && data[4] > 15.75+rad && (data[5] < 2.9 || data[5] > 15.1 || (data[5] > 4.1 && data[5] < 13.9))){
            data[4] = 16.75+rad;
        }
        //println(data[21]);
        i--;
    }
    
    //Collision setup / deal with spells
    var noCollisionR = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var i = rTroops.length-1;
    while(i > -1){
        if(rTroops[i] !== "null"){
            var effectD = rTroops[i][23];
            if(rTroops[i][18] === "spell"){
                effectD.push(["uinvulnerable", 100]);
                effectD.push(["nontargetable", 100]);
            }
            var j = effectD.length-1;
            while(j > -1){
                var d = effectD[j];
                if(d[0] === "knockback" && d[1] > 0){
                    noCollisionR[i] = true;
                }
                if(d[0] === "noCol" && d[1] > 0){
                    noCollisionR[i] = true;
                }
                j--;
            }
        }
        i--;
    }
    var noCollisionB = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var i = bTroops.length-1;
    while(i > -1){
        //println(i);
        if(bTroops[i] !== "null"){
            var effectD = bTroops[i][23];
            if(bTroops[i][18] === "spell"){
                effectD.push(["uinvulnerable", 100]);
                effectD.push(["nontargetable", 100]);
            }
            var j = effectD.length-1;
            while(j > -1){
                var d = effectD[j];
                if(d[0] === "knockback" && d[1] > 0){
                    noCollisionB[i] = true;
                }
                if(d[0] === "noCol" && d[1] > 0){
                    noCollisionB[i] = true;
                }
                j--;
            }
        }
        i--;
    }
    
    //Mass time! Yay!
    var i = rTroops.length;
    if(i > 0){
        i--;
        var bl = bTroops.length-1;
        while(i > -1){
            var j = bl;
            while(j > -1){
                var r = rTroops[i];
                var b = bTroops[j];
                if(!noCollisionR[i] && !noCollisionB[j] && b[21] <= 0 && r[21] <= 0 && ((r[18] === "bomb" && b[18] === "ground") || (b[18] === "bomb" && r[18] === "ground") || (r[18] === "building" && b[18] === "ground") || (b[18] === "building" && r[18] === "ground") || (r[18] === "uground" && b[18] === "ground") || (b[18] === "uground" && r[18] === "ground") || (b[18] === r[18]))){
                    var xd = r[4]-b[4];
                    var yd = r[5]-b[5];
                    var dista = sqrt((xd*xd)+(yd*yd));
                    var move = dista-(r[6]+b[6])/2;
                    if(move < -0.01){
                        var rm = r[7] || 9999999999999999999999999999;
                        var bm = b[7] || 9999999999999999999999999999;
                        var t = rm+bm;
                        rm /= t;
                        bm /= t;
                        var ang = degrees(atan2(yd, xd));
                        if(r[7] !== 0){
                            r[5] = r[5] - bm*move*sin(radians(ang));
                            r[4] = r[4] - bm*move*cos(radians(ang));
                        }
                        if(b[7] !== 0){
                            b[5] = b[5] + rm*move*sin(radians(ang));
                            b[4] = b[4] + rm*move*cos(radians(ang));
                        }
                    }
                }
                j--;
            }
            i--;
        }
    }
    var i = bTroops.length;
    if(i > 0){
        i--;
        var bl = bTroops.length-1;
        while(i > -1){
            var j = bl;
            while(j > -1){
                var r = bTroops[i];
                var b = bTroops[j];
                if(!noCollisionB[i] && !noCollisionB[j] && b[21] <= 0 && r[21] <= 0 && i !== j  && ((r[18] === "bomb" && b[18] === "ground") || (b[18] === "bomb" && r[18] === "ground") || (r[18] === "building" && b[18] === "ground") || (b[18] === "building" && r[18] === "ground") || (r[18] === "uground" && b[18] === "ground") || (b[18] === "uground" && r[18] === "ground") || (b[18] === r[18]))){
                    var xd = r[4]-b[4];
                    var yd = r[5]-b[5];
                    var dista = sqrt((xd*xd)+(yd*yd));
                    var move = dista-(r[6]+b[6])/2;
                    if(move < -0.01){
                        var rm = r[7] || 9999999999999999999999999999;
                        var bm = b[7] || 9999999999999999999999999999;
                        var t = rm+bm;
                        rm /= t;
                        bm /= t;
                        var ang = degrees(atan2(yd, xd));
                        if(r[7] !== 0){
                            r[5] = r[5] - bm*move*sin(radians(ang));
                            r[4] = r[4] - bm*move*cos(radians(ang));
                        }
                        if(b[7] !== 0){
                            b[5] = b[5] + rm*move*sin(radians(ang));
                            b[4] = b[4] + rm*move*cos(radians(ang));
                        }
                    }
                }
                j--;
            }
            i--;
        }
    }
    var i = rTroops.length;
    if(i > 0){
        i--;
        var bl = rTroops.length-1;
        while(i > -1){
            var j = bl;
            while(j > -1){
                var r = rTroops[i];
                var b = rTroops[j];
                if(!noCollisionR[i] && !noCollisionR[j] && b[21] <= 0 && r[21] <= 0 && i !== j && ((r[18] === "bomb" && b[18] === "ground") || (b[18] === "bomb" && r[18] === "ground") || (r[18] === "building" && b[18] === "ground") || (b[18] === "building" && r[18] === "ground") || (r[18] === "uground" && b[18] === "ground") || (b[18] === "uground" && r[18] === "ground") || (b[18] === r[18]))){
                    var xd = r[4]-b[4];
                    var yd = r[5]-b[5];
                    var dista = sqrt((xd*xd)+(yd*yd));
                    var move = dista-(r[6]+b[6])/2;
                    if(move < -0.01){
                        var rm = r[7] || 9999999999999999999999999999;
                        var bm = b[7] || 9999999999999999999999999999;
                        var t = rm+bm;
                        rm /= t;
                        bm /= t;
                        var ang = degrees(atan2(yd, xd));
                        if(r[7] !== 0){
                            r[5] = r[5] - bm*move*sin(radians(ang));
                            r[4] = r[4] - bm*move*cos(radians(ang));
                        }
                        if(b[7] !== 0){
                            b[5] = b[5] + rm*move*sin(radians(ang));
                            b[4] = b[4] + rm*move*cos(radians(ang));
                        }
                    }
                }
                j--;
            }
            i--;
        }
    }
    
    //NOTE: This has redundant code in order to help with frame rates. We don't need any more if checks than we already have above.
    
    //Check to see if we can do a culling
    var cull = true;
    
    //Enemy troops
    var i = rTroops.length;
    if(i > 0){
        i--;
        while(i > -1){
            //["name", health, max, attack{3,} x, y, size(diameter), mass{7,} speed, range, srange, cool{11,} maxCool, ret, target, lock{15,} shield, aoe, type, targetType{19,} penalty, load time, deploy time, [effects], [special]]
            //Get information about troop
            var data = rTroops[i];
            
            //Set up splitting
            var split = false;
            
            //Set up death elixir (Elixir Golem)
            var dElix = false;
            
            //Set up kamikaze
            var kami = false;
            
            //Set up zap attack
            var zap = 0;
            
            if(data !== "null"){
            if(data[21] <= 0){
            //Draw troop
            var colorR, colorG, colorB;
            if(redC === "red"){
                colorR = 255;
                colorG = 0;
                colorB = 0;
            }
            else if(redC === "purple"){
                colorR = 255;
                colorG = 0;
                colorB = 127;
            }
            else if(redC === "orange"){
                colorR = 255;
                colorG = 127;
                colorB = 0;
            }
            else if(redC === "green"){
                colorR = 0;
                colorG = 200;
                colorB = 0;
            }
            else if(redC === "blue"){
                colorR = 0;
                colorG = 0;
                colorB = 255;
            }
            var effectD = data[23];
            var j = -1;
            if(effectD !== undefined){
                j = effectD.length-1;
            }
            var slowd = false;
            var stund = false;
            var snard = false;
            var ragd = false;
            var clond = false;
            while(j > -1){
                var d = effectD[j];
                if(d[0] === "stun" && d[1] > 0 && !stund){
                    colorR += 100;
                    colorG += 100;
                    colorB -= 100;
                    stund = true;
                }
                if(d[0] === "slow" && d[1] > 0 && !slowd){
                    colorR -= 100;
                    colorG += 100;
                    colorB += 100;
                    slowd = true;
                }
                if(d[0] === "snare" && d[1] > 0 && !snard){
                    colorG += 100;
                    colorR -= 100;
                    colorB -= 100;
                    snard = true;
                }
                if(d[0] === "rage" && d[1] > 0 && !ragd){
                    colorR += 100;
                    colorB += 100;
                    colorG -= 100;
                    ragd = true;
                }
                if(d[0] === "cloned" && !clond){
                    colorG += 200;
                    colorB -= 50;
                    colorR -= 50;
                    clond = true;
                }
                j--;
            }
            fill(colorR, colorG, colorB, 60);
            ellipse(tg(data[5]), tg(data[4]), data[6]*15, data[6]*15);
            if(viewAng){
                ellipse(tg(data[5])+(data[6]*7.5+3)*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+3)*cos(radians(data[16])), 3, 3);
            }
            if(viewReload){
                noFill();
                strokeWeight(1);
                stroke(colorR, colorG, colorB, 100);
                arc(tg(data[5]), tg(data[4]), data[6]*15, data[6]*15, data[16], 360+data[16]-360*data[11]/data[12]);
                noStroke();
            }
            //Specific graphics
            if(extGraphics === true){
                fill(colorR, colorG, colorB, 60);
                var hand = -4*(0.5-data[11]/data[12])*(data[11]/data[12]-0.5);
                if(data[11] === 0 && !data[15]){
                    hand = 0;
                }
                if(data[0] === "minion" || data[0] === "skeleton" || data[0] === "golemite" || data[0] === "elixir golemite" || data[0] === "blob"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                }
                if(data[0] === "mega minion" || data[0] === "brawler"){
                    ellipse(tg(data[5])+(data[6]*7.5+1.5+6*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1.5+6*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1.5)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1.5)*cos(radians(data[16]+30)), 3, 3);
                }
                if(data[0] === "giant" || data[0] === "golem" || data[0] === "elixir golem" || data[0] === "ice golem"){
                    ellipse(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-30)), 6, 6);
                    ellipse(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]+30)), 6, 6);
                }
                if(data[0] === "goblin" || data[0] === "mini pekka" || data[0] === "knight" || data[0] === "barbarian" || data[0] === "healer"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "elite barbarian"){
                    ellipse(tg(data[5])+(data[6]*7.5)*sin(radians(data[16]-20)), tg(data[4])+(data[6]*7.5)*cos(radians(data[16]-20)), 2, 2);
                    ellipse(tg(data[5])+(data[6]*7.5)*sin(radians(data[16]+20)), tg(data[4])+(data[6]*7.5)*cos(radians(data[16]+20)), 2, 2);
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-40)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-40)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+40)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+40)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-40)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-40)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-40))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-40))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "guard" || data[0] === "recruit"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])));
                    line(tg(data[5])+(data[6]*7.5+2)*sin(radians(data[16]+30))+3*sin(radians(data[16]+90)), tg(data[4])+(data[6]*7.5+2)*cos(radians(data[16]+30))+3*cos(radians(data[16]+90)), tg(data[5])+(data[6]*7.5+2)*sin(radians(data[16]+30))-3*sin(radians(data[16]+90)), tg(data[4])+(data[6]*7.5+2)*cos(radians(data[16]+30))-3*cos(radians(data[16]+90)));
                    noStroke();
                }
                if(data[0] === "goblin giant" || data[0] === "pekka"){
                    ellipse(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-30)), 6, 6);
                    ellipse(tg(data[5])+(data[6]*7.5+2)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+2)*cos(radians(data[16]+30)), 6, 6);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(2);
                    line(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-30))+8*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-30))+8*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "musketeer"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+15)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+15)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(4);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "dart goblin"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-10)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-10)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]+10)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]+10)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(3);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16])), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "flying machine"){
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(5);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16])), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]))+3*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]))+3*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "hunter"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+15)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+15)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(4);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15))+3*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15))+3*cos(radians(data[16])));
                    noStroke();
                }
                //["Hunter", "Sparky", "Zappies", "Baby Dragon", "Royal Giant", "Goblin Giant", "Battle Healer", "Goblin Gang"]
                if(data[0] === "zappy"){
                    noFill();
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    ellipse(tg(data[5]), tg(data[4]), data[6]*11, data[6]*11);
                    ellipse(tg(data[5]), tg(data[4]), data[6]*7, data[6]*7);
                    noStroke();
                }
                if(data[0] === "sparky"){
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(2);
                    if((data[11]/data[12] > 0.7 && !data[15]) || ((data[11]-data[13])/data[12] > 0.7 && data[15])){
                        stroke(colorR, colorG, colorB, 30);
                    }
                    line(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]))+10*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]))+10*cos(radians(data[16]-90)), tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]))-10*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]))-10*cos(radians(data[16]-90)));
                    if((data[11]/data[12] > 0.4 && !data[15]) || ((data[11]-data[13])/data[12] > 0.4 && data[15])){
                        stroke(colorR, colorG, colorB, 30);
                    }
                    line(tg(data[5])+(data[6]*7.5+4)*sin(radians(data[16]))+7*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+4)*cos(radians(data[16]))+7*cos(radians(data[16]-90)), tg(data[5])+(data[6]*7.5+4)*sin(radians(data[16]))-7*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+4)*cos(radians(data[16]))-7*cos(radians(data[16]-90)));
                    if((data[11]/data[12] > 0.1 && !data[15]) || ((data[11]-data[13])/data[12] > 0.1 && data[15])){
                        stroke(colorR, colorG, colorB, 30);
                    }
                    line(tg(data[5])+(data[6]*7.5+7)*sin(radians(data[16]))+4*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+7)*cos(radians(data[16]))+4*cos(radians(data[16]-90)), tg(data[5])+(data[6]*7.5+7)*sin(radians(data[16]))-4*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+7)*cos(radians(data[16]))-4*cos(radians(data[16]-90)));
                    noStroke();
                }
                if(data[0] === "royal giant"){
                    ellipse(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+1+8*hand)*cos(radians(data[16]-15)), 6, 6);
                    ellipse(tg(data[5])+(data[6]*7.5+2)*sin(radians(data[16]+15)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+15)), 6, 6);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(4);
                    line(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-15)), tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-15))+7*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-15))+7*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "spear goblin" || data[0] === "prince"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])), 2, 2);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "hog"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])), 4, 4);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "witch" || data[0] === "night witch"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])));
                    //Horns of staff
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16]))+sin(radians(data[16]-20)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16]))+cos(radians(data[16]-20)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16]))+5*sin(radians(data[16]-20)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16]))+5*cos(radians(data[16]-20)));
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16]))+sin(radians(data[16]+20)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16]))+cos(radians(data[16]+20)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16]))+5*sin(radians(data[16]+20)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16]))+5*cos(radians(data[16]+20)));
                    noStroke();
                }
            }
            //Health
            if(data[0] === "ctower" || data[0] === "ptower"){
                fill(0, 0, 0, 100);
                rect(tg(data[5])-data[6]*10, tg(data[4])-data[6]*12.5, data[6]*20, data[6]*4);
                if(redC === "red"){
                    fill(255, 0, 0, 100);
                }
                else if(redC === "purple"){
                    fill(255, 0, 127, 100);
                }
                else if(redC === "orange"){
                    fill(255, 127, 0, 100);
                }
                else if(redC === "green"){
                    fill(0, 200, 0, 100);
                }
                else if(redC === "blue"){
                    fill(0, 0, 255, 100);
                }
                rect(tg(data[5])-data[6]*10, tg(data[4])-data[6]*12.5, data[6]*20*data[1]/data[2], data[6]*4);
                textSize(data[6]*4);
                fill(255, 255, 255, 200);
                text(data[1], tg(data[5])-data[6]*10, tg(data[4])-data[6]*9+0.5);
            }
            //or name
            else{
                if(data[1] !== data[2]){
                    fill(0, 0, 0, 100);
                    rect(tg(data[5])-data[6]*5, tg(data[4])-data[6]*9.5, data[6]*10, data[6]*2);
                    if(redC === "red"){
                        fill(255, 0, 0, 100);
                    }
                    else if(redC === "purple"){
                        fill(255, 0, 127, 100);
                    }
                    else if(redC === "orange"){
                        fill(255, 127, 0, 100);
                    }
                    else if(redC === "green"){
                        fill(0, 200, 0, 100);
                    }
                    else if(redC === "blue"){
                        fill(0, 0, 255, 100);
                    }
                    rect(tg(data[5])-data[6]*5, tg(data[4])-data[6]*9.5, data[6]*10*data[1]/data[2], data[6]*2);
                }
                fill(0, 0, 0, 200);
                textAlign(CENTER, CENTER);
                textSize(10);
                text(data[0][0]+data[0][1], tg(data[5]), tg(data[4]));
            }
            
            var kbResist = false;
            var mirrored = false;
            var mt1 = false;
            var amt1 = false;
            //Because spawners are being stupid for some reason.
            var am = false;
            //Snowflake checker for KB resistance and mirror
            if(data.length === 25){
                var specialD = data[24];
                var j = specialD.length-1;
                while(j > -1){
                    var d = specialD[j];
                    if(d[0] === "resistance"){
                        kbResist = true;
                    }
                    if(d[0] === "mirror"){
                        mirrored = true;
                        if(d[1] === false){
                            //Mirror bois
                            data[1] = round(data[1]*1.1);
                            data[2] = round(data[2]*1.1);
                            data[3] = round(data[3]*1.1);
                            mt1 = true;
                            d[1] = true;
                        }
                        if(amt1 === "testing"){
                            amt1 = true;
                            data[1] = round(data[1]*10/11);
                            data[2] = round(data[2]*10/11);
                            data[3] = round(data[3]*10/11);
                            mirrored = false;
                            specialD.splice(j, 1);
                        }
                    }
                    if(d[0] === "antimirror"){
                        am = true;
                        if(d[1] === false){
                            amt1 = "testing";
                            d[1] = true;
                        }
                    }
                    j--;
                }
            }
            
            //Check for stunned
            var stunned = false;
            //Check for slowed
            var slowed = false;
            //Check for raged
            var raged = false;
            //Check for KB
            var kb = false;
            //Check for snare
            var snared = false;
            //Check for cloned
            var cloned = false;
            
            //Effect checker
            var effectD = data[23];
            var j = -1;
            if(effectD !== undefined){
                j = effectD.length-1;
            }
            while(j > -1){
                var d = effectD[j];
                if(d[0] === "stun" && d[1] > 0){
                    stunned = true;
                    d[1]--;
                    data[14] = -1;
                    data[15] = false;
                }
                if(d[0] === "knockback" && d[1] > 0){
                    //["knockback", time, mtime, dir, dist]
                    d[1]--;
                    if(!kbResist){
                        kb = true;
                        if(!data[6]){
                            data[15] = false;
                        }
                        else{
                            data[11]--;
                        }
                        data[4] += cos(radians(d[3]))*d[4]/d[2];
                        data[5] += sin(radians(d[3]))*d[4]/d[2];
                    }
                    else{
                        d[1] = 0;
                    }
                }
                if(d[0] === "sudoKnockback" && d[1] > 0){
                    //["knockback", time, mtime, dir, dist]
                    d[1]--;
                    kb = true;
                    if(!data[6]){
                        data[15] = false;
                    }
                    else{
                        data[11]--;
                    }
                    data[4] += cos(radians(d[3]))*d[4]/d[2];
                    data[5] += sin(radians(d[3]))*d[4]/d[2];
                }
                if(d[0] === "slow" && d[1] > 0){
                    slowed = true;
                    d[1]--;
                }
                if(d[0] === "snare" && d[1] > 0){
                    snared = true;
                    d[1]--;
                }
                if(d[0] === "rage" && d[1] > 0){
                    if(raged){
                        effectD.splice(j, 1);
                    }
                    raged = true;
                    d[1]--;
                }
                if(d[0] === "nontargetable" && d[1] > 0){
                    d[1]--;
                }
                if(d[0] === "invulnerable" && d[1] > 0){
                    d[1]--;
                }
                if(d[0] === "uinvulnerable" && d[1] > 0){
                    d[1]--;
                }
                if(d[0] === "noCol" && d[1] > 0){
                    d[1]--;
                }
                if(d[0] === "cloned"){
                    if(data[1] > 1){
                        d[1] = 1;
                    }
                    data[2] = 1;
                    cloned = true;
                }
                if(d === undefined){
                    throw("REE");
                }
                j--;
            }
            
            var m = 1;
            if(slowed){
                m = 0.65;
            }
            if(raged){
                m *= 1.35;
            }
            var mv = m;
            if(snared){
                mv *= 0.15;
            }
            
            var projectileS = 810;
            //Recoil (Sparky)
            var recoilD = 0;
            var recoilT = 0;
            //Cool gang
            var slow = 0;
            //Keep target
            var nrets = false;
            //Split into same troop with same targeting
            var singleSplit = false;
            //Chain gang
            var chain = false;
            //Spell on death?
            var spell = 0;
            //AOE attack?
            var aoe = false;
            //Second AOE?
            //var aoe2 = false;
            //Does the troop have a defender?
            var defender = false;
            //Minimum range?
            var mrange = -1;
            //Shotgun?
            var shotgun = false;
            var spread = 10;
            //Wait?
            var hitp = false;
            //Jumping code
            var jump = false;
            //Snare time
            var snare = 0;
            //Deprioritization?
            var depriority = "";
            //How far has this moved uninterrupted?
            var moveU = -1;
            //Bandit target
            var targetDa = -1;
            //Crown Tower reduction
            var ctmult = 1;
            //Miner
            var mtX = -1;
            var mtY = -1;
            //Directional splits and spawns
            var dirsplit = false;
            var dirspawn = false;
            //Spread
            var sprd = false;
            //Snowflake checker
            if(data.length === 25){
                var specialD = data[24];
                var j = -1;
                if(specialD !== undefined){
                    j = specialD.length-1;
                }
                while(j > -1){
                    var d = specialD[j];
                    if(d[0] === "lifetime" && data[22] <= 0){
                        if(raged && data[18] !== "bomb"){
                            rTroops[i][1] -= 1.35*rTroops[i][2]/d[1];
                        }
                        else{
                            rTroops[i][1] -= rTroops[i][2]/d[1];
                        }
                    }
                    if(d[0] === "ps"){
                        projectileS = d[1];
                    }
                    if(d[0] === "split"){
                        split = d[1];
                    }
                    if(d[0] === "deathElixir"){
                        if(d.length > 1){
                            dElix = d[1];
                        }
                        else{
                            dElix = 1;
                        }
                    }
                    if(d[0] === "kamikaze"){
                        kami = true;
                    }
                    if(d[0] === "stun"){
                        zap = d[1];
                    }
                    if(d[0] === "weak-stun"){
                        if(stunned){
                            data[11] = data[12];
                        }
                    }
                    if(d[0] === "recoil"){
                        recoilD = d[1];
                        recoilT = d[2] || 9;
                    }
                    if(d[0] === "slow"){
                        slow = d[1];
                    }
                    if(d[0] === "retainTarget"){
                        nrets = true;
                    }
                    if(d[0] === "noTargetChange"){
                        singleSplit = true;
                    }
                    if(d[0] === "elixir" && data[22] <= 0 && !stunned){
                        d[1] -= m;
                        if(d[1] < 1 && elixirR < 10){
                            elixirR++;
                            d[1] = d[2];
                        }
                    }
                    if(d[0] === "spawner" && !stunned){
                        if(data[22] <= 0){
                            d[1] -= mv; //NOTE: Move speed!
                        }
                        if(d[1] < 1){
                            var spawnd = d[3];
                            var k = spawnd.length-1;
                            while(k > -1){
                                var k4 = spawnd[k][4];
                                var k5 = spawnd[k][5];
                                if(dirspawn){
                                    var xt = spawnd[k][4];
                                    var yt = spawnd[k][5];
                                    k4 = data[4]+xt*cos(radians(data[16]+180))+yt*cos(radians(data[16]+90));
                                    k5 = data[5]+xt*sin(radians(data[16]+180))+yt*sin(radians(data[16]+90));
                                }
                                else{
                                    k4 = spawnd[k][4]*-1 + rTroops[i][4];
                                    k5 = spawnd[k][5]*-1 + rTroops[i][5];
                                }
                                if(mirrored && am === false){
                                    spawnd[k][24].push(["mirror", false]);
                                }
                                if(cloned){
                                    spawnd[k][23].push(["cloned"]);
                                    spawnd[k][1] = 1;
                                    spawnd[k][2] = 1;
                                }
                                rTroops.push([spawnd[k][0], spawnd[k][1], spawnd[k][2], spawnd[k][3], k4, k5, spawnd[k][6], spawnd[k][7], spawnd[k][8], spawnd[k][9], spawnd[k][10], spawnd[k][11], spawnd[k][12], spawnd[k][13], spawnd[k][14], spawnd[k][15], spawnd[k][16], spawnd[k][17], spawnd[k][18], spawnd[k][19], spawnd[k][20], spawnd[k][21], spawnd[k][22], [], spawnd[k][24]]);
                                k--;
                            }
                            d[1] = d[2];
                        }
                    }
                    if(d[0] === "inferno" && data[22] <= 0){
                        if(stunned){
                            d[1] = 0;
                            data[14] = -1;
                            data[15] = false;
                            data[20] = true;
                        }
                        if(data[14] !== -1){
                            if(!bTDed[data[14]]){
                                d[1] += m;
                                if(d[1] < d[2]+data[13]){
                                    data[3] = d[3];
                                }
                                else if(d[1] < 2*d[2]+data[13]){
                                    data[3] = d[4];
                                }
                                else{
                                    data[3] = d[5];
                                }
                                if(mirrored){
                                    data[3] = round(data[3]*1.1);
                                }
                            }
                            else{
                                d[1] = 0;
                                data[14] = -1;
                                data[15] = false;
                                data[20] = true;
                            }
                        }
                        else{
                            d[1] = 0;
                        }
                    }
                    if(d[0] === "charge" && data[22] <= 0){
                        data[3] = d[3]; //ATK
                        data[8] = d[4]; //SPD
                        if(mirrored){
                            data[3] = round(data[3]*1.1);
                        }
                        if(data[15] === false && !stunned && !kb){
                            d[1] += mv*data[8]/spdm;
                            if(d[1] >= d[2]){
                                data[3] = d[5];
                                data[8] = d[6];
                                data[20] = false;
                                if(mirrored){
                                    data[3] = round(data[3]*1.1);
                                }
                            }
                            if(d[7] !== undefined){
                                aoe = ["spell", data[4], data[5], data[4], data[5], data[3], d[7], projectileS, [["ground"]]];
                            }
                        }
                        else{
                            d[1] = 0;
                        }
                        moveU = d[1];
                    }
                    if(d[0] === "chain"){
                        chain = d;
                        if(data[11] === 1){
                            chain[4] = [];
                            chain[1] = 2;
                        }
                    }
                    if(d[0] === "spell"){
                        if(mirrored){
                            d[1].push(["mirror", false]);
                        }
                        rNProj.push(["spell", 3, 9, data[4], data[5], data[3], data[17], projectileS, d[1]]);
                    }
                    if(d[0] === "instspell"){
                        if(mirrored){
                            d[1].push(["mirror", false]);
                        }
                        rNProj.push(["spell", data[4], data[5], data[4], data[5], data[3], data[17], projectileS, d[1]]);
                    }
                    //["ddmg", 70, 2, []]
                    if(d[0] === "ddmg"){
                        if(d[3] === undefined){
                            d[3] = [];
                        }
                        if(mt1){
                            d[1] = round(d[1]*1.1);
                        }
                        if(amt1){
                            d[1] = round(d[1]*10/11);
                        }
                        spell = ["spell", data[4], data[5], data[4], data[5], d[1], d[2], projectileS, d[3]];
                    }
                    if(d[0] === "sdmg"){
                        if(d[3] === undefined){
                            d[3] = [];
                        }
                        if(mirrored){
                            d[1] = round(d[1]*1.1);
                        }
                        rNProj.push(["spell", data[4], data[5], data[4], data[5], d[1], d[2], projectileS, d[3]]);
                        specialD.splice(j, 1);
                    }
                    if(d[0] === "aoea"){
                        if(d[1] === undefined){
                            d[1] = [];
                        }
                        aoe = ["spell", data[4], data[5], data[4], data[5], data[3], data[17], projectileS, d[1]];
                    }
                    if(d[0] === "defender"){
                        defender = d[1];
                    }
                    if(d[0] === "sptrgt"){
                        if(d[1] === undefined){
                            d[1] = [];
                        }
                        if(data[14] !== -1){
                            aoe = ["spell", data[4], data[5], bTroops[data[14]][4], bTroops[data[14]][5], data[3], data[17], projectileS, d[1]];
                            //println(aoe);
                        }
                    }
                    if(d[0] === "mrange"){
                        mrange = d[1];
                    }
                    if(d[0] === "shotgun"){
                        shotgun = d[1];
                        spread = d[2];
                    }
                    //["Executioner", "He throws his axe like a boomerang, striking all enemies on the way out AND back. It's a miracle he doesn't lose an arm.", 5, [["executioner", 960, 960, 259, 0.5, 0.5, 1.2, 4, 60, 4.0, 5.5, 0, 27, 12, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["sprnge", 0.6, 4, [["tmr", 0, 15, []]], [["tmr", 0, 33, []]]], ["hitp", 0, 48]]]]], //73
                    if(d[0] === "sprnge"){
                        if(data[14] !== -1){
                            var fx = d[3];
                            var ang = degrees(atan2(bTroops[data[14]][5]-data[5], bTroops[data[14]][4]-data[4]));
                            if(d.length > 4){
                                aoe = ["spell", data[4]+d[1]*cos(radians(ang)), data[5]+d[1]*sin(radians(ang)), data[4]+(d[1]+d[2])*cos(radians(ang)), data[5]+(d[1]+d[2])*sin(radians(ang)), data[3], data[17], projectileS, [["return", false, i, [d[4][0]]], d[3][0]]];
                            }
                            else{
                                aoe = ["spell", data[4]+d[1]*cos(radians(ang)), data[5]+d[1]*sin(radians(ang)), data[4]+(d[1]+d[2])*cos(radians(ang)), data[5]+(d[1]+d[2])*sin(radians(ang)), data[3], data[17], projectileS, fx];
                            }
                            //println(aoe);
                        }
                    }
                    if(d[0] === "hitp"){
                        //say(d);
                        if(data[11]+1 === data[12]){
                            d[1]++;
                            hitp = true;
                            if(d[1] === d[2]){
                                d[1] = 0;
                                data[11] -= m;
                            }
                        }
                    }
                    if(d[0] === "jumping"){
                        jump = true;
                        if(data[4] > 15 && data[4] < 17 && (data[5] < 2.9 || data[5] > 15.1 || (data[5] >4.1 && data[5] < 13.9))){
                            data[18] = "air";
                            data[23].push(["nontargetable", 1]);
                            mv = 1;
                            data[8] = 160;
                        }
                        else{
                            data[18] = "ground";
                            if(data[8] === 160){
                                data[8] = 120;
                            }
                        }
                    }
                    //["invis", 0, 48, 12, 12]
                    if(d[0] === "invis"){
                        if(!data[15]){
                            d[1]++;
                            if(d[1] > d[2]){
                                data[23].push(["nontargetable", 1]);
                                d[3] = 0;
                            }
                        }
                        else{
                            d[3]++;
                            if(d[3] < d[4]){
                                data[23].push(["nontargetable", 1]);
                            }
                            else{
                                d[1] = 0;
                            }
                        }
                    }
                    if(d[0] === "hiding"){
                        if(!data[15]){
                            d[1]++;
                            if(d[1] > d[2]){
                                data[23].push(["nontargetable", 1]);
                                data[23].push(["invulnerable", 1]);
                                d[3] = 0;
                            }
                        }
                        else{
                            d[3]++;
                            if(d[3] < d[4]){
                                data[23].push(["nontargetable", 1]);
                                data[23].push(["invulnerable", 1]);
                            }
                            else{
                                d[1] = 0;
                            }
                        }
                    }
                    if(d[0] === "link"){
                        if(d[1] === false){
                            d[1] = true;
                            var spawnd = d[2];
                            var k = spawnd.length-1;
                            while(k > -1){
                                var k4 = -1*spawnd[k][4];
                                var k5 = -1*spawnd[k][5];
                                spawnd[k][24].push(["linked", i, k4, k5]);
                                if(mirrored){
                                    spawnd[k][24].push(["mirror", false]);
                                }
                                k4 += rTroops[i][4];
                                k5 += rTroops[i][5];
                                spawnd[k][23].push(["nontargetable", 10000000]);
                                spawnd[k][23].push(["invulnerable", 10000000]);
                                spawnd[k][23].push(["uinvulnerable", 10000000]);
                                rTroops.push([spawnd[k][0], spawnd[k][1], spawnd[k][2], spawnd[k][3], k4, k5, spawnd[k][6], spawnd[k][7], spawnd[k][8], spawnd[k][9], spawnd[k][10], spawnd[k][11], spawnd[k][12], spawnd[k][13], spawnd[k][14], spawnd[k][15], spawnd[k][16], spawnd[k][17], spawnd[k][18], spawnd[k][19], spawnd[k][20], spawnd[k][21], spawnd[k][22], spawnd[k][23], spawnd[k][24]]);
                                k--;
                            }
                            d[1] = d[2];
                        
                        }
                    }
                    if(d[0] === "linked"){
                        cull = false;
                        if(rTroops[d[1]] !== "null"){
                            var effectL = rTroops[d[1]][23];
                            var g = effectL.length-1;
                            while(g > -1){
                                var f = effectL[g];
                                if(f[0] === "slow" && f[1] > 0){
                                    slowed = true;
                                }
                                if(f[0] === "rage" && f[1] > 0){
                                    raged = true;
                                }
                                if(f[0] === "stun" && f[1] > 0){
                                    stunned = true;
                                    data[14] = -1;
                                    data[15] = false;
                                }
                                m = 1;
                                if(slowed){
                                    m = 0.65;
                                }
                                if(raged){
                                    m *= 1.35;
                                }
                                mv = m;
                                if(snared){
                                    mv *= 0.15;
                                }
                                g--;
                            }
                            data[4] = rTroops[d[1]][4]+cos(radians(rTroops[d[1]][16]))*d[2]+cos(radians(rTroops[d[1]][16]-90))*d[3];
                            data[5] = rTroops[d[1]][5]+sin(radians(rTroops[d[1]][16]))*d[2]+sin(radians(rTroops[d[1]][16]-90))*d[3];
                        }
                        else{
                            rTDel[i] = true;
                        }
                    }
                    if(d[0] === "snare"){
                        snare = d[1];
                    }
                    if(d[0] === "retarget"){
                        if(data[11] === 1){
                            data[14] = -1;
                            data[15] = false;
                        }
                    }
                    if(d[0] === "deprioritize"){
                        depriority = d[1];
                    }
                    if(d[0] === "regen"){
                        if(mt1){
                            d[3] = round(d[3]*1.1);
                        }
                        if(amt1 === true){
                            d[3] = round(d[3]*10/11);
                        }
                        if(data[1] !== data[2] && !data[15] && data[22] <= 0){
                            d[1] -= m;
                        }
                        if(d[1] <= 0){
                            data[1] += d[3];
                            d[1] = d[2];
                            say("R"+i+" self-healed "+d[3]);
                        }
                    }
                    if(d[0] === "atkSpawn" && !stunned){
                        if(data[11] === 1){
                            var spawnd = d[1];
                            var k = spawnd.length-1;
                            while(k > -1){
                                var k4 = -1*spawnd[k][4];
                                var k5 = -1*spawnd[k][5];
                                k4 += rTroops[i][4];
                                k5 += rTroops[i][5];
                                if(mirrored && am === false){
                                    spawnd[k][24].push(["mirror", false]);
                                }
                                if(cloned){
                                    spawnd[k][23].push(["cloned"]);
                                    spawnd[k][1] = 1;
                                    spawnd[k][2] = 1;
                                }
                                rTroops.push([spawnd[k][0], spawnd[k][1], spawnd[k][2], spawnd[k][3], k4, k5, spawnd[k][6], spawnd[k][7], spawnd[k][8], spawnd[k][9], spawnd[k][10], spawnd[k][11], spawnd[k][12], spawnd[k][13], spawnd[k][14], spawnd[k][15], spawnd[k][16], spawnd[k][17], spawnd[k][18], spawnd[k][19], spawnd[k][20], spawnd[k][21], spawnd[k][22], spawnd[k][23], spawnd[k][24]]);
                                k--;
                            }
                        }
                    }
                    //["dash", 3.5, 6, 160, 90, 320, 500, 0, 24, false]
                    if(d[0] === "dash" && data[22] <= 0){
                        data[3] = d[3]; //ATK
                        data[8] = d[4]; //SPD
                        if(d[7] >= d[8]){
                            data[3] = d[5]; //ATK
                            data[8] = d[6]; //SPD
                            if(mirrored){
                                data[3] = round(data[3]*1.1);
                            }
                            data[20] = false; //instant
                            data[15] = true;
                            data[14] = d[9];
                            mv = 1;
                            data[23].push(["invulnerable", 3]);
                            data[23].push(["uinvulnerable", 3]);
                            data[23].push(["noCol", 3]);
                            cull = false;
                            rTDed[i] = false;
                            targetDa = d[9];
                            if(data[11] > 0 || d[9] !== data[14] || bTroops[d[9]] === undefined || kb){
                                d[7] = 0;
                                targetDa = -1;
                            }
                        }
                        else{
                            data[3] = d[3]; //ATK
                            data[8] = d[4]; //SPD
                            if(mirrored){
                                data[3] = round(data[3]*1.1);
                            }
                            if(data[14] !== -1 && data[15] === false){
                                var xdif = bTroops[data[14]][4] - data[4];
                                var ydif = bTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1] && cdis < d[2]){
                                    data[15] = true;
                                    if(d[9] !== data[14]){
                                        d[7] = 0;
                                    }
                                    d[9] = data[14];
                                }
                            }
                            if(data[15] === true && !stunned && d[7] < d[8]){
                                var xdif = bTroops[data[14]][4] - data[4];
                                var ydif = bTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1]){
                                    data[14] = d[9];
                                    var xdif = bTroops[data[14]][4] - data[4];
                                    var ydif = bTroops[data[14]][5] - data[5];
                                    var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[data[14]][6]/2-data[6]/2;
                                    if((cdis < d[1] || cdis > d[2]) && cdis > data[9]){
                                        data[15] = false;
                                    }
                                    d[7] += m;
                                    mv = 0;
                                }
                            }
                            else if(stunned || kb){
                                d[7] = 0;
                            }
                        }
                    }
                    //["jump", 3.5, 5, 222, 90, 444, 250, 0, 33, -1, 2.2, [["knockback", 1]]]
                    if(d[0] === "jump" && data[22] <= 0){
                        data[3] = d[3]; //ATK
                        data[8] = d[4]; //SPD
                        if(mirrored){
                            data[3] = round(data[3]*1.1);
                        }
                        if(d[7] >= d[8]){
                            data[3] = d[5]; //ATK
                            data[8] = d[6]; //SPD
                            if(mirrored){
                                data[3] = round(data[3]*1.1);
                            }
                            data[20] = false; //instant
                            data[15] = true;
                            data[14] = d[9];
                            mv = 1;
                            data[23].push(["noCol", 1]);
                            cull = false;
                            rTDed[i] = false;
                            targetDa = d[9];
                            if(data[11] > 0 || d[9] !== data[14] || bTroops[d[9]] === undefined){
                                d[7] = 0;
                                targetDa = -1;
                                data[20] = true;
                            }
                            if(d[10] !== undefined){
                                if(d[11] === undefined){
                                    d[11] = [];
                                }
                                aoe = ["spell", data[4], data[5], data[4], data[5], data[3], d[10], projectileS, d[11]];
                            }
                        }
                        else{
                            data[3] = d[3]; //ATK
                            data[8] = d[4]; //SPD
                            if(mirrored){
                                data[3] = round(data[3]*1.1);
                            }
                            if(data[14] !== -1 && data[15] === false){
                                var xdif = bTroops[data[14]][4] - data[4];
                                var ydif = bTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1] && cdis < d[2]){
                                    data[15] = true;
                                    if(d[9] !== data[14]){
                                        d[7] = 0;
                                    }
                                    d[9] = data[14];
                                }
                            }
                            if(data[15] === true && !stunned && d[7] < d[8]){
                                var xdif = bTroops[data[14]][4] - data[4];
                                var ydif = bTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1]){
                                    data[14] = d[9];
                                    var xdif = bTroops[data[14]][4] - data[4];
                                    var ydif = bTroops[data[14]][5] - data[5];
                                    var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[data[14]][6]/2-data[6]/2;
                                    if((cdis < d[1] || cdis > d[2]) && cdis > data[9]){
                                        data[15] = false;
                                    }
                                    d[7] += m;
                                    mv = 0;
                                }
                            }
                            else if(stunned || kb){
                                d[7] = 0;
                            }
                        }
                    }
                    if(d[0] === "ctreduc"){
                        ctmult = d[1];
                    }
                    if(d[0] === "mining"){
                        if(d[3] === false){
                            d[1] = data[4];
                            d[2] = data[5];
                            data[4] = 3;
                            data[5] = 9;
                            d[3] = true;
                        }
                        mtX = d[1];
                        mtY = d[2];
                        data[23].push(["nontargetable", 1]);
                        var xdif = mtX - data[4];
                        var ydif = mtY - data[5];
                        var cdis = sqrt(xdif*xdif+ydif*ydif);
                        if(cdis < 1){
                            data[4] = mtX;
                            data[5] = mtY;
                            split = d[4];
                            rTDed[i] = true;
                            data[1] = 0;
                            mtX = -1;
                            mtY = -1;
                            mv = 0;
                        }
                    }
                    if(d[0] === "pull" && data[22] <= 0){
                        if(d[3] >= d[4]){
                            data[15] = true;
                            data[14] = d[5];
                            mv = 0;
                            var edata = bTroops[data[14]];
                            var xdif = edata[4] - data[4];
                            var ydif = edata[5] - data[5];
                            var cdis = sqrt(xdif*xdif+ydif*ydif);
                            var ang = degrees(atan2(ydif, xdif));
                            if(edata[7] === 0){
                                data[4] += 360*cos(radians(ang))/spdm;
                                data[5] += 360*sin(radians(ang))/spdm;
                            }
                            else{
                                edata[4] -= 360*cos(radians(ang))/spdm;
                                edata[5] -= 360*sin(radians(ang))/spdm;
                                edata[23].push(["knockback", 1, 1, 0, 0]);
                            }
                            cull = false;
                            targetDa = d[5];
                            if(data[11] > 0 && !stunned){
                                edata[23].push(["slow", 75]);
                            }
                            if(data[11] > 0 || d[5] !== data[14] || bTroops[d[5]] === undefined || stunned){
                                d[3] = 0;
                                d[6] = false;
                                targetDa = -1;
                            }
                        }
                        else{
                            if(data[14] !== -1 && data[15] === false){
                                var xdif = bTroops[data[14]][4] - data[4];
                                var ydif = bTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1] && cdis < d[2]){
                                    data[15] = true;
                                    if(d[5] !== data[14]){
                                        d[3] = 0;
                                        d[6] = false;
                                    }
                                    d[5] = data[14];
                                }
                            }
                            if(data[15] === true && !stunned && d[3] < d[4]){
                                var xdif = bTroops[data[14]][4] - data[4];
                                var ydif = bTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1] || d[6]){
                                    data[14] = d[5];
                                    var xdif = bTroops[data[14]][4] - data[4];
                                    var ydif = bTroops[data[14]][5] - data[5];
                                    var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[data[14]][6]/2-data[6]/2;
                                    if(((cdis < d[1] || cdis > d[2]) && cdis > data[9]) || d[6]){
                                        data[15] = false;
                                    }
                                    d[3] += m;
                                    if(d[3] > d[4] - m*1.5 && d[6] === false){
                                        d[6] = true;
                                        d[3] -= cdis*2.5;
                                    }
                                    mv = 0;
                                }
                            }
                            else if(stunned || kb){
                                d[3] = 0;
                                d[6] = false;
                            }
                        }
                    }
                    if(d[0] === "dsplit"){
                        dirsplit = true;
                    }
                    if(d[0] === "dspawn"){
                        dirspawn = true;
                    }
                    if(d[0] === "spread"){
                        if(mt1){
                            d[4] = round(d[4]*1.1);
                        }
                        if(amt1 === true){
                            d[4] = round(d[4]*10/11);
                        }
                        sprd = d;
                    }
                    j--;
                }
            }
            
            if(data[22] <= 0 && !stunned && !kb){
            
            //If target about to commit die, retarget.
            var nope = false;
            if(data[14] !== -1 || targetDa !== -1){
                if(targetDa !== -1){
                    data[14] = targetDa;
                }
                var nou = false;
                var edata = bTroops[data[14]];
                //Snowflake checker
                var reee = false;
                if(edata !== undefined){
                if(edata.length === 25){
                    var specialD = edata[24];
                    var j = specialD.length-1;
                    while(j > -1){
                        var d = specialD[j];
                        if(d[0] === "noTargetChange"){
                            nou = true;
                        }
                        j--;
                    }
                }
                var effectD = edata[23];
                if(effectD !== undefined){
                    var j = effectD.length-1;
                    while(j > -1){
                        var d = effectD[j];
                        if(d[0] === "nontargetable" && d[1] > 0){
                            reee = true;
                        }
                        if(d[0] === "uinvulnerable" && d[1] > 0){
                            nope = true;
                        }
                        j--;
                    }
                }
                }
                if(mrange > 0 && data[14] !== -1){
                    var xdif = bTroops[data[14]][4] - data[4];
                    var ydif = bTroops[data[14]][5] - data[5];
                    var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[data[14]][6]/2-data[6]/2;
                    if(cdis < mrange){
                        data[14] = -1;
                        data[15] = false;
                    }
                }
                if((bTDed[data[14]] && !nou || edata === undefined) || reee){
                    data[14] = -1;
                    data[15] = false;
                }
            }
            
            //Targeting
            if(data[19] !== "none" && data[15] === false && (i !== 0 || rTroops[1] === "null" || rTroops[2] === "null" || rTroops[0][1] !== rTroops[0][2])){
                var j = bTroops.length-1;
                var dis = data[10];
                var bt = -1;
                var ddis = data[10];
                var dbt = -1;
                var priority = false;
                while(j > -1){
                    var xdif = bTroops[j][4] - data[4];
                    var ydif = bTroops[j][5] - data[5];
                    var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[j][6]/2-data[6]/2;
                    //if(j === 3 && i === 0){
                    //    say(bTDed[j]);
                    //}
                    if(cdis <= dis && cdis >= mrange && !bTDed[j] && bTroops[j][18] !== "bomb" && (bTroops[j][21] <= 0) && ((data[19] === "all") || (data[19] === "troops" && bTroops[j][18] !== "building") || (data[19] === "ground" && (bTroops[j][18] === "ground" || bTroops[j][18] === "building" || bTroops[j][18] === "hovering")) || (data[19] === "buildings" && bTroops[j][18] === "building") || (data[19] === "air" && bTroops[j][18] === "air" || j <= 2))){
                        var nt = true;
                        var dep = false;
                        var effectED = bTroops[j][23];
                        var l = -1;
                        if(effectED !== undefined){
                            l = effectED.length-1;
                        }
                        var test = 0;
                        while(l > -1){
                            var d = effectED[l];
                            if(d === undefined){
                                throw("REE");
                            }
                            if(d[0] === "nontargetable" && d[1] > 0){
                                nt = false;
                            }
                            if(d[0] === depriority && d[1] > 0){
                                dep = true;
                            }
                            l--;
                        }
                        if(nt && dep){
                            ddis = cdis;
                            dbt = j;
                        }
                        if(nt && dep === false){
                            priority = true;
                            dis = cdis;
                            bt = j;
                        }
                    }
                    j--;
                    
                }
                if(priority){
                    data[14] = bt;
                }
                else{
                    data[14] = dbt;
                }
            }
            if(data[14] === -1){
                data[20] = true;
            }
            else{
                cull = false;
            }
            
            //Debug targeting
            if(testing){
                if(data[14] === -1){
                    fill(255, 0, 0);
                    rect(560, 10*i, 10, 10);
                }
                else{
                    fill(0, 255, 0);
                    rect(560, 10*i, 10, 10);
                    fill(0, 0, 0);
                    textAlign(CENTER, CENTER);
                    textSize(10);
                    text(data[14], 565, 10*i+5);
                }
            }
            
            //Movement (!! IMPORTANT BLUE CHANGE !!)
            var tdir = data[16];
            if(data[14] === -1){
                if(mtX !== -1 || mtY !== -1){
                    var x = data[4];
                    var y = data[5];
                    if(mtX > 15 && data[4] < 15){
                        mtX = 15;
                        if(mtY < 9){
                            mtY = 4.1;
                        }
                        else{
                            mtY = 13.9;
                        }
                    }
                    var dx = mtX - x;
                    var dy = mtY - y;
                    if(dx > dy - 0.2 && dx < dy + 0.2 && dx > 0){
                        data[4] += mv*(sqrt(2)/2)*data[8]/spdm;
                        data[5] += mv*(sqrt(2)/2)*data[8]/spdm;
                    }
                    else if(dx > -dy - 0.2 && dx < -dy + 0.2 && dx > 0){
                        data[4] += mv*(sqrt(2)/2)*data[8]/spdm;
                        data[5] -= mv*(sqrt(2)/2)*data[8]/spdm;
                    }
                    else if(dx > dy - 0.2 && dx < dy + 0.2 && dx < 0){
                        data[4] -= mv*(sqrt(2)/2)*data[8]/spdm;
                        data[5] -= mv*(sqrt(2)/2)*data[8]/spdm;
                    }
                    else if(dx > -dy - 0.2 && dx < -dy + 0.2 && dx < 0){
                        data[4] -= mv*(sqrt(2)/2)*data[8]/spdm;
                        data[5] += mv*(sqrt(2)/2)*data[8]/spdm;
                    }
                    else if(dx > dy + 0.2 && dx > 0){
                        data[4] += mv*data[8]/spdm;
                    }
                    else if(dx < dy - 0.2 && dx < 0){
                        data[4] -= mv*data[8]/spdm;
                    }
                    else if(dy > dx + 0.2 && dy > 0){
                        data[5] += mv*data[8]/spdm;
                    }
                    else if(dy < dx - 0.2 && dy < 0){
                        data[5] -= mv*data[8]/spdm;
                    }
                }
                else if(data[18] === "air" || data[18] === "hovering" || data[4] > 17){
                    if(data[5] <= 9){
                        if(bTroops[1] !== "null"){
                            var edata = bTroops[1];
                            var xdif = edata[4] - data[4];
                            var ydif = edata[5] - data[5];
                            var cdis = sqrt(xdif*xdif+ydif*ydif);
                            var ang = degrees(atan2(ydif, xdif));
                            tdir = ang;
                            data[4] += mv*data[8]*cos(radians(ang))/spdm;
                            data[5] += mv*data[8]*sin(radians(ang))/spdm;
                        }
                        else if(bTroops[0] !== "null"){
                            var edata = bTroops[0];
                            var xdif = edata[4] - data[4];
                            var ydif = edata[5] - data[5];
                            var cdis = sqrt(xdif*xdif+ydif*ydif);
                            var ang = degrees(atan2(ydif, xdif));
                            tdir = ang;
                            data[4] += mv*data[8]*cos(radians(ang))/spdm;
                            data[5] += mv*data[8]*sin(radians(ang))/spdm;
                        }
                    }
                    if(data[5] > 9){
                        if(bTroops[2] !== "null"){
                            var edata = bTroops[2];
                            var xdif = edata[4] - data[4];
                            var ydif = edata[5] - data[5];
                            var cdis = sqrt(xdif*xdif+ydif*ydif);
                            var ang = degrees(atan2(ydif, xdif));
                            tdir = ang;
                            data[4] += mv*data[8]*cos(radians(ang))/spdm;
                            data[5] += mv*data[8]*sin(radians(ang))/spdm;
                        }
                        else if(bTroops[0] !== "null"){
                            var edata = bTroops[0];
                            var xdif = edata[4] - data[4];
                            var ydif = edata[5] - data[5];
                            var cdis = sqrt(xdif*xdif+ydif*ydif);
                            var ang = degrees(atan2(ydif, xdif));
                            tdir = ang;
                            data[4] += mv*data[8]*cos(radians(ang))/spdm;
                            data[5] += mv*data[8]*sin(radians(ang))/spdm;
                        }
                    }
                }
                else{
                    //NEW
                    if(data[4] < 2){
                        var ang = 90;
                        if(data[5] < 9 && data[5] > 6){
                            ang = degrees(atan2(2-data[4], 6.75-data[5]));
                        }
                        else if(data[5] >= 9 && data[5] < 12){
                            ang = degrees(atan2(2-data[4], 11.25-data[5]));
                        }
                        tdir = (90-ang);
                        data[4] += mv*data[8]*sin(radians(ang))/spdm;
                        data[5] += mv*data[8]*cos(radians(ang))/spdm;
                    }
                    else if(data[4] < 5.5){
                        var ang = 90;
                        if(rTroops[1] !== "null"){
                            if(data[5] <= 3.5){
                                ang = degrees(atan2(5.5-data[4], 1.75-data[5]));
                            }
                            else if(data[5] < 9 && data[5] > 3.5){
                                ang = degrees(atan2(5.5-data[4], 5.25-data[5]));
                            }
                        }
                        if(rTroops[2] !== "null"){
                            if(data[5] >= 9 && data[5] < 14.5){
                                ang = degrees(atan2(5.5-data[4], 12.75-data[5]));
                            }
                            else if(data[5] >= 14.5){
                                ang = degrees(atan2(5.5-data[4], 16.25-data[5]));
                            }
                        }
                        tdir = (90-ang);
                        data[4] += mv*data[8]*sin(radians(ang))/spdm;
                        data[5] += mv*data[8]*cos(radians(ang))/spdm;
                    }
                    else if(!jump){
                        if(data[4] < 15){
                            var ang = 90;
                            if(data[5] < 2.9){
                                ang = degrees(atan2(15-data[4], 2.9-data[5]));
                            }
                            else if(data[5] < 9 && data[5] > 4.1){
                                ang = degrees(atan2(15-data[4], 4.1-data[5]));
                            }
                            else if(data[5] >= 9 && data[5] < 13.9){
                                ang = degrees(atan2(15-data[4], 13.9-data[5]));
                            }
                            else if(data[5] > 15.1){
                                ang = degrees(atan2(15-data[4], 15.1-data[5]));
                            }
                            tdir = (90-ang);
                            data[4] += mv*data[8]*sin(radians(ang))/spdm;
                            data[5] += mv*data[8]*cos(radians(ang))/spdm;
                        }
                        else if(data[4] > 25){
                            if(data[5] < 7){
                                data[4] += mv*data[8]*sin(radians(45))/spdm;
                                data[5] += mv*data[8]*cos(radians(45))/spdm;
                                tdir = 45;
                            }
                            else if(data[5] > 11){
                                data[4] += mv*data[8]*sin(radians(45))/spdm;
                                data[5] -= mv*data[8]*cos(radians(45))/spdm;
                                tdir = -45;
                            }
                            else{
                                data[4] += mv*data[8]/spdm;
                                tdir = 0;
                            }
                        }
                        else{
                            data[4] += mv*data[8]/spdm;
                            tdir = 0;
                        }
                    }
                    else{
                        if(data[5] <= 9){
                            if(bTroops[1] !== "null"){
                                var edata = bTroops[1];
                                var xdif = edata[4] - data[4];
                                var ydif = edata[5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif);
                                var ang = degrees(atan2(ydif, xdif));
                                tdir = ang;
                                data[4] += mv*data[8]*cos(radians(ang))/spdm;
                                data[5] += mv*data[8]*sin(radians(ang))/spdm;
                            }
                            else if(bTroops[0] !== "null"){
                                var edata = bTroops[0];
                                var xdif = edata[4] - data[4];
                                var ydif = edata[5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif);
                                var ang = degrees(atan2(ydif, xdif));
                                tdir = ang;
                                data[4] += mv*data[8]*cos(radians(ang))/spdm;
                                data[5] += mv*data[8]*sin(radians(ang))/spdm;
                            }
                        }
                        if(data[5] > 9){
                            if(bTroops[2] !== "null"){
                                var edata = bTroops[2];
                                var xdif = edata[4] - data[4];
                                var ydif = edata[5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif);
                                var ang = degrees(atan2(ydif, xdif));
                                tdir = ang;
                                data[4] += mv*data[8]*cos(radians(ang))/spdm;
                                data[5] += mv*data[8]*sin(radians(ang))/spdm;
                            }
                            else if(bTroops[0] !== "null"){
                                var edata = bTroops[0];
                                var xdif = edata[4] - data[4];
                                var ydif = edata[5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif);
                                var ang = degrees(atan2(ydif, xdif));
                                tdir = ang;
                                data[4] += mv*data[8]*cos(radians(ang))/spdm;
                                data[5] += mv*data[8]*sin(radians(ang))/spdm;
                            }
                        }
                    }
                }
            }
            else if(!data[15] || targetDa !== -1){
                //We're targeting something, so move to it!
                if(targetDa !== -1){
                    data[14] = targetDa;
                }
                var edata = bTroops[data[14]];
                var xdif = edata[4] - data[4];
                var ydif = edata[5] - data[5];
                var cdis = sqrt(xdif*xdif+ydif*ydif);
                var measure = 0;
                if(data[4] < 15){
                    measure = 15-data[4];
                }
                if(data[4] > 17){
                    measure = data[4]-17;
                }
                measure = cdis*(measure-xdif)/xdif;
                //say(measure + data[9]);
                if(abs(measure) < data[9]){
                    measure = true;
                }
                else if(data[4] > 17 && edata[4] > 17){
                    measure = true;
                }
                else if(data[4] < 15 && edata[4] < 15){
                    measure = true;
                }
                else{
                    measure = false;
                }
                if(data[18] === "air" || data[18] === "hovering" || jump || measure || targetDa !== -1){
                    var ang = degrees(atan2(ydif, xdif));
                    tdir = ang;
                    data[4] += mv*data[8]*cos(radians(ang))/spdm;
                    data[5] += mv*data[8]*sin(radians(ang))/spdm;
                }
                else if(data[4] < 15){
                    //say(1);
                    var ang = 90;
                    if(data[5] < 2.9){
                        ang = degrees(atan2(15-data[4], 2.9-data[5]));
                    }
                    else if(data[5] < 9 && data[5] > 4.1){
                        ang = degrees(atan2(15-data[4], 4.1-data[5]));
                    }
                    else if(data[5] >= 9 && data[5] < 13.9){
                        ang = degrees(atan2(15-data[4], 13.9-data[5]));
                    }
                    else if(data[5] > 15.1){
                        ang = degrees(atan2(15-data[4], 15.1-data[5]));
                    }
                    tdir = (90-ang);
                    data[4] += mv*data[8]*sin(radians(ang))/spdm;
                    data[5] += mv*data[8]*cos(radians(ang))/spdm;
                }
                else if(data[4] > 17){
                    //say(2);
                    var ang = 270;
                    if(data[5] < 2.9){
                        ang = degrees(atan2(17-data[4], 2.9-data[5]));
                    }
                    else if(data[5] < 9 && data[5] > 4.1){
                        ang = degrees(atan2(17-data[4], 4.1-data[5]));
                    }
                    else if(data[5] >= 9 && data[5] < 13.9){
                        ang = degrees(atan2(17-data[4], 13.9-data[5]));
                    }
                    else if(data[5] > 15.1){
                        ang = degrees(atan2(17-data[4], 15.1-data[5]));
                    }
                    tdir = (90-ang);
                    data[4] += mv*data[8]*sin(radians(ang))/spdm;
                    data[5] += mv*data[8]*cos(radians(ang))/spdm;
                }
                else if(xdif >= 0){
                    //say(3);
                    var ang = 90;
                    tdir = (90-ang);
                    data[4] += mv*data[8]*sin(radians(ang))/spdm;
                    data[5] += mv*data[8]*cos(radians(ang))/spdm;
                }
                else if(xdif < 0){
                    //say(4);
                    var ang = 270;
                    tdir = (90-ang);
                    data[4] += mv*data[8]*sin(radians(ang))/spdm;
                    data[5] += mv*data[8]*cos(radians(ang))/spdm;
                }
            }
            data[16] = tdir;
            
            //Shooting
            if(data[14] !== -1){ //if target !== -1
                var edata = bTroops[data[14]];
                var xdif = edata[4] - data[4];
                var ydif = edata[5] - data[5];
                var cdis = sqrt(xdif*xdif+ydif*ydif)-edata[6]/2-data[6]/2;
                if(cdis <= data[9]){ //if in range
                    data[16] = degrees(atan2(ydif, xdif));
                    if(!data[15]){ //if not locked
                        data[15] = true; //lock
                        if(data[20]){
                            data[11] += data[13]; //add lock firing penalty
                        }
                        data[20] = false;
                    }
                    if(data[11] < 1){ //Ready to launch metaphorical tactical nuke?
                        if(data[14] <= 2){
                            say("R"+i+" attacks B"+data[14]+" for "+floor(data[3]*ctmult));
                        }
                        else{
                            say("R"+i+" attacks B"+data[14]+" for "+data[3]);
                        }
                        data[11] += data[12]; //cool += maxCool
                        if(edata[1] < data[3]){
                            bTDed[data[14]] = 1;
                            say("Red "+i+" finishes Blue "+data[14]);
                        }
                        if(aoe !== false){
                            if(shotgun !== false){
                                //aoe = ["spell", data[4], data[5], bTroops[data[14]][4], bTroops[data[14]][5], data[3], data[17], projectileS, d[1]];
                                var ang = degrees(atan2(aoe[4]-aoe[2], aoe[3]-aoe[1]));
                                var shotgunUsed = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                                var k = shotgun - 1;
                                var delay = 0;
                                while(k > -1){
                                    var tester = -1;
                                    while(tester === -1){
                                        tester = floor(random()*shotgun);
                                        if(shotgunUsed[tester] === 0){
                                            shotgunUsed[tester] = 1;
                                            var dire = (ang+(tester-floor(shotgun/2))*spread);
                                            rNProj.push([aoe[0], aoe[1]+0.65*cos(radians(ang)), aoe[2]+0.65*sin(radians(ang)), aoe[1]+0.25*cos(radians(ang))+6.5*cos(radians(dire)), aoe[2]+0.25*sin(radians(ang))+6.5*sin(radians(dire)), aoe[5], aoe[6], aoe[7], [["pass", 0, 6.5, []], ["killOnHit"], ["wait", delay]]]);
                                            delay += 1;
                                            k--;
                                        }
                                        else{
                                            tester = -1;
                                        }
                                    }
                                }
                            }
                            else{
                                rNProj.push(aoe);
                            }
                        }
                        else if(data[9] < 2 && projectileS === 810 && data[17] === 0){ //Auto-default to melee if small range
                            if(!nope){
                                if(data[14] <= 2){
                                    bTroops[data[14]][1] -= floor(data[3]*ctmult);
                                }
                                else{
                                    bTroops[data[14]][1] -= data[3];
                                }
                                //subtract your attack from its health
                            }
                        }
                        else{
                            //["name", x, y, target, damage, speed, aoe, targetable, snowflake]
                            if(zap > 0){
                                if(chain !== false){
                                    rProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19], [["stun", zap], chain]]);
                                }
                                else{
                                    rProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19], [["stun", zap]]]);
                                }
                            }
                            else if(slow > 0){
                                rProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19], [["slow", slow]]]);
                            }
                            else if(snare > 0){
                                rProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19], [["snare", snare]]]);
                            }
                            else if(sprd !== false){
                                rProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19], [sprd]]);
                            }
                            else{
                                rProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19]]);
                            }
                        }
                        //Defense
                        if(defender !== false){
                            //[chain, 2, 3.5, 159, []]
                            var j = bTroops.length-1;
                            var dis = defender;
                            var bt = -1;
                            while(j > -1){
                                var xdif = bTroops[j][4] - data[4];
                                var ydif = bTroops[j][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[j][6]/2-data[6]/2;
                                if(cdis <= dis && bTroops[j][18] !== "bomb" && bTroops[j][18] !== "link" && !bTDed[j] && (bTroops[j][21] <= 0)){
                                    var nt = true;
                                    var effectED = bTroops[j][23];
                                    var l = -1;
                                    if(effectED !== undefined){
                                        l = effectED.length-1;
                                    }
                                    var test = 0;
                                    while(l > -1){
                                        var d = effectED[l];
                                        if(d[0] === "nontargetable" && d[1] > 0){
                                            nt = false;
                                        }
                                        l--;
                                    }
                                    if(nt){
                                        if(bt === -1 || data[14] !== j){
                                            dis = cdis;
                                            bt = j;
                                        }
                                    }
                                }
                                j--;
                            }
                            if(bt !== -1){
                                rProj.push(["arrow", data[4], data[5], bt, data[3], projectileS, 0, "all", [["stun", zap]]]);
                                say("R"+i+" attacks B"+bt+" for "+data[3]);
                            }
                        }
                        //Recoil
                        if(recoilD > 0){
                            var a = degrees(atan2(data[5]-edata[5], data[4]-edata[4]));
                            data[23].push(["sudoKnockback", recoilT, recoilT, a, recoilD, true]);
                        }
                        //Kamikaze
                        if(kami){
                            data[1] = 0;
                        }
                    }
                }
                else{
                    data[15] = false;
                }
            }
            if(data[11] > 0 && hitp === false){ //if cool > 0 && not paused in hit (EXE!!!)
                data[11] -= m; //cool -= speedMult;
            }
            
            //Debug shooting
            if(testing){
                if(data[14] !== -1){
                    fill(255, 255, 255);
                    if(data[15]){
                        fill(255, 255, 0);
                    }
                    ellipse(575, 10*i+5, 10, 10);
                    fill(0, 0, 0);
                    text(data[11], 575, 10*i+5);
                }
            }
            
            }
            else{
                rTroops[i][22]--;
            }
            
            //Cap
            if(data[1] > data[2]){
                data[1] = data[2];
                say(i+" hit HP cap");
            }
            
            //CTRL-ALT-DEL if dead
            if(data[1] <= 0){
                if(spell !== 0){
                    rNProj.push(spell);
                }
                if(split !== false){
                    var troopsP = split;
                    var j = troopsP.length;
                    j--;
                    while(j > -1){
                        if(dirsplit){
                            var xt = troopsP[j][4];
                            var yt = troopsP[j][5];
                            troopsP[j][4] = rTroops[i][4]+xt*cos(radians(rTroops[i][16]))+yt*cos(radians(rTroops[i][16]-90));
                            troopsP[j][5] = rTroops[i][5]+xt*sin(radians(rTroops[i][16]))+yt*sin(radians(rTroops[i][16]-90));
                        }
                        else{
                            troopsP[j][4] += rTroops[i][4];
                            troopsP[j][5] += rTroops[i][5];
                        }
                        if(nrets){
                            //Target
                            troopsP[j][14] = rTroops[i][14];
                            //Cooldown
                            troopsP[j][11] = rTroops[i][11];
                            //Penalty
                            troopsP[j][20] = rTroops[i][20];
                            //Effects
                            troopsP[j][23] = rTroops[i][23];
                        }
                        if(cloned){
                            troopsP[j][23].push(["cloned"]);
                        }
                        if(dirsplit){
                            var k = troopsP[j][23].length-1;
                            while(k >= 0){
                                if(troopsP[j][23][k][0] === "knockback"){
                                    troopsP[j][23][k][3] -= rTroops[i][16]-90;
                                }
                                k--;
                            }
                        }
                        if(troopsP[j].length > 24){
                            var k = troopsP[j][24].length-1;
                            while(k > 0){
                                if(troopsP[j][24][k][0] === "charge" && moveU >= 0){
                                    troopsP[j][24][k][1] = moveU;
                                }
                                k--;
                            }
                            if(mirrored){
                                troopsP[j][24].push(["mirror", false]);
                            }
                        }
                        else if(mirrored){
                            troopsP[j][24] = [["mirror", false]];
                        }
                        if(singleSplit){
                            rTroops[i] = troopsP[j];
                        }
                        else{
                            rTroops.push(troopsP[j]);
                        }
                        j--;
                    }
                }
                if(dElix){
                    elixir+=dElix;
                }
                if(!singleSplit){
                    rTDel[i] = 1;
                }
                else{
                    rTDed[i] = 0;
                }
            }
            }
            
                rTroops[i][21]--;
            }
            
            //Cycle time
            i--;
            textAlign(LEFT, BASELINE);
        }
    }
    //Your troops
    var i = bTroops.length;
    if(i > 0){
        i--;
        while(i > -1){
            //["name", health, max, attack{3,} x, y, size(diameter), mass{7,} speed, range, srange, cool{11,} maxCool, ret, target, lock{15,} shield, aoe, type, targetType{19,} penalty, [effects], [special]]
            //Get information about troop
            var data = bTroops[i];
            
            //Set up splitting
            var split = false;
            
            //Set up death elixir
            var dElix = false;
            
            //Set up kamikaze
            var kami = false;
            
            //Set up stun
            var zap = 0;
            
            if(data !== "null"){
            if(data[21] <= 0){
            //Draw troop
            var colorR, colorG, colorB;
            if(blueC === "blue"){
                colorR = 0;
                colorG = 0;
                colorB = 255;
            }
            else if(blueC === "purple"){
                colorR = 255;
                colorG = 0;
                colorB = 127;
            }
            else if(blueC === "orange"){
                colorR = 255;
                colorG = 127;
                colorB = 0;
            }
            else if(blueC === "green"){
                colorR = 0;
                colorG = 200;
                colorB = 0;
            }
            else if(blueC === "red"){
                colorR = 255;
                colorG = 0;
                colorB = 0;
            }
            var effectD = data[23];
            var j = -1;
            if(effectD !== undefined){
                j = effectD.length-1;
            }
            var slowd = false;
            var stund = false;
            var snard = false;
            var ragd = false;
            var clond = false;
            while(j > -1){
                var d = effectD[j];
                if(d[0] === "stun" && d[1] > 0 && !stund){
                    colorR += 100;
                    colorG += 100;
                    colorB -= 100;
                    stund = true;
                }
                if(d[0] === "slow" && d[1] > 0 && !slowd){
                    colorR -= 100;
                    colorG += 100;
                    colorB += 100;
                    slowd = true;
                }
                if(d[0] === "snare" && d[1] > 0 && !snard){
                    colorG += 100;
                    colorR -= 100;
                    colorB -= 100;
                    snard = true;
                }
                if(d[0] === "rage" && d[1] > 0 && !ragd){
                    colorR += 100;
                    colorB += 100;
                    colorG -= 100;
                    ragd = true;
                }
                if(d[0] === "cloned" && !clond){
                    colorG += 200;
                    colorB -= 50;
                    colorR -= 50;
                    clond = true;
                }
                j--;
            }
            fill(colorR, colorG, colorB, 60);
            ellipse(tg(data[5]), tg(data[4]), data[6]*15, data[6]*15);
            if(viewAng){
                ellipse(tg(data[5])+(data[6]*7.5+3)*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+3)*cos(radians(data[16])), 3, 3);
            }
            if(viewReload){
                noFill();
                strokeWeight(1);
                stroke(colorR, colorG, colorB, 100);
                arc(tg(data[5]), tg(data[4]), data[6]*15, data[6]*15, data[16], 360+data[16]-360*data[11]/data[12]);
                noStroke();
            }
            //Specific graphics
            if(extGraphics === true){
                fill(colorR, colorG, colorB, 60);
                var hand = -4*(0.5-data[11]/data[12])*(data[11]/data[12]-0.5);
                if(data[11] === 0 && !data[15]){
                    hand = 0;
                }
                if(data[0] === "minion" || data[0] === "skeleton" || data[0] === "golemite" || data[0] === "elixir golemite" || data[0] === "blob"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                }
                if(data[0] === "mega minion" || data[0] === "brawler"){
                    ellipse(tg(data[5])+(data[6]*7.5+1.5+6*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1.5+6*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1.5)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1.5)*cos(radians(data[16]+30)), 3, 3);
                }
                if(data[0] === "giant" || data[0] === "golem" || data[0] === "elixir golem" || data[0] === "ice golem"){
                    ellipse(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-30)), 6, 6);
                    ellipse(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]+30)), 6, 6);
                }
                if(data[0] === "goblin" || data[0] === "mini pekka" || data[0] === "knight" || data[0] === "barbarian" || data[0] === "healer"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "elite barbarian"){
                    ellipse(tg(data[5])+(data[6]*7.5)*sin(radians(data[16]-20)), tg(data[4])+(data[6]*7.5)*cos(radians(data[16]-20)), 2, 2);
                    ellipse(tg(data[5])+(data[6]*7.5)*sin(radians(data[16]+20)), tg(data[4])+(data[6]*7.5)*cos(radians(data[16]+20)), 2, 2);
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-40)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-40)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+40)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+40)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-40)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-40)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-40))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-40))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "guard" || data[0] === "recruit"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])));
                    line(tg(data[5])+(data[6]*7.5+2)*sin(radians(data[16]+30))+3*sin(radians(data[16]+90)), tg(data[4])+(data[6]*7.5+2)*cos(radians(data[16]+30))+3*cos(radians(data[16]+90)), tg(data[5])+(data[6]*7.5+2)*sin(radians(data[16]+30))-3*sin(radians(data[16]+90)), tg(data[4])+(data[6]*7.5+2)*cos(radians(data[16]+30))-3*cos(radians(data[16]+90)));
                    noStroke();
                }
                if(data[0] === "goblin giant" || data[0] === "pekka"){
                    ellipse(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-30)), 6, 6);
                    ellipse(tg(data[5])+(data[6]*7.5+2)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+2)*cos(radians(data[16]+30)), 6, 6);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(2);
                    line(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-30))+8*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-30))+8*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "musketeer"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+15)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+15)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(4);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "dart goblin"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-10)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-10)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]+10)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]+10)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(3);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16])), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "flying machine"){
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(5);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16])), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]))+3*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]))+3*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "hunter"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+15)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+15)), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(4);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-15))+3*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-15))+3*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "zappy"){
                    noFill();
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    ellipse(tg(data[5]), tg(data[4]), data[6]*11, data[6]*11);
                    ellipse(tg(data[5]), tg(data[4]), data[6]*7, data[6]*7);
                    noStroke();
                }
                if(data[0] === "sparky"){
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(2);
                    if((data[11]/data[12] > 0.7 && !data[15]) || ((data[11]-data[13])/data[12] > 0.7 && data[15])){
                        stroke(colorR, colorG, colorB, 30);
                    }
                    line(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]))+10*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]))+10*cos(radians(data[16]-90)), tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]))-10*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]))-10*cos(radians(data[16]-90)));
                    if((data[11]/data[12] > 0.4 && !data[15]) || ((data[11]-data[13])/data[12] > 0.4 && data[15])){
                        stroke(colorR, colorG, colorB, 30);
                    }
                    line(tg(data[5])+(data[6]*7.5+4)*sin(radians(data[16]))+7*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+4)*cos(radians(data[16]))+7*cos(radians(data[16]-90)), tg(data[5])+(data[6]*7.5+4)*sin(radians(data[16]))-7*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+4)*cos(radians(data[16]))-7*cos(radians(data[16]-90)));
                    if((data[11]/data[12] > 0.1 && !data[15]) || ((data[11]-data[13])/data[12] > 0.1 && data[15])){
                        stroke(colorR, colorG, colorB, 30);
                    }
                    line(tg(data[5])+(data[6]*7.5+7)*sin(radians(data[16]))+4*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+7)*cos(radians(data[16]))+4*cos(radians(data[16]-90)), tg(data[5])+(data[6]*7.5+7)*sin(radians(data[16]))-4*sin(radians(data[16]-90)), tg(data[4])+(data[6]*7.5+7)*cos(radians(data[16]))-4*cos(radians(data[16]-90)));
                    noStroke();
                }
                if(data[0] === "royal giant"){
                    ellipse(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+1+8*hand)*cos(radians(data[16]-15)), 6, 6);
                    ellipse(tg(data[5])+(data[6]*7.5+2)*sin(radians(data[16]+15)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+15)), 6, 6);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(4);
                    line(tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-15)), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-15)), tg(data[5])+(data[6]*7.5+2+8*hand)*sin(radians(data[16]-15))+7*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+2+8*hand)*cos(radians(data[16]-15))+7*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "spear goblin" || data[0] === "prince"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])), 2, 2);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "hog"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])), 4, 4);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])));
                    noStroke();
                }
                if(data[0] === "witch" || data[0] === "night witch"){
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1)*sin(radians(data[16]+30)), tg(data[4])+(data[6]*7.5+1)*cos(radians(data[16]+30)), 3, 3);
                    ellipse(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])), 3, 3);
                    stroke(colorR, colorG, colorB, 60);
                    strokeWeight(1);
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16])), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16])));
                    //Horns of staff
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16]))+sin(radians(data[16]-20)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16]))+cos(radians(data[16]-20)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16]))+5*sin(radians(data[16]-20)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16]))+5*cos(radians(data[16]-20)));
                    line(tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16]))+sin(radians(data[16]+20)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16]))+cos(radians(data[16]+20)), tg(data[5])+(data[6]*7.5+1+4*hand)*sin(radians(data[16]-30))+5*sin(radians(data[16]))+5*sin(radians(data[16]+20)), tg(data[4])+(data[6]*7.5+1+4*hand)*cos(radians(data[16]-30))+5*cos(radians(data[16]))+5*cos(radians(data[16]+20)));
                    noStroke();
                }
            }
            //Health
            if(data[0] === "ctower" || data[0] === "ptower"){
                fill(0, 0, 0, 100);
                rect(tg(data[5])-data[6]*10, tg(data[4])-data[6]*12.5, data[6]*20, data[6]*4);
                if(blueC === "blue"){
                    fill(0, 0, 255, 100);
                }
                else if(blueC === "purple"){
                    fill(255, 0, 127, 100);
                }
                else if(blueC === "orange"){
                    fill(255, 127, 0, 100);
                }
                else if(blueC === "green"){
                    fill(0, 200, 0, 100);
                }
                else if(blueC === "red"){
                    fill(255, 0, 0, 100);
                }
                rect(tg(data[5])-data[6]*10, tg(data[4])-data[6]*12.5, data[6]*20*data[1]/data[2], data[6]*4);
                textSize(data[6]*4);
                fill(255, 255, 255, 200);
                text(data[1], tg(data[5])-data[6]*10, tg(data[4])-data[6]*9+0.5);
            }
            //or name
            else{
                if(data[1] !== data[2]){
                    fill(0, 0, 0, 100);
                    rect(tg(data[5])-data[6]*5, tg(data[4])-data[6]*9.5, data[6]*10, data[6]*2);
                    if(blueC === "blue"){
                        fill(0, 0, 255, 100);
                    }
                    else if(blueC === "purple"){
                        fill(255, 0, 127, 100);
                    }
                    else if(blueC === "orange"){
                        fill(255, 127, 0, 100);
                    }
                    else if(blueC === "green"){
                        fill(0, 200, 0, 100);
                    }
                    else if(blueC === "red"){
                        fill(255, 0, 0, 100);
                    }
                    rect(tg(data[5])-data[6]*5, tg(data[4])-data[6]*9.5, data[6]*10*data[1]/data[2], data[6]*2);
                }
                fill(0, 0, 0, 200);
                textAlign(CENTER, CENTER);
                textSize(10);
                text(data[0][0]+data[0][1], tg(data[5]), tg(data[4]));
            }
            
            var kbResist = false;
            var mirrored = false;
            var mt1 = false;
            var amt1 = false;
            var am = false;
            //Snowflake checker for KB resistance and mirrored
            if(data.length === 25){
                var specialD = data[24];
                var j = specialD.length-1;
                while(j > -1){
                    var d = specialD[j];
                    if(d[0] === "resistance"){
                        kbResist = true;
                    }
                    if(d[0] === "mirror"){
                        mirrored = true;
                        if(d[1] === false){
                            //Mirror bois
                            data[1] = round(data[1]*1.1);
                            data[2] = round(data[2]*1.1);
                            data[3] = round(data[3]*1.1);
                            mt1 = true;
                            d[1] = true;
                        }
                        if(amt1 === "testing"){
                            amt1 = true;
                            data[1] = round(data[1]*10/11);
                            data[2] = round(data[2]*10/11);
                            data[3] = round(data[3]*10/11);
                            mirrored = false;
                            specialD.splice(j, 1);
                        }
                    }
                    if(d[0] === "antimirror"){
                        am = true;
                        if(d[1] === false){
                            amt1 = "testing";
                            d[1] = true;
                        }
                    }
                    j--;
                }
            }
            //Check for stunned
            var stunned = false;
            //Check for slowed
            var slowed = false;
            //Check for rage
            var raged = false;
            //Check for KB
            var kb = false;
            //Check for snared
            var snared = false;
            //Check for cloned
            var cloned = false;
            
            //Effect checker
            var effectD = data[23];
            var j = -1;
            if(effectD !== undefined){
                j = effectD.length-1;
            }
            var test = 0;
            while(j > -1){
                var d = effectD[j];
                if(d[0] === "stun" && d[1] > 0){
                    stunned = true;
                    d[1]--;
                    data[14] = -1;
                    data[15] = false;
                    if(d[1] === 0){
                        test = 1;
                    }
                }
                if(d[0] === "knockback" && d[1] > 0){
                    //["knockback", time, mtime, dir, dist]
                    d[1]--;
                    if(!kbResist){
                        kb = true;
                        if(!data[6]){
                            data[15] = false;
                        }
                        else{
                            data[11]--;
                        }
                        data[4] += cos(radians(d[3]))*d[4]/d[2];
                        data[5] += sin(radians(d[3]))*d[4]/d[2];
                    }
                    else{
                        d[1] = 0;
                    }
                }
                if(d[0] === "sudoKnockback" && d[1] > 0){
                    //["knockback", time, mtime, dir, dist]
                    d[1]--;
                    kb = true;
                    if(!data[6]){
                        data[15] = false;
                    }
                    else{
                        data[11]--;
                    }
                    data[4] += cos(radians(d[3]))*d[4]/d[2];
                    data[5] += sin(radians(d[3]))*d[4]/d[2];
                }
                if(d[0] === "slow" && d[1] > 0){
                    slowed = true;
                    d[1]--;
                }
                if(d[0] === "snare" && d[1] > 0){
                    snared = true;
                    d[1]--;
                }
                if(d[0] === "rage" && d[1] > 0){
                    if(raged){
                        effectD.splice(j, 1);
                    }
                    raged = true;
                    d[1]--;
                }
                if(d[0] === "nontargetable" && d[1] > 0){
                    d[1]--;
                }
                if(d[0] === "invulnerable" && d[1] > 0){
                    d[1]--;
                }
                if(d[0] === "uinvulnerable" && d[1] > 0){
                    d[1]--;
                }
                if(d[0] === "noCol" && d[1] > 0){
                    d[1]--;
                }
                if(d[0] === "cloned"){
                    if(d[1] > 1){
                        d[1] = 1;
                    }
                    d[2] = 1;
                    cloned = true;
                }
                if(d === undefined){
                    throw("REE");
                }
                j--;
            }
            
            var m = 1;
            if(slowed){
                m = 0.65;
            }
            if(raged){
                m *= 1.35;
            }
            var mv = m;
            if(snared){
                mv *= 0.15;
            }
            
            var projectileS = 810;
            var recoilD = 0;
            var recoilT = 0;
            //Cool gang
            var slow = 0;
            //Retain target tag
            var nrets = false;
            //Single split
            var singleSplit = false;
            //Chain gang
            var chain = false;
            //Spell gang
            var spell = 0;
            //AOE attack?
            var aoe = false;
            //Second AOE?
            //var aoe2 = false;
            //Can the troop defend itself?
            var defender = false;
            //Minimum range
            var mrange = -1;
            //Shotgun
            var shotgun = false;
            var spread = 10;
            //Can attack?
            var hitp = false;
            //Jump?
            var jump = false;
            //Snare?
            var snare = 0;
            //Deprioritize?
            var depriority = "";
            //How far has this moved uninterrupted?
            var moveU = -1;
            //Bandit dash
            var targetDa = -1;
            //Crown Tower reduction
            var ctmult = 1;
            //Miner
            var mtX = -1;
            var mtY = -1;
            //Directional splits and spawns
            var dirsplit = false;
            var dirspawn = false;
            //Firecracker spread
            var sprd = false;
            //Snowflake checker
            if(data.length === 25){
                var specialD = data[24];
                var j = -1;
                if(specialD !== undefined){
                    var j = specialD.length-1;
                }
                while(j > -1){
                    var d = specialD[j];
                    if(d[0] === "lifetime" && data[22] <= 0){
                        if(raged && data[18] !== "bomb"){
                            bTroops[i][1] -= 1.35*bTroops[i][2]/d[1];
                        }
                        else{
                            bTroops[i][1] -= bTroops[i][2]/d[1];
                        }
                    }
                    if(d[0] === "ps"){
                        projectileS = d[1];
                    }
                    if(d[0] === "split"){
                        split = d[1];
                    }
                    if(d[0] === "deathElixir"){
                        if(d.length > 1){
                            dElix = d[1];
                        }
                        else{
                            dElix = 1;
                        }
                    }
                    if(d[0] === "kamikaze"){
                        kami = true;
                    }
                    if(d[0] === "stun"){
                        zap = d[1];
                    }
                    if(d[0] === "weak-stun"){
                        if(stunned){
                            data[11] = data[12];
                        }
                    }
                    if(d[0] === "recoil"){
                        recoilD = d[1];
                        recoilT = d[2] || 9;
                    }
                    if(d[0] === "slow"){
                        slow = d[1];
                    }
                    if(d[0] === "retainTarget"){
                        nrets = true;
                    }
                    if(d[0] === "noTargetChange"){
                        singleSplit = true;
                    }
                    if(d[0] === "elixir" && data[22] <= 0 && !stunned){
                        d[1] -= m;
                        if(d[1] < 1 && elixirR < 10){
                            elixir++;
                            d[1] = d[2];
                        }
                    }
                    if(d[0] === "spawner" && !stunned){
                        if(data[22] <= 0){
                            d[1] -= mv; //NOTE: Move speed!
                        }
                        if(d[1] < 1){
                            var spawnd = d[3];
                            var k = spawnd.length-1;
                            while(k > -1){
                                var k4 = spawnd[k][4];
                                var k5 = spawnd[k][5];
                                if(dirspawn){
                                    var xt = spawnd[k][4];
                                    var yt = spawnd[k][5];
                                    k4 = xt*cos(radians(data[16]+180))+yt*cos(radians(data[16]+90));
                                    k5 = xt*sin(radians(data[16]+180))+yt*sin(radians(data[16]+90));
                                }
                                k4 = k4 + bTroops[i][4];
                                k5 = k5 + bTroops[i][5];
                                if(mirrored && am === false){
                                    spawnd[k][24].push(["mirror", false]);
                                }
                                if(cloned){
                                    spawnd[k][23].push(["cloned"]);
                                    spawnd[k][1] = 1;
                                    spawnd[k][2] = 1;
                                }
                                bTroops.push([spawnd[k][0], spawnd[k][1], spawnd[k][2], spawnd[k][3], k4, k5, spawnd[k][6], spawnd[k][7], spawnd[k][8], spawnd[k][9], spawnd[k][10], spawnd[k][11], spawnd[k][12], spawnd[k][13], spawnd[k][14], spawnd[k][15], 180, spawnd[k][17], spawnd[k][18], spawnd[k][19], spawnd[k][20], spawnd[k][21], spawnd[k][22], [], spawnd[k][24]]);
                                k--;
                            }
                            d[1] = d[2];
                        }
                    }
                    if(d[0] === "inferno" && data[22] <= 0){
                        if(stunned){
                            d[1] = 0;
                            data[14] = -1;
                            data[15] = false;
                            data[20] = true;
                        }
                        if(data[14] !== -1){
                            if(!rTDed[data[14]]){
                                d[1] += m;
                                if(d[1] < d[2]+data[13]){
                                    data[3] = d[3];
                                }
                                else if(d[1] < 2*d[2]+data[13]){
                                    data[3] = d[4];
                                }
                                else{
                                    data[3] = d[5];
                                }
                                if(mirrored){
                                    data[3] = round(data[3]*1.1);
                                }
                            }
                            else{
                                d[1] = 0;
                                data[14] = -1;
                                data[15] = false;
                                data[20] = true;
                            }
                        }
                        else{
                            d[1] = 0;
                        }
                    }
                    if(d[0] === "charge" && data[22] <= 0){
                        data[3] = d[3]; //ATK
                        data[8] = d[4]; //SPD
                        if(mirrored){
                            data[3] = round(data[3]*1.1);
                        }
                        if(data[15] === false && !stunned && !kb){
                            d[1] += mv*data[8]/spdm;
                            if(d[1] >= d[2]){
                                data[3] = d[5];
                                data[8] = d[6];
                                if(mirrored){
                                    data[3] = round(data[3]*1.1);
                                }
                                data[20] = false;
                            }
                            if(d[7] !== undefined){
                                aoe = ["spell", data[4], data[5], data[4], data[5], data[3], d[7], projectileS, [["ground"]]];
                            }
                        }
                        else{
                            d[1] = 0;
                        }
                        moveU = d[1];
                    }
                    if(d[0] === "chain"){
                        chain = d;
                        if(data[11] === 1){
                            chain[4] = [];
                            chain[1] = 2;
                        }
                    }
                    if(d[0] === "spell"){
                        if(mirrored){
                            d[1].push(["mirror", false]);
                        }
                        bNProj.push(["spell", 29, 9, data[4], data[5], data[3], data[17], projectileS, d[1]]);
                    }
                    if(d[0] === "instspell"){
                        if(mirrored){
                            d[1].push(["mirror", false]);
                        }
                        bNProj.push(["spell", data[4], data[5], data[4], data[5], data[3], data[17], projectileS, d[1]]);
                    }
                    if(d[0] === "ddmg"){
                        if(d[3] === undefined){
                            d[3] = [];
                        }
                        if(mt1){
                            d[1] = round(d[1]*1.1);
                        }
                        if(amt1){
                            d[1] = round(d[1]*10/11);
                        }
                        spell = ["spell", data[4], data[5], data[4], data[5], d[1], d[2], projectileS, d[3]];
                    }
                    if(d[0] === "sdmg"){
                        if(d[3] === undefined){
                            d[3] = [];
                        }
                        if(mirrored){
                            d[1] = round(d[1]*1.1);
                        }
                        bNProj.push(["spell", data[4], data[5], data[4], data[5], d[1], d[2], projectileS, d[3]]);
                        specialD.splice(j, 1);
                    }
                    if(d[0] === "aoea"){
                        if(d[1] === undefined){
                            d[1] = [];
                        }
                        aoe = ["spell", data[4], data[5], data[4], data[5], data[3], data[17], projectileS, d[1]];
                    }
                    if(d[0] === "sptrgt"){
                        if(d[1] === undefined){
                            d[1] = [];
                        }
                        if(data[14] !== -1){
                            aoe = ["spell", data[4], data[5], rTroops[data[14]][4], rTroops[data[14]][5], data[3], data[17], projectileS, d[1]];
                        }
                    }
                    if(d[0] === "defender"){
                        defender = d[1];
                    }
                    if(d[0] === "mrange"){
                        mrange = d[1];
                    }
                    if(d[0] === "shotgun"){
                        shotgun = d[1];
                        spread = d[2];
                    }
                    if(d[0] === "sprnge"){
                        if(data[14] !== -1){
                            var fx = d[3];
                            var ang = degrees(atan2(rTroops[data[14]][5]-data[5], rTroops[data[14]][4]-data[4]));
                            if(d.length > 4){
                                aoe = ["spell", data[4]+d[1]*cos(radians(ang)), data[5]+d[1]*sin(radians(ang)), data[4]+(d[1]+d[2])*cos(radians(ang)), data[5]+(d[1]+d[2])*sin(radians(ang)), data[3], data[17], projectileS, [["return", false, i, [d[4][0]]], d[3][0]]];
                            }
                            else{
                                aoe = ["spell", data[4]+d[1]*cos(radians(ang)), data[5]+d[1]*sin(radians(ang)), data[4]+(d[1]+d[2])*cos(radians(ang)), data[5]+(d[1]+d[2])*sin(radians(ang)), data[3], data[17], projectileS, fx];
                            }
                            //println(aoe);
                        }
                    }
                    if(d[0] === "hitp"){
                        //say(d);
                        if(data[11]+1 === data[12]){
                            d[1]++;
                            hitp = true;
                            if(d[1] === d[2]){
                                d[1] = 0;
                                data[11] -= m;
                            }
                        }
                    }
                    if(d[0] === "jumping"){
                        jump = true;
                        if(data[4] > 15 && data[4] < 17 && (data[5] < 2.9 || data[5] > 15.1 || (data[5] >4.1 && data[5] < 13.9))){
                            data[18] = "air";
                            data[23].push(["nontargetable", 1]);
                            mv = 1;
                            data[8] = 160;
                        }
                        else{
                            data[18] = "ground";
                            if(data[8] === 160){
                                data[8] = 120;
                            }
                        }
                    }
                    if(d[0] === "invis"){
                        if(!data[15]){
                            d[1]++;
                            if(d[1] > d[2]){
                                data[23].push(["nontargetable", 1]);
                                d[3] = 0;
                            }
                        }
                        else{
                            d[3]++;
                            if(d[3] < d[4]){
                                data[23].push(["nontargetable", 1]);
                            }
                            else{
                                d[1] = 0;
                            }
                        }
                    }
                    if(d[0] === "hiding"){
                        if(!data[15]){
                            d[1]++;
                            if(d[1] > d[2]){
                                data[23].push(["nontargetable", 1]);
                                data[23].push(["invulnerable", 1]);
                                d[3] = 0;
                            }
                        }
                        else{
                            d[3]++;
                            if(d[3] < d[4]){
                                data[23].push(["nontargetable", 1]);
                                data[23].push(["invulnerable", 1]);
                            }
                            else{
                                d[1] = 0;
                            }
                        }
                    }
                    if(d[0] === "link"){
                        if(d[1] === false){
                            d[1] = true;
                            var spawnd = d[2];
                            var k = spawnd.length-1;
                            while(k > -1){
                                var k4 = spawnd[k][4];
                                var k5 = spawnd[k][5];
                                spawnd[k][24].push(["linked", i, k4, k5]);
                                if(mirrored){
                                    spawnd[k][24].push(["mirror", false]);
                                }
                                k4 += bTroops[i][4];
                                k5 += bTroops[i][5];
                                spawnd[k][23].push(["nontargetable", 10000000]);
                                spawnd[k][23].push(["invulnerable", 10000000]);
                                spawnd[k][23].push(["uinvulnerable", 10000000]);
                                bTroops.push([spawnd[k][0], spawnd[k][1], spawnd[k][2], spawnd[k][3], k4, k5, spawnd[k][6], spawnd[k][7], spawnd[k][8], spawnd[k][9], spawnd[k][10], spawnd[k][11], spawnd[k][12], spawnd[k][13], spawnd[k][14], spawnd[k][15], 180, spawnd[k][17], spawnd[k][18], spawnd[k][19], spawnd[k][20], spawnd[k][21], spawnd[k][22], spawnd[k][23], spawnd[k][24]]);
                                k--;
                            }
                            d[1] = d[2];
                        
                        }
                    }
                    if(d[0] === "linked"){
                        cull = false;
                        //println("test");
                        if(bTroops[d[1]] !== "null"){
                            var effectL = bTroops[d[1]][23];
                            var g = effectL.length-1;
                            while(g > -1){
                                var f = effectL[g];
                                if(f[0] === "slow" && f[1] > 0){
                                    slowed = true;
                                }
                                if(f[0] === "rage" && f[1] > 0){
                                    raged = true;
                                }
                                if(f[0] === "stun" && f[1] > 0){
                                    stunned = true;
                                    data[14] = -1;
                                    data[15] = false;
                                }
                                m = 1;
                                if(slowed){
                                    m = 0.65;
                                }
                                if(raged){
                                    m *= 1.35;
                                }
                                mv = m;
                                if(snared){
                                    mv *= 0.15;
                                }
                                g--;
                            }
                            data[4] = bTroops[d[1]][4]+cos(radians(bTroops[d[1]][16]))*d[2]+cos(radians(bTroops[d[1]][16]-90))*d[3];
                            data[5] = bTroops[d[1]][5]+sin(radians(bTroops[d[1]][16]))*d[2]+sin(radians(bTroops[d[1]][16]-90))*d[3];
                        }
                        else{
                            bTDel[i] = true;
                        }
                        //println("test");
                    }
                    if(d[0] === "snare"){
                        snare = d[1];
                    }
                    if(d[0] === "retarget"){
                        if(data[11] === 1){
                            data[14] = -1;
                            data[15] = false;
                        }
                    }
                    if(d[0] === "deprioritize"){
                        depriority = d[1];
                    }
                    if(d[0] === "regen"){
                        if(data[1] !== data[2] && !data[15] && data[22] <= 0){
                            d[1] -= m;
                        }
                        if(mt1){
                            d[3] = round(d[3]*1.1);
                        }
                        if(amt1 === true){
                            d[3] = round(d[3]*10/11);
                        }
                        if(d[1] <= 0){
                            data[1] += d[3];
                            d[1] = d[2];
                            say("B"+i+" self-healed "+d[3]);
                        }
                    }
                    if(d[0] === "atkSpawn" && !stunned){
                        if(data[11] === 1){
                            var spawnd = d[1];
                            var k = spawnd.length-1;
                            while(k > -1){
                                var k4 = spawnd[k][4];
                                var k5 = spawnd[k][5];
                                k4 += bTroops[i][4];
                                k5 += bTroops[i][5];
                                if(mirrored && am === false){
                                    spawnd[k][24].push(["mirror", false]);
                                }
                                if(cloned){
                                    spawnd[k][23].push(["cloned"]);
                                    spawnd[k][1] = 1;
                                    spawnd[k][2] = 1;
                                }
                                bTroops.push([spawnd[k][0], spawnd[k][1], spawnd[k][2], spawnd[k][3], k4, k5, spawnd[k][6], spawnd[k][7], spawnd[k][8], spawnd[k][9], spawnd[k][10], spawnd[k][11], spawnd[k][12], spawnd[k][13], spawnd[k][14], spawnd[k][15], 180, spawnd[k][17], spawnd[k][18], spawnd[k][19], spawnd[k][20], spawnd[k][21], spawnd[k][22], spawnd[k][23], spawnd[k][24]]);
                                k--;
                            }
                        }
                    }
                    if(d[0] === "dash" && data[22] <= 0){
                        data[3] = d[3]; //ATK
                        data[8] = d[4]; //SPD
                        if(d[7] >= d[8]){
                            data[3] = d[5]; //ATK
                            data[8] = d[6]; //SPD
                            if(mirrored){
                                data[3] = round(data[3]*1.1);
                            }
                            data[20] = false; //instant
                            data[15] = true;
                            data[14] = d[9];
                            mv = 1;
                            data[23].push(["invulnerable", 3]);
                            data[23].push(["uinvulnerable", 3]);
                            data[23].push(["noCol", 3]);
                            cull = false;
                            bTDed[i] = false;
                            targetDa = d[9];
                            if(data[11] > 0 || d[9] !== data[14] || rTroops[d[9]] === undefined || kb){
                                d[7] = 0;
                                targetDa = -1;
                                data[20] = true;
                            }
                        }
                        else{
                            data[3] = d[3]; //ATK
                            data[8] = d[4]; //SPD
                            if(mirrored){
                                data[3] = round(data[3]*1.1);
                            }
                            if(data[14] !== -1 && data[15] === false){
                                var xdif = rTroops[data[14]][4] - data[4];
                                var ydif = rTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1] && cdis < d[2]){
                                    data[15] = true;
                                    if(d[9] !== data[14]){
                                        d[7] = 0;
                                    }
                                    d[9] = data[14];
                                }
                            }
                            if(data[15] === true && !stunned && d[7] < d[8]){
                                var xdif = rTroops[data[14]][4] - data[4];
                                var ydif = rTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1]){
                                    data[14] = d[9];
                                    var xdif = rTroops[data[14]][4] - data[4];
                                    var ydif = rTroops[data[14]][5] - data[5];
                                    var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[data[14]][6]/2-data[6]/2;
                                    if((cdis < d[1] || cdis > d[2]) && cdis > data[9]){
                                        data[15] = false;
                                    }
                                    d[7] += m;
                                    mv = 0;
                                }
                            }
                            else if(stunned || kb){
                                d[7] = 0;
                            }
                        }
                    }
                    if(d[0] === "jump" && data[22] <= 0){
                        data[3] = d[3]; //ATK
                        data[8] = d[4]; //SPD
                        if(mirrored){
                            data[3] = round(data[3]*1.1);
                        }
                        if(d[7] >= d[8]){
                            data[3] = d[5]; //ATK
                            data[8] = d[6]; //SPD
                            if(mirrored){
                                data[3] = round(data[3]*1.1);
                            }
                            data[20] = false; //instant
                            data[15] = true;
                            data[14] = d[9];
                            mv = 1;
                            data[23].push(["noCol", 1]);
                            cull = false;
                            rTDed[i] = false;
                            targetDa = d[9];
                            if(data[11] > 0 || d[9] !== data[14] || rTroops[d[9]] === undefined){
                                d[7] = 0;
                                targetDa = -1;
                            }
                            if(d[10] !== undefined){
                                if(d[11] === undefined){
                                    d[11] = [];
                                }
                                aoe = ["spell", data[4], data[5], data[4], data[5], data[3], d[10], projectileS, d[11]];
                            }
                        }
                        else{
                            data[3] = d[3]; //ATK
                            data[8] = d[4]; //SPD
                            if(mirrored){
                                data[3] = round(data[3]*1.1);
                            }
                            if(data[14] !== -1 && data[15] === false){
                                var xdif = rTroops[data[14]][4] - data[4];
                                var ydif = rTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1] && cdis < d[2]){
                                    data[15] = true;
                                    if(d[9] !== data[14]){
                                        d[7] = 0;
                                    }
                                    d[9] = data[14];
                                }
                            }
                            if(data[15] === true && !stunned && d[7] < d[8]){
                                var xdif = rTroops[data[14]][4] - data[4];
                                var ydif = rTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1]){
                                    data[14] = d[9];
                                    var xdif = rTroops[data[14]][4] - data[4];
                                    var ydif = rTroops[data[14]][5] - data[5];
                                    var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[data[14]][6]/2-data[6]/2;
                                    if((cdis < d[1] || cdis > d[2]) && cdis > data[9]){
                                        data[15] = false;
                                    }
                                    d[7] += m;
                                    mv = 0;
                                }
                            }
                            else if(stunned || kb){
                                d[7] = 0;
                            }
                        }
                    }
                    if(d[0] === "ctreduc"){
                        ctmult = d[1];
                    }
                    if(d[0] === "mining"){
                        if(d[3] === false){
                            d[1] = data[4];
                            d[2] = data[5];
                            data[4] = 29;
                            data[5] = 9;
                            d[3] = true;
                        }
                        mtX = d[1];
                        mtY = d[2];
                        data[23].push(["nontargetable", 1]);
                        var xdif = mtX - data[4];
                        var ydif = mtY - data[5];
                        var cdis = sqrt(xdif*xdif+ydif*ydif);
                        if(cdis < 1){
                            data[4] = mtX;
                            data[5] = mtY;
                            split = d[4];
                            rTDed[i] = true;
                            data[1] = 0;
                            mtX = -1;
                            mtY = -1;
                            mv = 0;
                        }
                    }
                    if(d[0] === "pull" && data[22] <= 0){
                        if(d[3] >= d[4]){
                            data[15] = true;
                            data[14] = d[5];
                            mv = 0;
                            var edata = rTroops[data[14]];
                            var xdif = edata[4] - data[4];
                            var ydif = edata[5] - data[5];
                            var cdis = sqrt(xdif*xdif+ydif*ydif);
                            var ang = degrees(atan2(ydif, xdif));
                            if(edata[7] === 0){
                                data[4] += 360*cos(radians(ang))/spdm;
                                data[5] += 360*sin(radians(ang))/spdm;
                                edata[23].push(["knockback", 1, 1, 0, 0]);
                            }
                            else{
                                edata[4] -= 360*cos(radians(ang))/spdm;
                                edata[5] -= 360*sin(radians(ang))/spdm;
                            }
                            cull = false;
                            targetDa = d[5];
                            if(data[11] > 0 && !stunned){
                                edata[23].push(["slow", 75]);
                            }
                            if(data[11] > 0 || d[5] !== data[14] || rTroops[d[5]] === undefined || stunned){
                                d[3] = 0;
                                d[6] = false;
                                targetDa = -1;
                            }
                        }
                        else{
                            if(data[14] !== -1 && data[15] === false){
                                var xdif = rTroops[data[14]][4] - data[4];
                                var ydif = rTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1] && cdis < d[2]){
                                    data[15] = true;
                                    if(d[5] !== data[14]){
                                        d[3] = 0;
                                        d[6] = false;
                                    }
                                    d[5] = data[14];
                                }
                            }
                            if(data[15] === true && !stunned && d[3] < d[4]){
                                var xdif = rTroops[data[14]][4] - data[4];
                                var ydif = rTroops[data[14]][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[data[14]][6]/2-data[6]/2;
                                if(cdis > d[1] || d[6]){
                                    data[14] = d[5];
                                    var xdif = rTroops[data[14]][4] - data[4];
                                    var ydif = rTroops[data[14]][5] - data[5];
                                    var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[data[14]][6]/2-data[6]/2;
                                    if(((cdis < d[1] || cdis > d[2]) && cdis > data[9]) || d[6]){
                                        data[15] = false;
                                    }
                                    d[3] += m;
                                    if(d[3] > d[4] - m*1.5 && d[6] === false){
                                        d[6] = true;
                                        d[3] -= cdis*2.5;
                                    }
                                    mv = 0;
                                }
                            }
                            else if(stunned || kb){
                                d[3] = 0;
                                d[6] = false;
                            }
                        }
                    }
                    if(d[0] === "dsplit"){
                        dirsplit = true;
                    }
                    if(d[0] === "dspawn"){
                        dirspawn = true;
                    }
                    if(d[0] === "spread"){
                        if(mt1){
                            d[4] = round(d[4]*1.1);
                        }
                        if(amt1 === true){
                            d[4] = round(d[4]*10/11);
                        }
                        sprd = d;
                    }
                    j--;
                }
            }
            
            if(data[22] <= 0 && !stunned && !kb){
            //If target about to commit die, retarget.
            var nope = false;
            if(data[14] !== -1 || targetDa !== -1){
                if(targetDa !== -1){
                    data[14] = targetDa;
                }
                var nou = false;
                var edata = rTroops[data[14]];
                var reee = false;
                //Snowflake checker
                if(edata !== undefined){
                if(edata.length === 25){
                    var specialD = edata[24];
                    var j = specialD.length-1;
                    while(j > -1){
                        var d = specialD[j];
                        if(d[0] === "noTargetChange"){
                            nou = true;
                        }
                        j--;
                    }
                }
                var effectD = edata[23];
                if(effectD !== undefined){
                var j = effectD.length-1;
                while(j > -1){
                    var d = effectD[j];
                    if(d[0] === "nontargetable" && d[1] > 0){
                        reee = true;
                    }
                    if(d[0] === "uinvulnerable" && d[1] > 0){
                        nope = true;
                    }
                    j--;
                }
                }
                if(mrange > 0){
                    var xdif = rTroops[data[14]][4] - data[4];
                    var ydif = rTroops[data[14]][5] - data[5];
                    var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[data[14]][6]/2-data[6]/2;
                    if(cdis < mrange){
                        data[14] = -1;
                        data[15] = false;
                    }
                }
                //println(i+": "+rTDed[data[14]]);
                }
                if(rTDed[data[14]] && !nou || edata === undefined|| reee){
                    data[14] = -1;
                    data[15] = false;
                }
            }
            
            //Targeting
            if(data[19] !== "none" && data[15] === false && (i !== 0 || bTroops[1] === "null" || bTroops[2] === "null" || bTroops[0][1] !== bTroops[0][2])){
                var j = rTroops.length-1;
                var dis = data[10];
                var bt = -1;
                var ddis = data[10];
                var dbt = -1;
                var priority = false;
                while(j > -1){
                    var xdif = rTroops[j][4] - data[4];
                    var ydif = rTroops[j][5] - data[5];
                    var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[j][6]/2-data[6]/2;
                    if(cdis <= dis && cdis >= mrange && !rTDed[j] && (rTroops[j][21] <= 0) && rTroops[j][18] !== "bomb" && ((data[19] === "all") || (data[19] === "troops" && rTroops[j][18] !== "building") || (data[19] === "ground" && (rTroops[j][18] === "ground" || rTroops[j][18] === "building" || rTroops[j][18] === "hovering")) || (data[19] === "buildings" && rTroops[j][18] === "building") || (data[19] === "air" && rTroops[j][18] === "air" || j <= 2))){
                        var nt = true;
                        var dep = false;
                        var effectED = rTroops[j][23];
                        var l = -1;
                        if(effectED !== undefined){
                            l = effectED.length-1;
                        }
                        var test = 0;
                        while(l > -1){
                            var d = effectED[l];
                            if(d === undefined){
                                throw("REE");
                            }
                            if(d[0] === "nontargetable" && d[1] > 0){
                                nt = false;
                            }
                            if(d[0] === depriority && d[1] > 0){
                                dep = true;
                            }
                            l--;
                        }
                        if(nt && dep){
                            ddis = cdis;
                            dbt = j;
                        }
                        if(nt && dep === false){
                            priority = true;
                            dis = cdis;
                            bt = j;
                        }
                    }
                    j--;
                    
                }
                if(priority){
                    data[14] = bt;
                }
                else{
                    data[14] = dbt;
                }
            }
            if(data[14] === -1){
                data[20] = true;
            }
            else{
                cull = false;
            }
            
            //Debug targeting
            if(testing){
                if(data[14] === -1){
                    fill(0, 0, 255);
                    rect(580, 10*i, 10, 10);
                }
                else{
                    fill(0, 255, 0);
                    rect(580, 10*i, 10, 10);
                    fill(0, 0, 0);
                    textAlign(CENTER, CENTER);
                    textSize(10);
                    text(data[14], 585, 10*i+5);
                }
            }
            
            //Ground movement beta (!! IMPORTANT BLUE CHANGE !!)
            var tdir = data[16];
            if(data[14] === -1){
                if(mtX !== -1 || mtY !== -1){
                    var x = data[4];
                    var y = data[5];
                    if(mtX < 17 && data[4] > 17){
                        mtX = 17;
                        if(mtY < 9){
                            mtY = 4.1;
                        }
                        else{
                            mtY = 13.9;
                        }
                    }
                    var dx = mtX - x;
                    var dy = mtY - y;
                    if(dx > dy - 0.2 && dx < dy + 0.2 && dx > 0){
                        data[4] += mv*(sqrt(2)/2)*data[8]/spdm;
                        data[5] += mv*(sqrt(2)/2)*data[8]/spdm;
                    }
                    else if(dx > -dy - 0.2 && dx < -dy + 0.2 && dx > 0){
                        data[4] += mv*(sqrt(2)/2)*data[8]/spdm;
                        data[5] -= mv*(sqrt(2)/2)*data[8]/spdm;
                    }
                    else if(dx > dy - 0.2 && dx < dy + 0.2 && dx < 0){
                        data[4] -= mv*(sqrt(2)/2)*data[8]/spdm;
                        data[5] -= mv*(sqrt(2)/2)*data[8]/spdm;
                    }
                    else if(dx > -dy - 0.2 && dx < -dy + 1 && dx < 0){
                        data[4] -= mv*(sqrt(2)/2)*data[8]/spdm;
                        data[5] += mv*(sqrt(2)/2)*data[8]/spdm;
                    }
                    else if(dx > dy + 0.2 && dx > 0){
                        data[4] += mv*data[8]/spdm;
                    }
                    else if(dx < dy - 0.2 && dx < 0){
                        data[4] -= mv*data[8]/spdm;
                    }
                    else if(dy > dx + 0.2 && dy > 0){
                        data[5] += mv*data[8]/spdm;
                    }
                    else if(dy < dx - 0.2 && dy < 0){
                        data[5] -= mv*data[8]/spdm;
                    }
                }
                else if(data[18] === "air" || data[18] === "hovering" || data[4] < 15){
                    if(data[5] <= 9){
                        if(rTroops[1] !== "null"){
                            var edata = rTroops[1];
                            var xdif = edata[4] - data[4];
                            var ydif = edata[5] - data[5];
                            var cdis = sqrt(xdif*xdif+ydif*ydif);
                            var ang = degrees(atan2(ydif, xdif));
                            tdir = ang;
                            data[4] += mv*data[8]*cos(radians(ang))/spdm;
                            data[5] += mv*data[8]*sin(radians(ang))/spdm;
                        }
                        else if(rTroops[0] !== "null"){
                            var edata = rTroops[0];
                            var xdif = edata[4] - data[4];
                            var ydif = edata[5] - data[5];
                            var cdis = sqrt(xdif*xdif+ydif*ydif);
                            var ang = degrees(atan2(ydif, xdif));
                            tdir = ang;
                            data[4] += mv*data[8]*cos(radians(ang))/spdm;
                            data[5] += mv*data[8]*sin(radians(ang))/spdm;
                        }
                    }
                    if(data[5] > 9){
                        if(rTroops[2] !== "null"){
                            var edata = rTroops[2];
                            var xdif = edata[4] - data[4];
                            var ydif = edata[5] - data[5];
                            var cdis = sqrt(xdif*xdif+ydif*ydif);
                            var ang = degrees(atan2(ydif, xdif));
                            tdir = ang;
                            data[4] += mv*data[8]*cos(radians(ang))/spdm;
                            data[5] += mv*data[8]*sin(radians(ang))/spdm;
                        }
                        else if(rTroops[0] !== "null"){
                            var edata = rTroops[0];
                            var xdif = edata[4] - data[4];
                            var ydif = edata[5] - data[5];
                            var cdis = sqrt(xdif*xdif+ydif*ydif);
                            var ang = degrees(atan2(ydif, xdif));
                            tdir = ang;
                            data[4] += mv*data[8]*cos(radians(ang))/spdm;
                            data[5] += mv*data[8]*sin(radians(ang))/spdm;
                        }
                    }
                }
                else{
                    //NEW
                    if(data[4] > 30){
                        var ang = 270;
                        if(data[5] < 9 && data[5] > 6){
                            ang = degrees(atan2(30-data[4], 6.75-data[5]));
                        }
                        else if(data[5] >= 9 && data[5] < 12){
                            ang = degrees(atan2(30-data[4], 11.25-data[5]));
                        }
                        tdir = (90-ang);
                        data[4] += mv*data[8]*sin(radians(ang))/spdm;
                        data[5] += mv*data[8]*cos(radians(ang))/spdm;
                    }
                    else if(data[4] > 26.5){
                        var ang = 270;
                        if(bTroops[1] !== "null"){
                            if(data[5] <= 3.5){
                                ang = degrees(atan2(26.5-data[4], 1.75-data[5]));
                            }
                            else if(data[5] < 9 && data[5] > 3.5){
                                ang = degrees(atan2(26.5-data[4], 5.25-data[5]));
                            }
                        }
                        if(bTroops[2] !== "null"){
                            if(data[5] >= 9 && data[5] < 14.5){
                                ang = degrees(atan2(26.5-data[4], 12.75-data[5]));
                            }
                            else if(data[5] >= 14.5){
                                ang = degrees(atan2(26.5-data[4], 16.25-data[5]));
                            }
                        }
                        tdir = (90-ang);
                        data[4] += mv*data[8]*sin(radians(ang))/spdm;
                        data[5] += mv*data[8]*cos(radians(ang))/spdm;
                    }
                    else if(!jump){
                        if(data[4] > 17){
                            var ang = 270;
                            if(data[5] < 2.9){
                                ang = degrees(atan2(17-data[4], 2.9-data[5]));
                            }
                            else if(data[5] < 9 && data[5] > 4.1){
                                ang = degrees(atan2(17-data[4], 4.1-data[5]));
                            }
                            else if(data[5] >= 9 && data[5] < 13.9){
                                ang = degrees(atan2(17-data[4], 13.9-data[5]));
                            }
                            else if(data[5] > 15.1){
                                ang = degrees(atan2(17-data[4], 15.1-data[5]));
                            }
                            tdir = (90-ang);
                            data[4] += mv*data[8]*sin(radians(ang))/spdm;
                            data[5] += mv*data[8]*cos(radians(ang))/spdm;
                        }
                        else if(data[4] < 7){
                            if(data[5] < 7){
                                data[4] -= mv*data[8]*sin(radians(45))/spdm;
                                data[5] += mv*data[8]*cos(radians(45))/spdm;
                                tdir = -225;
                            }
                            else if(data[5] > 11){
                                data[4] -= mv*data[8]*sin(radians(45))/spdm;
                                data[5] -= mv*data[8]*cos(radians(45))/spdm;
                                tdir = -135;
                            }
                            else{
                                data[4] -= mv*data[8]/spdm;
                                tdir = -180;
                            }
                        }
                        else{
                            data[4] -= mv*data[8]/spdm;
                            tdir = -180;
                        }
                    }
                    else{
                        if(data[5] <= 9){
                            if(rTroops[1] !== "null"){
                                var edata = rTroops[1];
                                var xdif = edata[4] - data[4];
                                var ydif = edata[5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif);
                                var ang = degrees(atan2(ydif, xdif));
                                tdir = ang;
                                data[4] += mv*data[8]*cos(radians(ang))/spdm;
                                data[5] += mv*data[8]*sin(radians(ang))/spdm;
                            }
                            else if(rTroops[0] !== "null"){
                                var edata = rTroops[0];
                                var xdif = edata[4] - data[4];
                                var ydif = edata[5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif);
                                var ang = degrees(atan2(ydif, xdif));
                                tdir = ang;
                                data[4] += mv*data[8]*cos(radians(ang))/spdm;
                                data[5] += mv*data[8]*sin(radians(ang))/spdm;
                            }
                        }
                        if(data[5] > 9){
                            if(rTroops[2] !== "null"){
                                var edata = rTroops[2];
                                var xdif = edata[4] - data[4];
                                var ydif = edata[5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif);
                                var ang = degrees(atan2(ydif, xdif));
                                tdir = ang;
                                data[4] += mv*data[8]*cos(radians(ang))/spdm;
                                data[5] += mv*data[8]*sin(radians(ang))/spdm;
                            }
                            else if(rTroops[0] !== "null"){
                                var edata = rTroops[0];
                                var xdif = edata[4] - data[4];
                                var ydif = edata[5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif);
                                var ang = degrees(atan2(ydif, xdif));
                                tdir = ang;
                                data[4] += mv*data[8]*cos(radians(ang))/spdm;
                                data[5] += mv*data[8]*sin(radians(ang))/spdm;
                            }
                        }
                    }
                }
            }
            else if(!data[15] || targetDa !== -1){
                //We're targeting something, so move to it!
                var edata = rTroops[data[14]];
                var xdif = edata[4] - data[4];
                var ydif = edata[5] - data[5];
                var cdis = sqrt(xdif*xdif+ydif*ydif);
                var measure = 0;
                if(data[4] < 15){
                    measure = 15-data[4];
                }
                if(data[4] > 17){
                    measure = data[4]-17;
                }
                measure = cdis*(measure-xdif)/xdif;
                //say(measure + data[9]);
                if(abs(measure) < data[9]){
                    measure = true;
                }
                else if(data[4] > 17 && edata[4] > 17){
                    measure = true;
                }
                else if(data[4] < 15 && edata[4] < 15){
                    measure = true;
                }
                else{
                    measure = false;
                }
                if(data[18] === "air" || data[18] === "hovering" || jump || measure || targetDa !== -1){
                    var ang = degrees(atan2(ydif, xdif));
                    tdir = ang;
                    data[4] += mv*data[8]*cos(radians(ang))/spdm;
                    data[5] += mv*data[8]*sin(radians(ang))/spdm;
                }
                else if(data[4] < 15){
                    //say(1);
                    var ang = 90;
                    if(data[5] < 2.9){
                        ang = degrees(atan2(15-data[4], 2.9-data[5]));
                    }
                    else if(data[5] < 9 && data[5] > 4.1){
                        ang = degrees(atan2(15-data[4], 4.1-data[5]));
                    }
                    else if(data[5] >= 9 && data[5] < 13.9){
                        ang = degrees(atan2(15-data[4], 13.9-data[5]));
                    }
                    else if(data[5] > 15.1){
                        ang = degrees(atan2(15-data[4], 15.1-data[5]));
                    }
                    tdir = (90-ang);
                    data[4] += mv*data[8]*sin(radians(ang))/spdm;
                    data[5] += mv*data[8]*cos(radians(ang))/spdm;
                }
                else if(data[4] > 17){
                    //say(2);
                    var ang = 270;
                    if(data[5] < 2.9){
                        ang = degrees(atan2(17-data[4], 2.9-data[5]));
                    }
                    else if(data[5] < 9 && data[5] > 4.1){
                        ang = degrees(atan2(17-data[4], 4.1-data[5]));
                    }
                    else if(data[5] >= 9 && data[5] < 13.9){
                        ang = degrees(atan2(17-data[4], 13.9-data[5]));
                    }
                    else if(data[5] > 15.1){
                        ang = degrees(atan2(17-data[4], 15.1-data[5]));
                    }
                    tdir = (90-ang);
                    data[4] += mv*data[8]*sin(radians(ang))/spdm;
                    data[5] += mv*data[8]*cos(radians(ang))/spdm;
                }
                else if(xdif >= 0){
                    //say(3);
                    var ang = 90;
                    tdir = 90-ang;
                    data[4] += mv*data[8]*sin(radians(ang))/spdm;
                    data[5] += mv*data[8]*cos(radians(ang))/spdm;
                }
                else if(xdif < 0){
                    //say(4);
                    var ang = 270;
                    tdir = 90-ang;
                    data[4] += mv*data[8]*sin(radians(ang))/spdm;
                    data[5] += mv*data[8]*cos(radians(ang))/spdm;
                }
            }
            data[16] = tdir;
            
            //Shooting
            if(data[14] !== -1){ //if target !== -1
                var edata = rTroops[data[14]];
                var xdif = edata[4] - data[4];
                var ydif = edata[5] - data[5];
                var cdis = sqrt(xdif*xdif+ydif*ydif)-edata[6]/2-data[6]/2;
                if(cdis <= data[9]){ //if in range
                    data[16] = degrees(atan2(ydif, xdif));
                    if(!data[15]){ //if not locked
                        data[15] = true; //lock
                        if(data[20]){
                            data[11] += data[13]; //add lock firing penalty
                        }
                        data[20] = false;
                    }
                    if(data[11] < 1){ //Ready to launch metaphorical tactical nuke?
                        if(data[14] <= 2){
                            say("B"+i+" attacks R"+data[14]+" for "+floor(data[3]*ctmult));
                        }
                        else{
                            say("B"+i+" attacks R"+data[14]+" for "+data[3]);
                        }
                        data[11] += data[12]; //cool = maxCool
                        var orly = false;
                        if(edata[1] < data[3]){
                            rTDed[data[14]] = 1;
                            say("Blue "+i+" finishes Red "+data[14]);
                        }
                        if(aoe !== false){
                            if(shotgun !== false){
                                //aoe = ["spell", data[4], data[5], bTroops[data[14]][4], bTroops[data[14]][5], data[3], data[17], projectileS, d[1]];
                                var ang = degrees(atan2(aoe[4]-aoe[2], aoe[3]-aoe[1]));
                                var shotgunUsed = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                                var k = shotgun - 1;
                                var delay = 0;
                                while(k > -1){
                                    var tester = -1;
                                    while(tester === -1){
                                        tester = floor(random()*shotgun);
                                        if(shotgunUsed[tester] === 0){
                                            shotgunUsed[tester] = 1;
                                            var dire = (ang+(tester-floor(shotgun/2))*spread);
                                            bNProj.push([aoe[0], aoe[1]+0.65*cos(radians(ang)), aoe[2]+0.65*sin(radians(ang)), aoe[1]+0.25*cos(radians(ang))+6.5*cos(radians(dire)), aoe[2]+0.25*sin(radians(ang))+6.5*sin(radians(dire)), aoe[5], aoe[6], aoe[7], [["pass", 0, 6.5, []], ["killOnHit"], ["wait", delay]]]);
                                            delay += 1;
                                            k--;
                                        }
                                        else{
                                            tester = -1;
                                        }
                                    }
                                }
                            }
                            else{
                                bNProj.push(aoe);
                            }
                        }
                        else if(data[9] < 2 && projectileS === 810 && data[17] === 0){ //Auto-default to melee if small range
                            if(!nope){
                                if(data[14] <= 2){
                                    rTroops[data[14]][1] -= floor(data[3]*ctmult);
                                }
                                else{
                                    rTroops[data[14]][1] -= data[3];
                                }
                                //subtract your attack from its health
                            }
                            orly = true;
                        }
                        else{
                            //["name", x, y, target, damage, speed, aoe, targetable, snowflake]
                            if(zap > 0){
                                if(chain !== false){
                                    bProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19], [["stun", zap], chain]]);
                                }
                                else{
                                    bProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19], [["stun", zap]]]);
                                }
                                orly = true;
                            }
                            else if(slow > 0){
                                bProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19], [["slow", slow]]]);
                                orly = true;
                            }
                            else if(snare > 0){
                                bProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19], [["snare", snare]]]);
                            }
                            else if(sprd !== false){
                                bProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19], [sprd]]);
                            }
                            else{
                                bProj.push(["arrow", data[4], data[5], data[14], data[3], projectileS, data[17], data[19]]);
                                orly = true;
                            }
                        }
                        //Defense
                        if(defender !== false){
                            //[chain, 2, 3.5, 159, []]
                            var j = rTroops.length-1;
                            var dis = defender;
                            var bt = -1;
                            while(j > -1){
                                var xdif = rTroops[j][4] - data[4];
                                var ydif = rTroops[j][5] - data[5];
                                var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[j][6]/2-data[6]/2;
                                if(cdis <= dis && rTroops[j][18] !== "bomb" && rTroops[j][18] !== "link" && !rTDed[j] && (rTroops[j][21] <= 0)){
                                    var nt = true;
                                    var effectED = rTroops[j][23];
                                    var l = -1;
                                    if(effectED !== undefined){
                                        l = effectED.length-1;
                                    }
                                    var test = 0;
                                    while(l > -1){
                                        var d = effectED[l];
                                        if(d[0] === "nontargetable" && d[1] > 0){
                                            nt = false;
                                        }
                                        l--;
                                    }
                                    if(nt){
                                        if(bt === -1 || data[14] !== j){
                                            dis = cdis;
                                            bt = j;
                                        }
                                    }
                                }
                                j--;
                            }
                            if(bt !== -1){
                                bProj.push(["arrow", data[4], data[5], bt, data[3], projectileS, 0, "all", [["stun", zap]]]);
                                say("B"+i+" attacks R"+bt+" for "+data[3]);
                            }
                        }
                        //Recoil
                        if(recoilD > 0){
                            var a = degrees(atan2(data[5]-edata[5], data[4]-edata[4]));
                            data[23].push(["sudoKnockback", recoilT, recoilT, a, recoilD, true]);
                        }
                        if(kami){
                            data[1] = 0;
                        }
                    }
                }
                else{
                    data[15] = false;
                }
            }
            if(data[11] > 0 && !hitp){ //if cool > 0
                data[11] -= m; //cool -= speedMult;
            }
            
            //Debug shooting
            if(testing){
                if(data[14] !== -1){
                    fill(255, 255, 255);
                    if(data[15]){
                        fill(255, 255, 0);
                    }
                    ellipse(595, 10*i+5, 10, 10);
                    fill(0, 0, 0);
                    text(data[11], 595, 10*i+5);
                }
            }
            
            }
            else{
                bTroops[i][22]--;
            }
            
            //Cap
            if(data[1] > data[2]){
                data[1] = data[2];
                say(i+" hit HP cap");
            }
            
            //CTRL-ALT-DEL if dead
            if(data[1] <= 0){
                if(spell !== 0){
                    bNProj.push(spell);
                }
                if(split !== false){
                    var troopsP = split;
                    var j = troopsP.length;
                    j--;
                    while(j > -1){
                        if(dirsplit){
                            var xt = troopsP[j][4];
                            var yt = troopsP[j][5];
                            troopsP[j][4] = bTroops[i][4]+xt*cos(radians(bTroops[i][16]))+yt*cos(radians(bTroops[i][16]-90));
                            troopsP[j][5] = bTroops[i][5]+xt*sin(radians(bTroops[i][16]))+yt*sin(radians(bTroops[i][16]-90));
                        }
                        else{
                            troopsP[j][4] += bTroops[i][4];
                            troopsP[j][5] += bTroops[i][5];
                        }
                        troopsP[j][16] = 180;
                        if(nrets){
                            //Target
                            troopsP[j][14] = bTroops[i][14];
                            //Cooldown
                            troopsP[j][11] = bTroops[i][11];
                            //Penalty
                            troopsP[j][20] = bTroops[i][20];
                            //Effects
                            troopsP[j][23] = bTroops[i][23];
                        }
                        if(cloned){
                            troopsP[j][23].push(["cloned"]);
                            troopsP[j][1] = 1;
                            troopsP[j][2] = 1;
                        }
                        if(dirsplit){
                            //println(troopsP[j][23]);
                            var k = troopsP[j][23].length-1;
                            while(k >= 0){
                                if(troopsP[j][23][k][0] === "knockback"){
                                    troopsP[j][23][k][3] -= bTroops[i][16]-90;
                                }
                                k--;
                            }
                        }
                        if(troopsP[j].length > 24){
                            var k = troopsP[j][24].length-1;
                            while(k >= 0){
                                if(troopsP[j][24][k][0] === "charge" && moveU >= 0){
                                    troopsP[j][24][k][1] = moveU;
                                }
                                k--;
                            }
                            if(mirrored){
                                troopsP[j][24].push(["mirror", false]);
                            }
                        }
                        else if(mirrored){
                            troopsP[j][24] = [["mirror", false]];
                        }
                        if(singleSplit){
                            bTroops[i] = troopsP[j];
                        }
                        else{
                            bTroops.push(troopsP[j]);
                        }
                        j--;
                    }
                }
                if(dElix){
                    elixirR+=dElix;
                }
                if(!singleSplit){
                    bTDel[i] = 1;
                }
                else{
                    bTDed[i] = 0;
                }
            }
            }
            
            bTroops[i][21]--;
            }
            
            //Cycle time
            i--;
            textAlign(LEFT, BASELINE);
        }
    }
    
    //if(rNProj.length > 0){
    //    println(rNProj.length);
    //}
    
    //Can something be dead?
    var testBDeath = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var testRDeath = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    
    //No deletion except in the frame
    rPDel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    bPDel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    
    //Enemy targeting projectiles
    var i = rProj.length;
    if(i > 0){
        i--;
        while(i > -1){
            //["name", x, y, target, damage, speed, aoe]
            var data = rProj[i];
            if(redC === "red"){
                fill(255, 0, 0);
            }
            else if(redC === "purple"){
                fill(255, 0, 127);
            }
            else if(redC === "orange"){
                fill(255, 127, 0);
            }
            else if(redC === "green"){
                fill(0, 200, 0);
            }
            else if(redC === "blue"){
                fill(0, 0, 255);
            }
            ellipse(tg(data[2]), tg(data[1]), 5, 5);
            var edata = bTroops[data[3]];
            testBDeath[data[3]] = 1;
            //musketeer,26,598,181,14.863636363636388,14.5,1,5,60,6,6,-15,33,18,-1,false,0,0,ground,all,true,-146,0,knockback,0,30,180,1.8
            //arrow,6.5,14.5,5,90,810,0,all
            //1
            var xdif = edata[4] - data[1];
            var ydif = edata[5] - data[2];
            var cdis = sqrt(xdif*xdif+ydif*ydif);
            var uinv = false;
            //Enemy effects (ultra invulnerable)
            if(edata[23] !== undefined){
                var m = edata[23].length-1;
                while(m > -1){
                    if(edata[23][m] !== undefined){
                        if(edata[23][m][0] === "uinvulnerable" && edata[23][m][1] > 0){
                            uinv = true;
                        }
                    }
                    m--;
                }
            }
            var targetA = data[7];
            //Apply stun?
            var stun = 0;
            //Apply slow?
            var slow = 0;
            //Chain gang?
            var chain = false;
            //Firecracker spread?
            var spread = false;
            //Snaring?
            var snare = 0;
            if(data.length > 8){
                //Effect checker
                var effectD = data[8];
                var j = effectD.length-1;
                while(j > -1){
                    var d = effectD[j];
                    if(d[0] === "stun" && d[1] > 0){
                        stun = d[1];
                    }
                    if(d[0] === "slow" && d[1] > 0){
                        slow = d[1];
                    }
                    if(d[0] === "chain"){
                        chain = d;
                    }
                    if(d[0] === "snare" && d[1] > 0){
                        snare = d[1];
                    }
                    if(d[0] === "spread"){
                        spread = d;
                    }
                    j--;
                }
            }
            if(data[6] === undefined){
                data[6] = 0;
            }
            var ang = degrees(atan2(ydif, xdif));
            var boomer1 = data[1]+data[5]*cos(radians(ang))/spdm;
            var boomer2 = data[2]+data[5]*sin(radians(ang))/spdm;
            //println(boomer1 + " " + boomer2 + " " + data[1] + " " + data[2] + " " + edata[4] + " " + edata[5] + " " + edata[6]*0.5);
            if(projLines){
                stroke(255, 0, 0);
                line(tg(boomer2), tg(boomer1), tg(data[2]), tg(data[1]));
                noStroke();
            }
            if(cdis < edata[6]*0.5 || doesLineInterceptCircle(boomer1, boomer2, data[1], data[2], edata[4], edata[5], edata[6]*0.5) === true){
                if(spread !== false){
                    var dire = degrees(atan2(edata[5]-data[2], edata[4]-data[1])-(((spread[1]-1)/2)*spread[2]));
                    var k = 0;
                    while(k < spread[1]){
                        rNProj.push(["shrapnel", edata[4], edata[5], edata[4]+spread[3]*cos(radians(dire)), edata[5]+spread[3]*sin(radians(dire)), spread[4], 0.2, 600, [["pass", 0, spread[3], []]]]);
                        dire += spread[2];
                        k++;
                    }
                    rPDel[i] = 1;
                }
                if(data[6] <= 0){
                    rPDel[i] = 1;
                    if(!uinv){
                    bTroops[data[3]][1] -= data[4];
                    if(stun > 0){
                        bTroops[data[3]][23].push(["stun", stun]);
                    }
                    if(slow > 0){
                        bTroops[data[3]][23].push(["slow", slow]);
                    }
                    if(snare > 0){
                        bTroops[data[3]][23].push(["snare", snare]);
                    }
                    if(chain !== false){
                        //[chain, 2, 3.5, 159, []]
                        chain[4].push(data[3]);
                        var j = bTroops.length-1;
                        var dis = chain[2];
                        var bt = -1;
                        while(j > -1){
                            var xdif = bTroops[j][4] - data[1];
                            var ydif = bTroops[j][5] - data[2];
                            var cdis = sqrt(xdif*xdif+ydif*ydif)-bTroops[j][6]/2-data[6]/2;
                            if(cdis <= dis  && !bTDed[j] && (bTroops[j][21] <= 0)){
                                var i = chain[4].length-1;
                                var canTarget = true;
                                while(i > -1){
                                    if(chain[4][i] === j){
                                        canTarget = false;
                                    }
                                    i--;
                                }
                                var m = 0;
                                while(m < bTroops[j][23].length){
                                    var d = bTroops[j][23][m];
                                    if(d[0] === "nontargetable" && d[1] > 0){
                                        canTarget = false;
                                    }
                                    m++;
                                }
                                if(canTarget){
                                    dis = cdis;
                                    bt = j;
                                }
                            }
                            j--;
                    
                        }
                        if(bt !== -1 && chain[1] > 0){
                            rProj.push(["arrow", data[1], data[2], bt, chain[3], data[5], data[6], data[7], [["stun", stun], chain]]);
                            chain[1]--;
                        }
                    }
                    }
                    else{
                        say("RP"+i+" is blocked by B"+data[3]);
                        bTDed[data[3]] = false;
                    }
                }
                else{
                    var j = bTroops.length-1;
                    var dis = data[6];
                    data[1] = edata[4];
                    data[2] = edata[5];
                    while(j > -1){
                        var xdifa = bTroops[j][4] - data[1];
                        var ydifa = bTroops[j][5] - data[2];
                        var cdisa = sqrt(xdifa*xdifa+ydifa*ydifa)-bTroops[j][6]/2;
                        //if(j === 3 && i === 0){
                        //    say(bTDed[j]);
                        //}
                        if(cdisa <= dis  && (bTroops[j][21] <= 0) && bTroops[j][18] !== "bomb" && ((targetA === "all") || (targetA === "ground" && (bTroops[j][18] === "ground" || bTroops[j][18] === "building" || bTroops[j][18] === "hovering")) || (targetA === "buildings" && bTroops[j][18] === "building") || (targetA[19] === "air" && bTroops[j][18] === "air" || j <= 2))){
                            //Enemy effects (ultra invulnerable)
                            var m = bTroops[j][23].length-1;
                            var uinv = false;
                            while(m > -1){
                                if(bTroops[j][23][m] !== undefined){
                                    if(bTroops[j][23][m][0] === "uinvulnerable" && bTroops[j][23][m][1] > 0){
                                        uinv = true;
                                    }
                                }
                                m--;
                            }
                            rPDel[i] = 1;
                            if(!uinv){
                                bTroops[j][1] -= data[4];
                                say("RP"+i+" splashed "+j+" for "+data[4]);
                                if(stun > 0){
                                    bTroops[j][23].push(["stun", stun]);
                                }
                                if(slow > 0){
                                    bTroops[j][23].push(["slow", slow]);
                                }
                                if(snare > 0){
                                    bTroops[j][23].push(["snare", snare]);
                                    say(j+" snared");
                                }
                            }
                            else{
                                say("RP"+i+" cannot hit u-inv B"+j);
                            }
                        }
                        j--;
                    }
                }
            }
            if(bTroops[data[3]] === null || bTroops[data[3]] === "null"){
                say("Red projectile "+i+" deleted");
                rPDel[i] = 1;
            }
            var ang = degrees(atan2(ydif, xdif));
            data[1] += data[5]*cos(radians(ang))/spdm;
            data[2] += data[5]*sin(radians(ang))/spdm;
            cull = false;
            i--;
        }
    }
    
    //Your targeting projectiles
    var i = bProj.length;
    if(i > 0){
        i--;
        while(i > -1){
            //["name", x, y, target, damage, speed, aoe, [special]]
            var data = bProj[i];
            if(blueC === "blue"){
                fill(0, 0, 255);
            }
            else if(blueC === "purple"){
                fill(255, 0, 127);
            }
            else if(blueC === "orange"){
                fill(255, 127, 0);
            }
            else if(blueC === "green"){
                fill(0, 200, 0);
            }
            else if(blueC === "red"){
                fill(255, 0, 0);
            }
            ellipse(tg(data[2]), tg(data[1]), 5, 5);
            var edata = rTroops[data[3]];
            testRDeath[data[3]] = 1;
            var xdif = edata[4] - data[1];
            var ydif = edata[5] - data[2];
            var cdis = sqrt(xdif*xdif+ydif*ydif);
            //Enemy effects (ultra invulnerable)
            var uinv = false;
            if(edata[23] !== undefined){
                var m = edata[23].length-1;
                while(m > -1){
                    if(edata[23][m] !== undefined){
                        if(edata[23][m][0] === "uinvulnerable" && edata[23][m][1] > 0){
                            uinv = true;
                        }
                    }
                    m--;
                }
            }
            var targetA = data[7];
            //Apply stun?
            var stun = 0;
            //Apply slow?
            var slow = 0;
            //Chain gang?
            var chain = false;
            //Firecracker spread?
            var spread = false;
            //Snaring?
            var snare = 0;
            if(data.length > 8){
                //Effect checker
                var effectD = data[8];
                var j = effectD.length-1;
                while(j > -1){
                    var d = effectD[j];
                    if(d[0] === "stun" && d[1] > 0){
                        stun = d[1];
                    }
                    if(d[0] === "slow" && d[1] > 0){
                        slow = d[1];
                    }
                    if(d[0] === "chain"){
                        chain = d;
                    }
                    if(d[0] === "snare" && d[1] > 0){
                        snare = d[1];
                    }
                    if(d[0] === "spread"){
                        spread = d;
                    }
                    j--;
                }
            }
            if(data[6] === undefined){
                data[6] = 0;
            }
            var ang = degrees(atan2(ydif, xdif));
            var boomer1 = data[1]+data[5]*cos(radians(ang))/spdm;
            var boomer2 = data[2]+data[5]*sin(radians(ang))/spdm;
            //println(boomer1 + " " + boomer2 + " " + data[1] + " " + data[2] + " " + edata[4] + " " + edata[5] + " " + edata[6]*0.5);
            if(projLines){
                stroke(0, 0, 255);
                line(tg(boomer2), tg(boomer1), tg(data[2]), tg(data[1]));
                noStroke();
            }
            if(cdis < edata[6]*0.5 || doesLineInterceptCircle(boomer1, boomer2, data[1], data[2], edata[4], edata[5], edata[6]*0.5) === true){
                if(spread !== false){
                    var dire = degrees(atan2(edata[5]-data[2], edata[4]-data[1])-(((spread[1]-1)/2)*spread[2]));
                    var k = 0;
                    while(k < spread[1]){
                        bNProj.push(["shrapnel", edata[4], edata[5], edata[4]+spread[3]*cos(radians(dire)), edata[5]+spread[3]*sin(radians(dire)), spread[4], 0.2, 600, [["pass", 0, spread[3], []]]]);
                        dire += spread[2];
                        k++;
                    }
                    bPDel[i] = 1;
                }
                if(data[6] <= 0){
                    bPDel[i] = 1;
                    if(!uinv){
                    rTroops[data[3]][1] -= data[4];
                    if(stun > 0){
                        rTroops[data[3]][23].push(["stun", stun]);
                    }
                    if(slow > 0){
                        rTroops[data[3]][23].push(["slow", slow]);
                    }
                    if(snare > 0){
                        rTroops[data[3]][23].push(["snare", snare]);
                    }
                    if(chain !== false){
                        //[chain, 2, 3.5, 159, []]
                        chain[4].push(data[3]);
                        var j = rTroops.length-1;
                        var dis = chain[2];
                        var bt = -1;
                        while(j > -1){
                            var xdif = rTroops[j][4] - data[1];
                            var ydif = rTroops[j][5] - data[2];
                            var cdis = sqrt(xdif*xdif+ydif*ydif)-rTroops[j][6]/2-data[6]/2;
                            if(cdis <= dis  && !rTDed[j] && (rTroops[j][21] <= 0)){
                                var i = chain[4].length-1;
                                var canTarget = true;
                                while(i > -1){
                                    if(chain[4][i] === j){
                                        canTarget = false;
                                    }
                                    i--;
                                }
                                var m = 0;
                                while(m < rTroops[j][23].length){
                                    var d = rTroops[j][23][m];
                                    if(d[0] === "nontargetable" && d[1] > 0){
                                        canTarget = false;
                                    }
                                    m++;
                                }
                                if(canTarget){
                                    dis = cdis;
                                    bt = j;
                                }
                            }
                            j--;
                    
                        }
                        if(bt !== -1 && chain[1] > 0){
                            bProj.push(["arrow", data[1], data[2], bt, chain[3], data[5], data[6], data[7], [["stun", stun], chain]]);
                            chain[1]--;
                        }
                    }
                    }
                    else{
                        say("BP"+i+" is blocked by R"+data[3]);
                        rTDed[data[3]] = false;
                    }
                }
                else{
                    data[1] = edata[4];
                    data[2] = edata[5];
                    var j = rTroops.length-1;
                    var dis = data[6];
                    while(j > -1){
                        var xdifa = rTroops[j][4] - data[1];
                        var ydifa = rTroops[j][5] - data[2];
                        var cdisa = sqrt(xdifa*xdifa+ydifa*ydifa)-rTroops[j][6]/2;
                        //if(j === 3 && i === 0){
                        //    say(bTDed[j]);
                        //}
                        if(cdisa <= dis  && rTroops[j][18] !== "bomb" && (rTroops[j][21] <= 0) && ((targetA === "all") || (targetA === "ground" && (rTroops[j][18] === "ground" || rTroops[j][18] === "building" || rTroops[j][18] === "hovering")) || (targetA === "buildings" && rTroops[j][18] === "building") || (targetA === "air" && rTroops[j][18] === "air" || j <= 2))){
                            //Enemy effects (ultra invulnerable)
                            var m = rTroops[j][23].length-1;
                            var uinv = false;
                            while(m > -1){
                                if(rTroops[j][23][m] !== undefined){
                                    if(rTroops[j][23][m][0] === "uinvulnerable" && rTroops[j][23][m][1] > 0){
                                        uinv = true;
                                    }
                                }
                                m--;
                            }
                            bPDel[i] = 1;
                            if(!uinv){
                                rTroops[j][1] -= data[4];
                                say("BP"+i+" splashed "+j+" for "+data[4]);
                                if(stun > 0){
                                    rTroops[j][23].push(["stun", stun]);
                                    say(j+" stunned");
                                }
                                if(slow > 0){
                                    rTroops[j][23].push(["slow", slow]);
                                    say(j+" slowed");
                                }
                                if(snare > 0){
                                    rTroops[j][23].push(["snare", snare]);
                                    say(j+" snared");
                                }
                            }
                            else{
                                say("BP"+i+" cannot hit u-inv R"+j);
                            }
                        }
                        j--;
                    }
                }
            }
            if(edata === null || edata === "null"){
                say("Blue projectile "+i+" deleted");
                bPDel[i] = 1;
            }
            var ang = degrees(atan2(ydif, xdif));
            data[1] += data[5]*cos(radians(ang))/spdm;
            data[2] += data[5]*sin(radians(ang))/spdm;
            cull = false;
            i--;
        }
    }
    
    //["name", x, y, tx, ty, damage, speed, waitTime, aoe]
    
    //Enemy non-targeting projectiles
    
    //["Fireball", "Annnnnd... Fireball. Incinerates a small area, dealing high damage. Reduced damage to Crown Towers.", 4, [["fireball", 0, 0, 572, 0.5, 0.5, 0.0, 0, 0, 0.0, 0.0, 0, 0, 0, -1, false, 0, 2.5, "spell", "all", 1, 30, 30, [], [["spell", ["knockback", 1.8]]]]], "spell"], //44
    //rNProj.push(["spell", 3, 9, data[4], data[5], data[3], data[17], projectileS, d[1]]);
    var i = rNProj.length;
    if(i > 0){
        i--;
        while(i > -1){
            //["", x, y, tx, ty, damage, aoe, speed, special]
            var data = rNProj[i];
            //SPECIAL SNOWFLAKES
            var targetA = "all";
            //Apply stun?
            var stun = 0;
            //Apply slow?
            var slow = 0;
            //Apply KB?
            var kb = 0;
            //Is this a spell?
            var spell = false;
            //Should it wait to take effect?
            var wait = false;
            //Friendly?
            var friendly = false;
            //Crown tower damage?
            var crown = true;
            //Timed deletion?
            var timed = false;
            //RAAGGGGEEE?
            var rage = 0;
            //Spawn troops?
            var spawn = false;
            //Pass through enemies?
            var pass = -10;
            var passA = false;
            //Kill on hit?
            var hitK = false;
            //Different moving?
            var altD = false;
            //Spawn returning projectile on hit?
            var returnP = false;
            //Nado?
            var nadoP = -1;
            //No buildings?
            var noB = false;
            //Only buildings?
            var onB = false;
            //Rectangular
            var rectX = -1;
            var rectY = -1;
            //Sudo KB?
            var sudo = false;
            //Snare?
            var snare = 0;
            //Mirror
            var mirrored = false;
            var mt1 = false;
            //Clone
            var clone = false;
            //Spell mult
            var spm = 0.35;
            //Spread
            var spread = false;
            if(data.length > 8){
                //Effect checker
                var effectD = data[8];
                var j = effectD.length-1;
                while(j > -1){
                    var d = effectD[j];
                    if(d[0] === "stun" && d[1] > 0){
                        stun = d[1];
                    }
                    if(d[0] === "slow" && d[1] > 0){
                        slow = d[1];
                    }
                    if(d[0] === "knockback" && d[1] > 0){
                        kb = d[1];
                    }
                    if(d[0] === "spell"){
                        spell = true;
                        if(d.length > 1){
                            spm = d[1];
                        }
                    }
                    if(d[0] === "wait" && d[1] > 0){
                        d[1]--;
                        wait = true;
                    }
                    if(d[0] === "wait" && d[1] <= 0){
                        if(d.length === 3){
                            d[1] = d[2];
                            wait = false;
                        }
                    }
                    if(d[0] === "friendly"){
                        friendly = true;
                    }
                    if(d[0] === "noCrown"){
                        crown = false;
                    }
                    if(d[0] === "time" && d[1] >= 0){
                        if(mt1 && rage > 0 && d[1] > 150){
                            d[1] += 15;
                        }
                        timed = d[1];
                        d[1]--;
                    }
                    if(d[0] === "rage" && d[1] > 0){
                        rage = d[1];
                        if(rage > timed && timed !== false){
                            rage = timed;
                        }
                    }
                    if(d[0] === "spawn"){
                        spawn = d[1];
                    }
                    if(d[0] === "pass" && !wait){
                        //println(d);
                        cull = false;
                        d[1] += data[7]/spdm;
                        var xdif = data[3] - data[1];
                        var ydif = data[4] - data[2];
                        var ang = degrees(atan2(ydif, xdif));
                        data[3] += data[7]*cos(radians(ang))/spdm;
                        data[4] += data[7]*sin(radians(ang))/spdm;
                        if(d[1] <= d[2]){
                            pass = d[2];
                            passA = d[3];
                        }
                        else{
                            rNPDel[i] = 1;
                            d[1] = 0;
                            d[3] = [];
                        }
                    }
                    if(d[0] === "killOnHit"){
                        hitK = true;
                    }
                    if(d[0] === "graveyard" && !wait){
                        var used = d[3];
                        if(d[1] <= 0){
                            var tester = -1;
                            //println("TEST: "+used);
                            while(tester === -1){
                                tester = floor(random()*16);
                                if(used[tester] === 0){
                                    used[tester] = 1;
                                    var dire = 22.5*tester;
                                    if(mirrored){
                                        rTroops.push(["skeleton", 74, 74, 74, data[1]+3.5*cos(radians(dire)), data[2]+3.5*sin(radians(dire)), 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 9, []]);
                                    }
                                    else{
                                        rTroops.push(["skeleton", 67, 67, 67, data[1]+3.5*cos(radians(dire)), data[2]+3.5*sin(radians(dire)), 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 0, 0, "ground", "ground", 1, 0, 9, []]);
                                    }
                                }
                                else{
                                    tester = -1;
                                }
                            }
                            d[1] = 15;
                        }
                        d[1]--;
                    }
                    if(d[0] === "tmr"){
                        passA = d[3];
                        altD = 1/(d[2]-d[1]-1);
                        d[1]++;
                        if(d[1] >= d[2]){
                            d[1] = 0;
                            rNPDel[i] = 1;
                            altD = -1;
                            passA = [];
                        }
                    }
                    if(d[0] === "return"){
                        cull = false;
                        if(rNPDel[i] === 1 && d[1] === false && rTroops[d[2]] !== "null" && rTroops[d[2]] !== undefined){
                            say("Reverse!");
                            d[1] = true;
                            rNPDel[i] = 0;
                            if(effectD[1][0] === "tmr"){
                                effectD[1][3] = [];
                            }
                            effectD[1] = d[3][0];
                        }
                        if(d[1]){
                            returnP = true;
                            cull = false;
                            if(rTroops[d[2]] !== null && rTroops[d[2]] !== "null"){
                                data[3] = rTroops[d[2]][4];
                                data[4] = rTroops[d[2]][5];
                                var xdif = data[3] - data[1];
                                var ydif = data[4] - data[2];
                                var ang = degrees(atan2(ydif, xdif));
                                data[3] -= 0.6*cos(radians(ang));
                                data[4] -= 0.6*sin(radians(ang));
                            }
                            if(effectD[1][0] === "tmr" && effectD[1][1]+1 === effectD[1][2]){
                                effectD[1][3] = [];
                            }
                        }
                    }
                    if(d[0] === "nado"){
                        //["knockback", time, mtime, dir, dist]
                        nadoP = d[1];
                    }
                    if(d[0] === "hit"){
                        //["hit", 0, 3, 15, 15, []]
                        d[3]--;
                        if(d[3] <= 0 && d[1] < d[2]){
                            var l = 0;
                            var targets = bTroops;
                            var HP = 0;
                            var trgt = -1;
                            if(targets !== []){
                            while(l < targets.length){
                                var xdifa = targets[l][4] - data[1];
                                var ydifa = targets[l][5] - data[2];
                                var cdisa = sqrt(xdifa*xdifa+ydifa*ydifa)-targets[l][6]/2;
                                var canHit = true;
                                var k = 0;
                                if(d[5] !== []){
                                    while(k < d[5].length){
                                        if(d[5][k] === l){
                                            canHit = false;
                                        }
                                        k++;
                                    }
                                }
                                var k = 0;
                                if(targets[l] !== "null" && targets[l][23] !== []){
                                    while(k < targets[l][23].length){
                                        if(targets[l][23][k][0] === "invulnerable"){
                                            canHit = false;
                                        }
                                        k++;
                                    }
                                }
                                if(cdisa <= data[6] && canHit && targets[l][18] !== "bomb" && (targets[l][21] <= 0) && ((targetA === "all") || (targetA === "ground" && (targets[l][18] === "ground" || targets[l][18] === "uground" || targets[l][18] === "building" || targets[l][18] === "hovering")) || (targetA === "buildings" && targets[l][18] === "building") || (targetA === "air" && targets[j][18] === "air" || j <= 2))){
                                    if(targets[l][1] > HP){
                                        trgt = l;
                                        HP = targets[l][1];
                                    }
                                }
                                l++;
                            }
                            d[1]++;
                            if(trgt !== -1){
                                d[5].push(trgt);
                                //println("test");
                                //["name", x, y, target, damage, speed, aoe]
                                if(trgt < 3){
                                    if(version === "retro"){
                                        spm = 0.5;
                                    }
                                    rProj.push(["arrow", targets[trgt][4], targets[trgt][5], trgt, ceil(spm*data[5]), 600, 0, [["stun", stun]]]);
                                }
                                else{
                                    rProj.push(["arrow", targets[trgt][4], targets[trgt][5], trgt, data[5], 600, 0, [["stun", stun]]]);
                                }
                            }
                            }
                            //println("test5");
                            d[3] = d[4];
                        }
                        wait = true;
                    }
                    if(d[0] === "onlyBuildings"){
                        onB = true;
                    }
                    if(d[0] === "noBuildings"){
                        noB = true;
                    }
                    if(d[0] === "ground"){
                        targetA = "ground";
                    }
                    //Log
                    //["pass", 0, 11.1, []], ["rect", 3.9, 1.2], ["sudoKnockback", 1], ["forward", 11.1], ["ground"], ["spell"]
                    if(d[0] === "forward"){
                        if(d[1] !== 0){
                            data[4] = data[2];
                            data[3] = data[1] + d[1];
                            //IMPORTANT: -d[1] for B
                            d[1] = 0;
                        }
                    }
                    if(d[0] === "sudoKnockback" && d[1] > 0){
                        kb = d[1];
                        sudo = true;
                    }
                    if(d[0] === "rect"){
                        rectX = d[1];
                        rectY = d[2];
                    }
                    if(d[0] === "snare" && d[1] > 0){
                        snare = d[1];
                    }
                    if(d[0] === "mirror"){
                        mirrored = true;
                        if(d[1] === false){
                            mt1 = true;
                            d[1] = true;
                        }
                    }
                    if(d[0] === "clone"){
                        clone = true;
                    }
                    if(d[0] === "spread"){
                        spread = d;
                    }
                    //println("test6");
                    j--;
                }
            }
            //println("test7");
            if(!wait && altD !== -1){
            var xdif = data[3] - data[1];
            var ydif = data[4] - data[2];
            var cdis = sqrt(xdif*xdif+ydif*ydif);
            if(cdis < 0.5 || pass > 0 || altD){
                var rad = data[6] || 0.2;
                if(redC === "red"){
                    fill(255, 0, 0, 100);
                }
                else if(redC === "purple"){
                    fill(255, 0, 127, 100);
                }
                else if(redC === "orange"){
                    fill(255, 127, 0, 100);
                }
                else if(redC === "green"){
                    fill(0, 200, 0, 100);
                }
                else if(redC === "blue"){
                    fill(0, 0, 255, 100);
                }
                if(rectX < 0 && rectY < 0){
                    ellipse(tg(data[2]), tg(data[1]), rad*30, rad*30);
                }
                else{
                    rect(tg(data[2]-rectX/2), tg(data[1]-rectY/2), rectX*15, rectY*15);
                }
                if(cdis < 0.5 && !returnP){
                    data[1] = data[3];
                    data[2] = data[4];
                }
                var targets = bTroops;
                if(friendly){
                    targets = rTroops;
                }
                var j = 0;
                var dis = data[6];
                var cloneA = [];
                while(j < targets.length){
                    var xdifa = targets[j][4] - data[1];
                    var ydifa = targets[j][5] - data[2];
                    var cdisa = sqrt(xdifa*xdifa+ydifa*ydifa)-targets[j][6]/2;
                    //if(j === 3 && i === 0){
                    //    say(bTDed[j]);
                    //}
                    var canHit = true;
                    if(passA !== false && passA !== []){
                        var k = passA.length - 1;
                        while(k > -1){
                            if(passA[k] === j){
                                canHit = false;
                            }
                            k--;
                        }
                    }
                    var k = 0;
                    if(targets[j][23] !== [] && targets[j] !== "null"){
                        while(k < targets[j][23].length){
                            if(targets[j][23][k][0] === "invulnerable"){
                                canHit = false;
                            }
                            k++;
                        }
                    }
                    if(noB && targets[j] !== "null" && targets[j][18] === "building" && j > 2){
                        canHit = false;
                    }
                    if(onB && targets[j] !== "null" && (targets[j][18] !== "building" || j <= 2)){
                        canHit = false;
                    }
                    //Log
                    var contact = false;
                    if(rectX < 0 && rectY < 0){
                        contact = cdisa <= data[6];
                    }
                    else{
                        var radus = targets[j][6]/2;
                        contact = circleToRect(targets[j][5], targets[j][4], radus, data[2], data[1], rectX, rectY);
                        //circleToRect = function(cx, cy, cr, rx, ry, rw, rh)
                    }
                    if(clone){
                        canHit = true;
                    }
                    if(contact && canHit === true && targets[j][18] !== "bomb" && (targets[j][21] <= 0) && ((targetA === "all") || (targetA === "ground" && (targets[j][18] === "ground" || targets[j][18] === "uground" || targets[j][18] === "building" || targets[j][18] === "hovering")) || (targetA === "buildings" && targets[j][18] === "building") || (targetA === "air" && targets[j][18] === "air" || j <= 2))){
                        if(passA !== false){
                            passA.push(j);
                        }
                        if(data[5] !== 0){
                            if(spell && j <= 2){
                                targets[j][1] -= ceil(0.35*data[5]);
                                if((!timed && pass <= 0 && !altD) || hitK){
                                    rNPDel[i] = 1;
                                }
                                say("RNP"+i+" splashed "+j+" for "+ceil(spm*data[5]));
                            }
                            else if(!crown && targets[j][18] === "building"){
                                
                            }
                            else{
                                targets[j][1] -= data[5];
                                if((!timed && pass <= 0 && !altD) || hitK){
                                    rNPDel[i] = 1;
                                }
                                say("RNP"+i+" splashed "+j+" for "+data[5]);
                            }
                        }
                        if(nadoP > 0){
                            var edata = targets[j];
                            var ang = degrees(atan2(data[4]-edata[5], data[3]-edata[4]));
                            if(edata[18] !== "building"){
                                edata[4] += cos(radians(ang))*nadoP/(30*edata[7]);
                                edata[5] += sin(radians(ang))*nadoP/(30*edata[7]);
                            }
                        }
                        if(stun > 0){
                            targets[j][23].push(["stun", stun]);
                        }
                        if(slow > 0){
                            targets[j][23].push(["slow", slow]);
                        }
                        if(snare > 0){
                            targets[j][23].push(["snare", snare]);
                        }
                        if(rage > 0){
                            targets[j][23].push(["rage", rage]);
                        }
                        if(kb > 0 && targets[j][7] !== 0){
                            if(rectX < 0 && rectY < 0){
                                if(sudo){
                                    targets[j][23].push(["sudoKnockback", 15, 30, degrees(atan2(ydifa, xdifa)), kb]);
                                }
                                else{
                                    targets[j][23].push(["knockback", 15, 30, degrees(atan2(ydifa, xdifa)), kb]);
                                }
                            }
                            else{
                                var angKB = angCircRect(targets[j][5], targets[j][4], targets[j][6]/2, data[2], data[1], rectX, rectY);
                                if(sudo){
                                    targets[j][23].push(["sudoKnockback", 15, 30, angKB, kb]);
                                }
                                else{
                                    targets[j][23].push(["knockback", 15, 30, angKB, kb]);
                                }
                            }
                        }
                        if(clone){
                            if(targets[j][2] > 1 && (targets[j][18] === "ground" || targets[j][18] === "air" || targets[j][18] === "hovering" || targets[j][18] === "link")){
                                var test = [[""], [""], [""], [""], [""]];
                                //Coherence is stupid.
                                var q = 0;
                                var cloneM = false;
                                while(q < targets[j][24].length){
                                    if(targets[j][24][q].length === undefined){
                                        test[q] = (targets[j][24][q]);
                                    }
                                    else{
                                        test[q] = [];
                                        var w = 0;
                                        while(w < targets[j][24][q].length){
                                            if(targets[j][24][q][w].length === undefined || w === 0 || targets[j][24][q][w] === "snare"){
                                                test[q][w] = (targets[j][24][q][w]);
                                                if(test[q][w] === "mirror"){
                                                    cloneM = true;
                                                }
                                                if(test[q][0] === "linked" && w === 1){
                                                    var p = cloneA.length - 1;
                                                    while(p > -1){
                                                        say(cloneA[p][0]+"->"+cloneA[p][1]);
                                                        if(test[q][w] === cloneA[p][0]){
                                                            test[q][w] = cloneA[p][1];
                                                        }
                                                        p--;
                                                    }
                                                }
                                            }
                                            else{
                                                test[q][w] = [];
                                                var e = 0;
                                                while(e < targets[j][24][q][w].length){
                                                    if(targets[j][24][q][w][e].length === undefined){
                                                        test[q][w][e] = (targets[j][24][q][w][e]);
                                                    }
                                                    else{
                                                        test[q][w][e] = [];
                                                        var r = 0;
                                                        while(r < targets[j][24][q][w][e].length){
                                                            if(targets[j][24][q][w][e][r].length === undefined || r === 0 || r === 18 || r === 19){
                                                                test[q][w][e][r] = (targets[j][24][q][w][e][r]);
                                                            }
                                                            else{
                                                                test[q][w][e][r] = [];
                                                                var t = 0;
                                                                while(t < targets[j][24][q][w][e][r].length && targets[j][24][q][w][e][r][t] !== undefined){
                                                                    if(targets[j][24][q][w][e][r][t].length === undefined){
                                                                        test[q][w][e][r][t] = (targets[j][24][q][w][e][r][t]);
                                                                    }
                                                                    else{
                                                                test[q][w][e][r][t] = [];
                                                                var y = 0;
                                                                while(y < targets[j][24][q][w][e][r][t].length){
                                                                    if(targets[j][24][q][w][e][r][t][y].length === undefined || y === 0 || y === 18 || y === 19){
                                                                        test[q][w][e][r][t][y] = (targets[j][24][q][w][e][r][t][y]);
                                                                    }
                                                                    else{
                                                                test[q][w][e][r][t][y] = [];
                                                                var u = 0;
                                                                while(u < targets[j][24][q][w][e][r][t][y].length && targets[j][24][q][w][e][r][t][y][u] !== undefined){
                                                                    if(targets[j][24][q][w][e][r][t][y][u].length === undefined){
                                                                        test[q][w][e][r][t][y][u] = (targets[j][24][q][w][e][r][t][y][u]);
                                                                    }
                                                                    else{
                                                                test[q][w][e][r][t][y][u] = [];
                                                                var o = 0;
                                                                while(o < targets[j][24][q][w][e][r][t][y][u].length){
                                                                    if(targets[j][24][q][w][e][r][t][y][u][o].length === undefined|| o === 0 || o === 18 || o === 19){
                                                                        test[q][w][e][r][t][y][u][o] = (targets[j][24][q][w][e][r][t][y][u][o]);
                                                                    }
                                                                    else{
                                                                        //I've got nothing.
                                                                    }
                                                                    o++;
                                                                    }
                                                                    }
                                                                    u++;
                                                                    }
                                                                }
                                                                    y++;
                                                                    }
                                                                    }
                                                                    t++;
                                                                }
                                                            }
                                                            r++;
                                                        }
                                                    }
                                                    e++;
                                                }
                                            }
                                            w++;
                                        }
                                    }
                                    q++;
                                }
                                if(mirrored && !cloneM){
                                    test.push(["mirror", false]);
                                }
                                else if(!mirrored && cloneM){
                                    test.push(["antimirror", false]);
                                }
                                targets.push([targets[j][0], 1, 1, targets[j][3], targets[j][4], targets[j][5]-0.05, targets[j][6], targets[j][7], targets[j][8], targets[j][9], targets[j][10], targets[j][11], targets[j][12], targets[j][13], targets[j][14], targets[j][15], targets[j][16], targets[j][17], targets[j][18], targets[j][19], targets[j][20], targets[j][21], targets[j][22], [["cloned"], ["sudoKnockback", 9, 9, 180, 1], ["noCol", 9]], test]);
                                var cindex = targets.length-1;
                                cloneA.push([j, cindex]);
                                targets[j][23].push(["sudoKnockback", 9, 9, 0, 1]);
                            }
                        }
                    }
                    j++;
                }
                if(spawn !== false){
                    var troopsP = spawn;
                    var k = troopsP.length;
                    k--;
                    while(k > -1){
                        troopsP[k][4] *= -1;
                        troopsP[k][5] *= -1;
                        troopsP[k][4] += data[1];
                        troopsP[k][5] += data[2];
                        if(mirrored){
                            if(troopsP[k][24] === undefined){
                                troopsP[k][24] = [["mirror", false]];
                            }
                            else{
                                troopsP[k][24].push(["mirror", false]);
                            }
                        }
                        rTroops.push(troopsP[k]);
                        k--;
                    }
                }
                if(spread !== false){
                    var dire = degrees(atan2(ydif, xdif))-(spread[1]-1)*spread[2]/2;
                    var k = 0;
                    while(k < spread[1]){
                        rNProj.push(["shrapnel", data[3]-0.25*cos(radians(dire)), data[4]-0.25*sin(radians(dire)), data[3]+spread[3]*cos(radians(dire)), data[4]+spread[3]*sin(radians(dire)), spread[4], 0.2, 600, [["pass", 0, spread[3], []]]]);
                        dire += spread[2];
                        k++;
                    }
                    rPDel[i] = 1;
                }
                if(!timed && !altD && pass <= 0){
                    rNPDel[i] = 1;
                }
            }
            else if(rNPDel[i] === 0){
                var rad = 0.5;
                if(redC === "red"){
                    fill(255, 0, 0, 150);
                }
                else if(redC === "purple"){
                    fill(255, 0, 127, 150);
                }
                else if(redC === "orange"){
                    fill(255, 127, 0, 150);
                }
                else if(redC === "green"){
                    fill(0, 200, 0, 150);
                }
                else if(redC === "blue"){
                    fill(0, 0, 255, 150);
                }
                ellipse(tg(data[2]), tg(data[1]), rad*30, rad*30);
            }
            if(!timed && !altD){
                var ang = degrees(atan2(ydif, xdif));
                data[1] += data[7]*cos(radians(ang))/spdm;
                data[2] += data[7]*sin(radians(ang))/spdm;
            }
            else if(!timed && altD){
                var ang = degrees(atan2(ydif, xdif));
                data[1] += altD*cdis*cos(radians(ang));
                data[2] += altD*cdis*sin(radians(ang));
            }
            }
            i--;
        }
    }
    
    //Blue's turn
    var i = bNProj.length;
    if(i > 0){
        i--;
        while(i > -1){
            //["", x, y, tx, ty, damage, aoe, speed, special]
            var data = bNProj[i];
            //SPECIAL SNOWFLAKES
            var targetA = "all";
            //Apply stun?
            var stun = 0;
            //Apply slow?
            var slow = 0;
            //Apply KB?
            var kb = 0;
            //Is this a spell?
            var spell = false;
            //Should it wait to take effect?
            var wait = false;
            //Friendly?
            var friendly = false;
            //Crown tower damage?
            var crown = true;
            //Timed deletion?
            var timed = false;
            //RAAGGGGEEE?
            var rage = 0;
            //Spawn troops?
            var spawn = false;
            //Pass through troops?
            var pass = -10;
            var passA = false;
            //Kill on hit?
            var hitK = false;
            //Alternate travel method?
            var altD = false;
            //Returning to target?
            var returnP = false;
            //Nado?
            var nadoP = -1;
            //No buildings?
            var noB = false;
            //Only buildings?
            var onB = false;
            //Rectangular
            var rectX = -1;
            var rectY = -1;
            //Sudo KB?
            var sudo = false;
            //Snaring?
            var snare = 0;
            //Mirrored?
            var mirrored = false;
            var mt1 = false;
            //Clone
            var clone = false;
            //Spell mult?
            var spm = 0.35;
            //Spread?
            var spread = false;
            if(data.length > 8){
                //Effect checker
                var effectD = data[8];
                var j = effectD.length-1;
                while(j > -1){
                    var d = effectD[j];
                    if(d[0] === "stun" && d[1] > 0){
                        stun = d[1];
                    }
                    if(d[0] === "slow" && d[1] > 0){
                        slow = d[1];
                    }
                    if(d[0] === "knockback" && d[1] > 0){
                        kb = d[1];
                    }
                    if(d[0] === "spell"){
                        spell = true;
                        if(d.length > 1){
                            spm = d[1];
                        }
                    }
                    if(d[0] === "wait" && d[1] > 0){
                        d[1]--;
                        wait = true;
                    }
                    if(d[0] === "wait" && d[1] <= 0){
                        if(d.length === 3){
                            d[1] = d[2];
                            wait = false;
                        }
                    }
                    if(d[0] === "friendly"){
                        friendly = true;
                    }
                    if(d[0] === "noCrown"){
                        crown = false;
                    }
                    if(d[0] === "time" && d[1] >= 0){
                        if(mt1 && rage > 0 && d[1] > 150){
                            d[1] += 15;
                        }
                        timed = d[1];
                        d[1]--;
                    }
                    if(d[0] === "rage" && d[1] > 0){
                        rage = d[1];
                        if(rage > timed && timed !== false){
                            rage = timed;
                        }
                    }
                    if(d[0] === "spawn"){
                        spawn = d[1];
                    }
                    if(d[0] === "pass" && !wait){
                        //println(d);
                        cull = false;
                        d[1] += data[7]/spdm;
                        var xdif = data[3] - data[1];
                        var ydif = data[4] - data[2];
                        var ang = degrees(atan2(ydif, xdif));
                        data[3] += data[7]*cos(radians(ang))/spdm;
                        data[4] += data[7]*sin(radians(ang))/spdm;
                        if(d[1] <= d[2]){
                            pass = d[2];
                            passA = d[3];
                        }
                        else{
                            bNPDel[i] = 1;
                            d[1] = 0;
                            d[3] = [];
                        }
                    }
                    if(d[0] === "killOnHit"){
                        hitK = true;
                    }
                    if(d[0] === "graveyard" && !wait){
                        var used = d[3];
                        if(d[1] <= 0){
                            var tester = -1;
                            //println("TEST: "+used);
                            while(tester === -1){
                                tester = floor(random()*16);
                                if(used[tester] === 0){
                                    used[tester] = 1;
                                    var dire = 22.5*tester;
                                    if(mirrored){
                                        bTroops.push(["skeleton", 74, 74, 74, data[1]+3.5*cos(radians(dire)), data[2]+3.5*sin(radians(dire)), 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 180, 0, "ground", "ground", 1, 0, 9, []]);
                                    }
                                    else{
                                        bTroops.push(["skeleton", 67, 67, 67, data[1]+3.5*cos(radians(dire)), data[2]+3.5*sin(radians(dire)), 1, 1, 90, 0.5, 5.5, 0, 30, 15, -1, false, 180, 0, "ground", "ground", 1, 0, 9, []]);
                                    }
                                }
                                else{
                                    tester = -1;
                                }
                            }
                            d[1] = 15;
                        }
                        d[1]--;
                    }
                    if(d[0] === "tmr"){
                        passA = d[3];
                        altD = 1/(d[2]-d[1]-1);
                        d[1]++;
                        if(d[1] >= d[2]){
                            d[1] = 0;
                            bNPDel[i] = 1;
                            altD = -1;
                            passA = [];
                        }
                    }
                    if(d[0] === "return"){
                        cull = false;
                        if(bNPDel[i] === 1 && d[1] === false && bTroops[d[2]] !== "null" && bTroops[d[2]] !== undefined){
                            say("Reverse!");
                            d[1] = true;
                            bNPDel[i] = 0;
                            if(effectD[1][0] === "tmr"){
                                effectD[1][3] = [];
                            }
                            effectD[1] = d[3][0];
                        }
                        if(d[1]){
                            returnP = true;
                            cull = false;
                            if(bTroops[d[2]] !== null && bTroops[d[2]] !== "null"){
                                data[3] = bTroops[d[2]][4];
                                data[4] = bTroops[d[2]][5];
                                var xdif = data[3] - data[1];
                                var ydif = data[4] - data[2];
                                var ang = degrees(atan2(ydif, xdif));
                                data[3] -= 0.6*cos(radians(ang));
                                data[4] -= 0.6*sin(radians(ang));
                            }
                            if(effectD[1][0] === "tmr" && effectD[1][1]+1 === effectD[1][2]){
                                effectD[1][3] = [];
                            }
                        }
                    }
                    if(d[0] === "nado"){
                        //["knockback", time, mtime, dir, dist]
                        nadoP = d[1];
                    }
                    if(d[0] === "hit"){
                        //["hit", 0, 3, 15, 15, []]
                        d[3]--;
                        if(d[3] <= 0 && d[1] < d[2]){
                            var l = 0;
                            var targets = rTroops;
                            var HP = 0;
                            var trgt = -1;
                            if(targets !== []){
                            while(l < targets.length){
                                var xdifa = targets[l][4] - data[1];
                                var ydifa = targets[l][5] - data[2];
                                var cdisa = sqrt(xdifa*xdifa+ydifa*ydifa)-targets[l][6]/2;
                                var canHit = true;
                                var k = 0;
                                if(d[5] !== []){
                                    while(k < d[5].length){
                                        if(d[5][k] === l){
                                            canHit = false;
                                        }
                                        k++;
                                    }
                                }
                                var k = 0;
                                if(targets[l][23] !== []){
                                    while(k < targets[l][23].length){
                                        if(targets[l][23][k][0] === "invulnerable"){
                                            canHit = false;
                                        }
                                        k++;
                                    }
                                }
                                if(cdisa <= data[6] && canHit && targets[l][18] !== "bomb" && (targets[l][21] <= 0) && ((targetA === "all") || (targetA === "ground" && (targets[l][18] === "ground" || targets[l][18] === "uground" || targets[l][18] === "building" || targets[l][18] === "hovering")) || (targetA === "buildings" && targets[l][18] === "building") || (targetA === "air" && targets[j][18] === "air" || j <= 2))){
                                    if(targets[l][1] > HP){
                                        trgt = l;
                                        HP = targets[l][1];
                                    }
                                }
                                l++;
                            }
                            d[1]++;
                            if(trgt !== -1){
                                d[5].push(trgt);
                                //println("test");
                                //["name", x, y, target, damage, speed, aoe]
                                if(trgt < 3){
                                    if(version === "retro"){
                                        spm = 0.5;
                                    }
                                    bProj.push(["arrow", targets[trgt][4], targets[trgt][5], trgt, ceil(spm*data[5]), 600, 0, [["stun", 15]]]);
                                }
                                else{
                                    bProj.push(["arrow", targets[trgt][4], targets[trgt][5], trgt, data[5], 600, 0, [["stun", 15]]]);
                                }
                            }
                            }
                            //println("test5");
                            d[3] = d[4];
                        }
                        wait = true;
                    }
                    if(d[0] === "onlyBuildings"){
                        onB = true;
                    }
                    if(d[0] === "noBuildings"){
                        noB = true;
                    }
                    if(d[0] === "ground"){
                        targetA = "ground";
                    }
                    //Log
                    //["pass", 0, 11.1, []], ["rect", 3.9, 1.2], ["sudoKnockback", 1], ["forward", 11.1], ["ground"], ["spell"]
                    if(d[0] === "forward"){
                        if(d[1] !== 0){
                            data[4] = data[2];
                            data[3] = data[1] - d[1];
                            d[1] = 0;
                        }
                    }
                    if(d[0] === "sudoKnockback" && d[1] > 0){
                        kb = d[1];
                        sudo = true;
                    }
                    if(d[0] === "rect"){
                        rectX = d[1];
                        rectY = d[2];
                    }
                    if(d[0] === "snare" && d[1] > 0){
                        snare = d[1];
                    }
                    if(d[0] === "mirror"){
                        mirrored = true;
                        if(d[1] === false){
                            mt1 = true;
                            d[1] = true;
                        }
                    }
                    if(d[0] === "clone"){
                        clone = true;
                    }
                    if(d[0] === "spread"){
                        spread = d;
                    }
                    j--;
                }
            }
            if(!wait && altD !== -1){
            var xdif = data[3] - data[1];
            var ydif = data[4] - data[2];
            var cdis = sqrt(xdif*xdif+ydif*ydif);
            if(cdis < 0.5 || pass > 0 || altD){
                var rad = data[6] || 0.2;
                if(blueC === "blue"){
                    fill(0, 0, 255, 100);
                }
                else if(blueC === "purple"){
                    fill(255, 0, 127, 100);
                }
                else if(blueC === "orange"){
                    fill(255, 127, 0, 100);
                }
                else if(blueC === "green"){
                    fill(0, 200, 0, 100);
                }
                else if(blueC === "red"){
                    fill(255, 0, 0, 100);
                }
                if(rectX < 0 && rectY < 0){
                    ellipse(tg(data[2]), tg(data[1]), rad*30, rad*30);
                }
                else{
                    rect(tg(data[2]-rectX/2), tg(data[1]-rectY/2), rectX*15, rectY*15);
                }
                if(cdis < 0.5 && !returnP){
                    data[1] = data[3];
                    data[2] = data[4];
                }
                var targets = rTroops;
                if(friendly){
                    targets = bTroops;
                }
                var j = 0;
                var dis = data[6];
                var cloneA = [];
                while(j < targets.length){
                    var xdifa = targets[j][4] - data[1];
                    var ydifa = targets[j][5] - data[2];
                    var cdisa = sqrt(xdifa*xdifa+ydifa*ydifa)-targets[j][6]/2;
                    //if(j === 3 && i === 0){
                    //    say(bTDed[j]);
                    //}
                    
                    var canHit = true;
                    if(passA !== false && passA !== []){
                        var k = passA.length - 1;
                        while(k > -1){
                            if(passA[k] === j){
                                canHit = false;
                            }
                            k--;
                        }
                    }
                    var k = 0;
                    //println(j);
                    if(targets[j][23] !== [] && targets[j] !== "null"){
                        while(k < targets[j][23].length){
                            if(targets[j][23][k][0] === "invulnerable"){
                                canHit = false;
                            }
                            k++;
                        }
                    }
                    //println(j);
                    if(noB && targets[j] !== "null" && targets[j][18] === "building" && j > 2){
                        canHit = false;
                    }
                    if(onB && targets[j] !== "null" && (targets[j][18] !== "building" || j <= 2)){
                        canHit = false;
                    }
                    //Log
                    var contact = false;
                    if(rectX < 0 && rectY < 0){
                        contact = cdisa <= data[6];
                    }
                    else{
                        var radus = targets[j][6]/2;
                        contact = circleToRect(targets[j][5], targets[j][4], radus, data[2], data[1], rectX, rectY);
                        //circleToRect = function(cx, cy, cr, rx, ry, rw, rh)
                    }
                    if(contact && canHit && targets[j][18] !== "bomb" && (targets[j][21] <= 0) && ((targetA === "all") || (targetA === "ground" && (targets[j][18] === "ground" || targets[j][18] === "uground" || targets[j][18] === "building" || targets[j][18] === "hovering")) || (targetA === "buildings" && targets[j][18] === "building") || (targetA === "air" && targets[j][18] === "air" || j <= 2))){
                        if(passA !== false){
                            passA.push(j);
                        }
                        if(data[5] !== 0){
                            if(spell && j <= 2){
                                targets[j][1] -= ceil(spm*data[5]);
                                if((!timed && pass <= 0 && !altD) || hitK){
                                    bNPDel[i] = 1;
                                }
                                say("BNP"+i+" splashed "+j+" for "+ceil(spm*data[5]));
                            }
                            else if(!crown && targets[j][18] === "building"){
                                
                            }
                            else{
                                targets[j][1] -= data[5];
                                if((!timed && pass <= 0 && !altD) || hitK){
                                    bNPDel[i] = 1;
                                }
                                say("BNP"+i+" splashed "+j+" for "+data[5]);
                            }
                        }
                        if(nadoP > 0){
                            var edata = targets[j];
                            var ang = degrees(atan2(data[4]-edata[5], data[3]-edata[4]));
                            if(edata[18] !== "building"){
                                edata[4] += cos(radians(ang))*nadoP/(30*edata[7]);
                                edata[5] += sin(radians(ang))*nadoP/(30*edata[7]);
                            }
                        }
                        if(stun > 0){
                            targets[j][23].push(["stun", stun]);
                        }
                        if(slow > 0){
                            targets[j][23].push(["slow", slow]);
                        }
                        if(rage > 0){
                            targets[j][23].push(["rage", rage]);
                        }
                        if(snare > 0){
                            targets[j][23].push(["snare", snare]);
                        }
                        if(kb > 0 && targets[j][7] !== 0){
                            if(rectX < 0 && rectY < 0){
                                if(sudo){
                                    targets[j][23].push(["sudoKnockback", 15, 30, degrees(atan2(ydifa, xdifa)), kb]);
                                }
                                else{
                                    targets[j][23].push(["knockback", 15, 30, degrees(atan2(ydifa, xdifa)), kb]);
                                }
                            }
                            else{
                                var angKB = angCircRect(targets[j][5], targets[j][4], targets[j][6]/2, data[2], data[1], rectX, rectY);
                                if(sudo){
                                    targets[j][23].push(["sudoKnockback", 15, 30, angKB, kb]);
                                }
                                else{
                                    targets[j][23].push(["knockback", 15, 30, angKB, kb]);
                                }
                            }
                        }
                        if(clone){
                            if(targets[j][2] > 1 && (targets[j][18] === "ground" || targets[j][18] === "air" || targets[j][18] === "hovering" || targets[j][18] === "link")){
                                var test = [[""], [""], [""], [""], [""]];
                                //Coherence is stupid.
                                var q = 0;
                                var cloneM = false;
                                while(q < targets[j][24].length){
                                    if(targets[j][24][q].length === undefined){
                                        test[q] = (targets[j][24][q]);
                                    }
                                    else{
                                        test[q] = [];
                                        var w = 0;
                                        while(w < targets[j][24][q].length){
                                            if(targets[j][24][q][w].length === undefined || w === 0 || targets[j][24][q][w] === "snare"){
                                                test[q][w] = (targets[j][24][q][w]);
                                                if(test[q][w] === "mirror"){
                                                    cloneM = true;
                                                }
                                                if(test[q][0] === "linked" && w === 1){
                                                    var p = cloneA.length - 1;
                                                    while(p > -1){
                                                        say(cloneA[p][0]+"->"+cloneA[p][1]);
                                                        if(test[q][w] === cloneA[p][0]){
                                                            test[q][w] = cloneA[p][1];
                                                        }
                                                        p--;
                                                    }
                                                }
                                            }
                                            else{
                                                test[q][w] = [];
                                                var e = 0;
                                                while(e < targets[j][24][q][w].length){
                                                    if(targets[j][24][q][w][e].length === undefined){
                                                        test[q][w][e] = (targets[j][24][q][w][e]);
                                                    }
                                                    else{
                                                        test[q][w][e] = [];
                                                        var r = 0;
                                                        while(r < targets[j][24][q][w][e].length){
                                                            if(targets[j][24][q][w][e][r].length === undefined || r === 0 || r === 18 || r === 19){
                                                                test[q][w][e][r] = (targets[j][24][q][w][e][r]);
                                                            }
                                                            else{
                                                                test[q][w][e][r] = [];
                                                                var t = 0;
                                                                while(t < targets[j][24][q][w][e][r].length && targets[j][24][q][w][e][r][t] !== undefined){
                                                                    if(targets[j][24][q][w][e][r][t].length === undefined){
                                                                        test[q][w][e][r][t] = (targets[j][24][q][w][e][r][t]);
                                                                    }
                                                                    else{
test[q][w][e][r][t] = [];
                                                                var y = 0;
                                                                while(y < targets[j][24][q][w][e][r][t].length){
                                                                    if(targets[j][24][q][w][e][r][t][y].length === undefined || y === 0 || y === 18 || y === 19){
                                                                        test[q][w][e][r][t][y] = (targets[j][24][q][w][e][r][t][y]);
                                                                    }
                                                                    else{
test[q][w][e][r][t][y] = [];
                                                                var u = 0;
                                                                while(u < targets[j][24][q][w][e][r][t][y].length && targets[j][24][q][w][e][r][t][y][u] !== undefined){
                                                                    if(targets[j][24][q][w][e][r][t][y][u].length === undefined){
                                                                        test[q][w][e][r][t][y][u] = (targets[j][24][q][w][e][r][t][y][u]);
                                                                    }
                                                                    else{
test[q][w][e][r][t][y][u] = [];
                                                                var o = 0;
                                                                while(o < targets[j][24][q][w][e][r][t][y][u].length){
                                                                    if(targets[j][24][q][w][e][r][t][y][u][o].length === undefined || o === 0 || o === 18 || o === 19){
                                                                        test[q][w][e][r][t][y][u][o] = (targets[j][24][q][w][e][r][t][y][u][o]);
                                                                    }
                                                                    else{
                                                                        //I've got nothing.
                                                                    }
                                                                    o++;
                                                                    }
                                                                    }
                                                                    u++;
                                                                    }
                                                                }
                                                                    y++;
                                                                    }
                                                                    }
                                                                    t++;
                                                                }
                                                            }
                                                            r++;
                                                        }
                                                    }
                                                    e++;
                                                }
                                            }
                                            w++;
                                        }
                                    }
                                    q++;
                                }
                                if(mirrored && !cloneM){
                                    test.push(["mirror", false]);
                                }
                                else if(!mirrored && cloneM){
                                    test.push(["antimirror", false]);
                                }
                                targets.push([targets[j][0], 1, 1, targets[j][3], targets[j][4], targets[j][5]-0.05, targets[j][6], targets[j][7], targets[j][8], targets[j][9], targets[j][10], targets[j][11], targets[j][12], targets[j][13], targets[j][14], targets[j][15], targets[j][16], targets[j][17], targets[j][18], targets[j][19], targets[j][20], targets[j][21], targets[j][22], [["cloned"], ["sudoKnockback", 9, 9, 0, 1], ["noCol", 9]], test]);
                                var cindex = targets.length-1;
                                cloneA.push([j, cindex]);
                                targets[j][23].push(["sudoKnockback", 9, 9, 180, 1]);
                            }
                        }
                    }
                    j++;
                }
                if(spawn !== false){
                    var troopsP = spawn;
                    var k = troopsP.length;
                    k--;
                    while(k > -1){
                        troopsP[k][4] += data[1];
                        troopsP[k][5] += data[2];
                        troopsP[k][16] = 180;
                        if(mirrored){
                            if(troopsP[k][24] === undefined){
                                troopsP[k][24] = [["mirror", false]];
                            }
                            else{
                                troopsP[k][24].push(["mirror", false]);
                            }
                        }
                        bTroops.push(troopsP[k]);
                        k--;
                    }
                }
                if(spread !== false){
                    var dire = degrees(atan2(ydif, xdif))-(spread[1]-1)*spread[2]/2;
                    var ang = dire;
                    var k = 0;
                    while(k < spread[1]){
                        bNProj.push(["shrapnel", data[3]-0.25*cos(radians(dire)), data[4]-0.25*sin(radians(dire)), data[3]+spread[3]*cos(radians(dire)), data[4]+spread[3]*sin(radians(dire)), spread[4], 0.2, 600, [["pass", 0, spread[3], []]]]);
                        dire += spread[2];
                        k++;
                    }
                    rPDel[i] = 1;
                }
                if(!timed && pass <= 0 && !altD){
                    bNPDel[i] = 1;
                }
            }
            else if(bNPDel[i] === 0){
                var rad = 0.5;
                if(blueC === "blue"){
                    fill(0, 0, 255, 150);
                }
                else if(blueC === "purple"){
                    fill(255, 0, 127, 150);
                }
                else if(blueC === "orange"){
                    fill(255, 127, 0, 150);
                }
                else if(blueC === "green"){
                    fill(0, 200, 0, 150);
                }
                else if(blueC === "red"){
                    fill(255, 0, 0, 150);
                }
                ellipse(tg(data[2]), tg(data[1]), rad*30, rad*30);
            }
            if(!timed && !altD){
                var ang = degrees(atan2(ydif, xdif));
                data[1] += data[7]*cos(radians(ang))/spdm;
                data[2] += data[7]*sin(radians(ang))/spdm;
            }
            else if(!timed && altD){
                var ang = degrees(atan2(ydif, xdif));
                data[1] += altD*cdis*cos(radians(ang));
                data[2] += altD*cdis*sin(radians(ang));
            }
            }
            i--;
        }
    }
    
    //Deletion
    var i = rTroops.length;
    if(i > 0){
        i--;
        while(i > -1){
            if(rTDel[i]){
                rTDel[i] = 0;
                rTDed[i] = 0;
                say("Red "+i+" ["+rTroops[i][0][0]+rTroops[i][0][1]+"] has died");
                rTroops.splice(i, 1, "null");
            }
            else if(rTDed[i] && rTroops[i][1] > 0 && testRDeath[i] === 0){
                rTDed[i] = 0;
            }
            i--;
        }
    }
    var i = bTroops.length;
    if(i > 0){
        i--;
        while(i > -1){
            if(bTDel[i]){
                bTDel[i] = 0;
                bTDed[i] = 0;
                say("Blue "+i+" ["+bTroops[i][0][0]+bTroops[i][0][1]+"] has died");
                bTroops.splice(i, 1, "null");
            }
            else if(bTDed[i] && bTroops[i][1] > 0 && testBDeath[i] === 0){
                bTDed[i] = 0;
            }
            i--;
        }
    }
    var i = rProj.length;
    if(i > 0){
        i--;
        while(i > -1){
            if(rPDel[i]){
                rPDel[i] = 0;
                rProj.splice(i, 1);
            }
            i--;
        }
    }
    var i = bProj.length;
    if(i > 0){
        i--;
        while(i > -1){
            if(bPDel[i]){
                bPDel[i] = 0;
                bProj.splice(i, 1);
            }
            i--;
        }
    }
    var i = rNProj.length;
    if(i > 0){
        i--;
        while(i > -1){
            if(rNPDel[i]){
                rNPDel[i] = 0;
                rNProj.splice(i, 1);
            }
            i--;
        }
    }
    var i = bNProj.length;
    if(i > 0){
        i--;
        while(i > -1){
            if(bNPDel[i]){
                bNPDel[i] = 0;
                bNProj.splice(i, 1);
            }
            i--;
        }
    }
    
    if(cull === true){
        //Deletion
        var crT = 0;
        var cbT = 0;
        var i = rTroops.length;
        if(i > 0){
            i--;
            while(i > 2){
                if(rTroops[i] === "null"){
                    rTroops.splice(i, 1);
                    crT++;
                }
                i--;
            }
        }
        var i = bTroops.length;
        if(i > 0){
            i--;
            while(i > 2){
                if(bTroops[i] === "null"){
                    bTroops.splice(i, 1);
                    cbT++;
                }
                i--;
            }
        }
        if(cbT !== 0 || crT !== 0){
            say("Culled "+crT+" red and "+cbT+" blue");
        }
    }
    
    //Tabbed system
    
    //Selecting tabs
    if(mouseP && mY > 35 && mY < 60 && mX > 370 && mX < 520){
        tab = floor((mX-370)/25);
    }
    
    var i = tabs.length-1;
    //say(tab);
    while(i > -1){
        var data = tabs[i];
        //say(data);
        data[0] += data[1];
        if(tab === i && data[0] >= 0){
            if(data[0] > 8){
                data[1]--;
            }
            else if(data[1] !== 0){
                data[1]++;
            }
        }
        if(tab !== i && data[0] <= 16){
            if(data[0] < 8){
                data[1]++;
            }
            else if(data[1] !== 0){
                data[1]--;
            }
        }
        i--;
    }
    
    //Color management
    if(tab === 0){
        targetD = [50, 50, 50];
    }
    if(tab === 1){
        if(pushCounter <= -1){
            targetD = [0, 0, 200];
        }
        else{
            targetD = [0, 0, 0];
        }
    }
    if(tab === 2){
        targetD = [200, 0, 0];
    }
    if(tab === 3){
        targetD = [230, 230, 230];
    }
    if(tab === 4){
        targetD = [0, 250, 250];
    }
    if(tab === 5){
        targetD = [250, 0, 160];
    }
    
    //Color changing
    var i = 0;
    while(i < 3){
        if(targetD[i] > colorD[i]){
            colorD[i] += 10;
        }
        else if(targetD[i] < colorD[i]){
            colorD[i] -= 10;
        }
        i++;
    }
    
    //Message tab
    textSize(15);
    fill(50, 50, 50);
    rect(370, 35+tabs[0][0], 25, 50, 5);
    fill(255, 255, 255);
    text("M", 376, 54+tabs[0][0]);
    //Save tab
    if(pushCounter <= -1){
    fill(0, 0, 200);
    }
    else{
    fill(0, 0, 0);    
    }
    rect(395, 35+tabs[1][0], 25, 50, 5);
    noFill();
    stroke(255, 255, 255);
    strokeWeight(2);
    rect(400, 40+tabs[1][0], 15, 15);
    line(400, 41+tabs[1][0], 415, 48+tabs[1][0]);
    line(400, 54+tabs[1][0], 415, 47+tabs[1][0]);
    strokeWeight(1);
    noStroke();
    //Push tab
    fill(200, 0, 0);
    rect(420, 35+tabs[2][0], 25, 50, 5);
    noFill();
    stroke(255, 255, 255);
    strokeWeight(2);
    line(425, 55+tabs[2][0], 440, 40+tabs[2][0]);
    line(428, 46+tabs[2][0], 434, 52+tabs[2][0]);
    strokeWeight(4);
    line(432, 48+tabs[2][0], 439, 41+tabs[2][0]);
    strokeWeight(1);
    noStroke();
    if(pushCounter >= 0){
        fill(0, 255, 0);
        ellipse(425, 40+tabs[2][0], 2, 2);
        noFill();
        stroke(0, 255, 0);
        ellipse(425, 40+tabs[2][0], frame%30/5, frame%30/5);
        noStroke();
    }
    //Settings tab
    fill(230, 230, 230);
    rect(445, 35+tabs[3][0], 25, 50, 5);
    noFill();
    stroke(100, 100, 100);
    strokeWeight(2);
    ellipse(452, 53+tabs[3][0], 5, 5);
    line(454, 51+tabs[3][0], 462, 43+tabs[3][0]);
    line(461.5, 43+tabs[3][0], 461.5, 41+tabs[3][0]);
    line(461.5, 40.5+tabs[3][0], 463.5, 39+tabs[3][0]);
    line(464, 43.5+tabs[3][0], 462, 43.5+tabs[3][0]);
    line(464, 44+tabs[3][0], 466, 43+tabs[3][0]);
    strokeWeight(1);
    noStroke();
    //Info tab
    fill(0, 250, 250);
    rect(470, 35+tabs[4][0], 25, 50, 5);
    noFill();
    strokeWeight(2);
    stroke(255, 255, 255);
    ellipse(482.5, 47.5+tabs[4][0], 20, 20);
    fill(255, 255, 255);
    text("i", 481, 53+tabs[4][0]);
    strokeWeight(1);
    noStroke();
    //Rules tab
    fill(250, 0, 160);
    rect(495, 35+tabs[5][0], 25, 50, 5);
    fill(255, 255, 255);
    //ellipse(507.5, 52.5+tabs[5][0], 10, 10);
    var e = 0;
    while(e < 10){
        ellipse(504.5+e, 52.5-pow(e, 0.4)*pow(10, 0.6)+tabs[5][0], 10-e, 10-e);
        e+=0.5;
    }
    
    //Resetting text size
    textSize(9);
    
    //Actual tabs
    stroke(0, 0, 0);
    fill(colorD[0], colorD[1], colorD[2]);
    rect(370, 60, 170, 170);
    
    //Messages
    if(tab === 0){
        var i = 0;
        fill(255, 255, 255);
        while(i < messages.length && i < 18){
            text(messages[i], 375, 218-i*9, 150, 150);
            i++;
        }
    }
    //Saving (AKA big glitch zone)
    else if(tab === 1){
        if(pushCounter <= -1){
        fill(255, 255, 255);
        text("Saving will allow you to reload a position at any time. It will save elixir, card positions, and troops, but it will not save decks. WIP feature - may not work 100%.", 385, 70, 150, 160);
        fill(255, 255, 255);
        if(mX > 395 && mX < 445 && mY > 130 && mY < 150){
            fill(240, 240, 240);
            if(mouseP && save1 !== false){
                frame = saveI1;
                var b = [];
                var l = 0;
                while(l < save1[0].length){
                    var bT = [];
                    var m = 0;
                    if(save1[0][l] !== "null"){
                    while(m < save1[0][l].length){
                        if(m < 23){
                            bT.push(save1[0][l][m]);
                        }
                        else{
                            var bS = [];
                            var n = 0;
                            if(save1[0][l][m] !== []){
                            while(n < save1[0][l][m].length){
                                bS.push(save1[0][l][m][n]);
                                n++;
                            }
                            }
                            bT.push(bS);
                        }
                        m++;
                    }
                    }
                    else{
                        bT = "null";
                    }
                    b.push(bT);
                    l++;
                }
                bTroops = b;
                var r = [];
                var l = 0;
                while(l < save1[1].length){
                    var rT = [];
                    var m = 0;
                    if(save1[1][l] !== "null"){
                    while(m < save1[1][l].length){
                        if(m < 23){
                            rT.push(save1[1][l][m]);
                        }
                        else{
                            var rS = [];
                            var n = 0;
                            if(save1[1][l][m] !== []){
                            while(n < save1[1][l][m].length){
                                rS.push(save1[1][l][m][n]);
                                n++;
                            }
                            }
                            rT.push(rS);
                        }
                        m++;
                    }
                    }
                    else{
                        rT = "null";
                    }
                    r.push(rT);
                    l++;
                }
                rTroops = r;
                elixir = save1[2];
                elixirR = save1[3];
                var bO = [];
                var l = 0;
                while(l < save1[4].length){
                    bO.push(save1[4][l]);
                    l++;
                }
                bOrder = bO;
                var rO = [];
                var l = 0;
                while(l < save1[5].length){
                    rO.push(save1[5][l]);
                    l++;
                }
                rOrder = rO;
                //println(save1[5]);
            }
        }
        if(!save1){
            fill(200, 200, 200);
        }
        rect(395, 130, 50, 20);
        fill(255, 255, 255);
        if(mX > 465 && mX < 515 && mY > 130 && mY < 150){
            fill(240, 240, 240);
            if(mouseP){
                saveI1 = frame;
                save1 = [];
                var b = [];
                var l = 0;
                while(l < bTroops.length){
                    var bT = [];
                    var m = 0;
                    if(bTroops[l] !== "null"){
                    while(m < bTroops[l].length){
                        if(m < 23){
                            bT.push(bTroops[l][m]);
                        }
                        else{
                            var bS = [];
                            var n = 0;
                            if(bTroops[l][m] !== []){
                            while(n < bTroops[l][m].length){
                                bS.push(bTroops[l][m][n]);
                                n++;
                            }
                            }
                            bT.push(bS);
                        }
                        m++;
                    }
                    }
                    else{
                        bT = "null";
                    }
                    b.push(bT);
                    l++;
                }
                save1.push(b);
                var r = [];
                var l = 0;
                while(l < rTroops.length){
                    var rT = [];
                    var m = 0;
                    if(rTroops[l] !== "null"){
                    while(m < rTroops[l].length){
                        if(m < 23){
                            rT.push(rTroops[l][m]);
                        }
                        else{
                            var rS = [];
                            var n = 0;
                            if(rTroops[l][m] !== []){
                            while(n < rTroops[l][m].length){
                                rS.push(rTroops[l][m][n]);
                                n++;
                            }
                            }
                            rT.push(rS);
                        }
                        m++;
                    }
                    }
                    else{
                        rT = "null";
                    }
                    r.push(rT);
                    l++;
                }
                save1.push(r);
                save1.push(elixir);
                save1.push(elixirR);
                var bO = [];
                var l = 0;
                while(l < bOrder.length){
                    bO.push(bOrder[l]);
                    l++;
                }
                save1.push(bO);
                var rO = [];
                var l = 0;
                while(l < rOrder.length){
                    rO.push(rOrder[l]);
                    l++;
                }
                save1.push(rO);
                //println(rO);
            }
        }
        rect(465, 130, 50, 20);
        fill(255, 255, 255);
        if(mX > 395 && mX < 445 && mY > 160 && mY < 180){
            fill(240, 240, 240);
            if(mouseP && save2 !== false){
                say("Loaded frame "+saveI2+" state");
                frame = saveI2;
                var b = [];
                var l = 0;
                while(l < save2[0].length){
                    var bT = [];
                    var m = 0;
                    if(save2[0][l] !== "null"){
                    while(m < save2[0][l].length){
                        if(m < 23){
                            bT.push(save2[0][l][m]);
                        }
                        else{
                            var bS = [];
                            var n = 0;
                            if(save2[0][l][m] !== []){
                            while(n < save2[0][l][m].length){
                                bS.push(save2[0][l][m][n]);
                                n++;
                            }
                            }
                            bT.push(bS);
                        }
                        m++;
                    }
                    }
                    else{
                        bT = "null";
                    }
                    b.push(bT);
                    l++;
                }
                bTroops = b;
                var r = [];
                var l = 0;
                while(l < save2[1].length){
                    var rT = [];
                    var m = 0;
                    if(save2[1][l] !== "null"){
                    while(m < save2[1][l].length){
                        if(m < 23){
                            rT.push(save2[1][l][m]);
                        }
                        else{
                            var rS = [];
                            var n = 0;
                            if(save2[1][l][m] !== []){
                            while(n < save2[1][l][m].length){
                                rS.push(save2[1][l][m][n]);
                                n++;
                            }
                            }
                            rT.push(rS);
                        }
                        m++;
                    }
                    }
                    else{
                        rT = "null";
                    }
                    r.push(rT);
                    l++;
                }
                rTroops = r;
                elixir = save2[2];
                elixirR = save2[3];
                var bO = [];
                var l = 0;
                while(l < save2[4].length){
                    bO.push(save2[4][l]);
                    l++;
                }
                bOrder = bO;
                var rO = [];
                var l = 0;
                while(l < save2[5].length){
                    rO.push(save2[5][l]);
                    l++;
                }
                rOrder = rO;
            }
        }
        if(!save2){
            //println(save2);
            fill(200, 200, 200);
        }
        rect(395, 160, 50, 20);
        fill(255, 255, 255);
        if(mX > 465 && mX < 515 && mY > 160 && mY < 180){
            fill(240, 240, 240);
            if(mouseP){
                say("Created save of frame "+frame);
                saveI2 = frame;
                save2 = [];
                var b = [];
                var l = 0;
                while(l < bTroops.length){
                    var bT = [];
                    var m = 0;
                    if(bTroops[l] !== "null"){
                    while(m < bTroops[l].length){
                        if(m < 23){
                            bT.push(bTroops[l][m]);
                        }
                        else{
                            var bS = [];
                            var n = 0;
                            if(bTroops[l][m] !== []){
                            while(n < bTroops[l][m].length){
                                bS.push(bTroops[l][m][n]);
                                n++;
                            }
                            }
                            bT.push(bS);
                        }
                        m++;
                    }
                    }
                    else{
                        bT = "null";
                    }
                    b.push(bT);
                    l++;
                }
                save2.push(b);
                var r = [];
                var l = 0;
                while(l < rTroops.length){
                    var rT = [];
                    var m = 0;
                    if(rTroops[l] !== "null"){
                    while(m < rTroops[l].length){
                        if(m < 23){
                            rT.push(rTroops[l][m]);
                        }
                        else{
                            var rS = [];
                            var n = 0;
                            if(rTroops[l][m] !== []){
                            while(n < rTroops[l][m].length){
                                rS.push(rTroops[l][m][n]);
                                n++;
                            }
                            }
                            rT.push(rS);
                        }
                        m++;
                    }
                    }
                    else{
                        rT = "null";
                    }
                    r.push(rT);
                    l++;
                }
                save2.push(r);
                save2.push(elixir);
                save2.push(elixirR);
                var bO = [];
                var l = 0;
                while(l < bOrder.length){
                    bO.push(bOrder[l]);
                    l++;
                }
                save2.push(bO);
                var rO = [];
                var l = 0;
                while(l < rOrder.length){
                    rO.push(rOrder[l]);
                    l++;
                }
                save2.push(rO);
            }
        }
        rect(465, 160, 50, 20);
        fill(255, 255, 255);
        if(mX > 395 && mX < 445 && mY > 190 && mY < 210){
            fill(240, 240, 240);
            if(mouseP && save3 !== false){
                say("Loaded frame "+saveI3+" state");
                frame = saveI3;
                var b = [];
                var l = 0;
                while(l < save3[0].length){
                    var bT = [];
                    var m = 0;
                    if(save3[0][l] !== "null"){
                    while(m < save3[0][l].length){
                        if(m < 23){
                            bT.push(save3[0][l][m]);
                        }
                        else{
                            var bS = [];
                            var n = 0;
                            if(save3[0][l][m] !== []){
                            while(n < save3[0][l][m].length){
                                bS.push(save3[0][l][m][n]);
                                n++;
                            }
                            }
                            bT.push(bS);
                        }
                        m++;
                    }
                    }
                    else{
                        bT = "null";
                    }
                    b.push(bT);
                    l++;
                }
                bTroops = b;
                var r = [];
                var l = 0;
                while(l < save3[1].length){
                    var rT = [];
                    var m = 0;
                    if(save1[1][l] !== "null"){
                    while(m < save3[1][l].length){
                        if(m < 23){
                            rT.push(save3[1][l][m]);
                        }
                        else{
                            var rS = [];
                            var n = 0;
                            if(save3[1][l][m] !== []){
                            while(n < save3[1][l][m].length){
                                rS.push(save3[1][l][m][n]);
                                n++;
                            }
                            }
                            rT.push(rS);
                        }
                        m++;
                    }
                    }
                    else{
                        rT = "null";
                    }
                    r.push(rT);
                    l++;
                }
                rTroops = r;
                elixir = save3[2];
                elixirR = save3[3];
                var bO = [];
                var l = 0;
                while(l < save3[4].length){
                    bO.push(save3[4][l]);
                    l++;
                }
                bOrder = bO;
                var rO = [];
                var l = 0;
                while(l < save3[5].length){
                    rO.push(save3[5][l]);
                    l++;
                }
                rOrder = rO;
            }
        }
        if(!save3){
            fill(200, 200, 200);
        }
        rect(395, 190, 50, 20);
        fill(255, 255, 255);
        if(mX > 465 && mX < 515 && mY > 190 && mY < 210){
            fill(240, 240, 240);
            if(mouseP){
                say("Created save of frame "+frame);
                saveI3 = frame;
                save3 = [];
                var b = [];
                var l = 0;
                while(l < bTroops.length){
                    var bT = [];
                    var m = 0;
                    if(bTroops[l] !== "null"){
                    while(m < bTroops[l].length){
                        if(m < 23){
                            bT.push(bTroops[l][m]);
                        }
                        else{
                            var bS = [];
                            var n = 0;
                            if(bTroops[l][m] !== []){
                            while(n < bTroops[l][m].length){
                                bS.push(bTroops[l][m][n]);
                                n++;
                            }
                            }
                            bT.push(bS);
                        }
                        m++;
                    }
                    }
                    else{
                        bT = "null";
                    }
                    b.push(bT);
                    l++;
                }
                save3.push(b);
                var r = [];
                var l = 0;
                while(l < rTroops.length){
                    var rT = [];
                    var m = 0;
                    if(rTroops[l] !== "null"){
                    while(m < rTroops[l].length){
                        if(m < 23){
                            rT.push(rTroops[l][m]);
                        }
                        else{
                            var rS = [];
                            var n = 0;
                            if(rTroops[l][m] !== []){
                            while(n < rTroops[l][m].length){
                                rS.push(rTroops[l][m][n]);
                                n++;
                            }
                            }
                            rT.push(rS);
                        }
                        m++;
                    }
                    }
                    else{
                        rT = "null";
                    }
                    r.push(rT);
                    l++;
                }
                save3.push(r);
                save3.push(elixir);
                save3.push(elixirR);
                var bO = [];
                var l = 0;
                while(l < bOrder.length){
                    bO.push(bOrder[l]);
                    l++;
                }
                save3.push(bO);
                var rO = [];
                var l = 0;
                while(l < rOrder.length){
                    rO.push(rOrder[l]);
                    l++;
                }
                save3.push(rO);
            }
        }
        rect(465, 190, 50, 20);
        fill(0, 0, 0);
        textAlign(CENTER, CENTER);
        text("Save #1", 489, 141);
        text("Save #2", 489, 171);
        text("Save #3", 489, 201);
        textSize(8);
        if(saveI1 !== -1){
            text("Load #1\nF"+saveI1, 419, 141);
        }
        if(saveI2 !== -1){
            text("Load #2\nF"+saveI2, 419, 171);
        }
        if(saveI3 !== -1){
            text("Load #3\nF"+saveI3, 419, 201);
        }
        textSize(9);
        textAlign(LEFT, BASELINE);
        }
        else{
        fill(255, 0, 0);
        text("Saving and loading saves is unavailable in Push Mode! Try again after you're finished with the challenge.", 385, 70, 150, 160);    
        }
    }
    //Push
    //push = [[[id, x, y, time]]
    else if(tab === 2){
        fill(255, 255, 255);
        text("Start a push campaign! 1P only.\n\nInfo: \""+pushName+"\"", 385, 70, 150, 160);
        fill(255, 255, 255);
        if(mX > 425 && mX < 485 && mY > 160 && mY < 190){
            fill(240, 240, 240);
            if(mouseP){
                //pushInit();
                rTroops = [["ctower", 4008, 4008, 90, 3, 9, 2.8, 0, 0, 7, 7, 0, 30, 30, -1, false, 0, 0, "building", "all", 1, 0, 0, []],
["ptower", 2534, 2534, 90, 6.5, 3.5, 2, 0, 0, 7.5, 7.5, 0, 24, 30, -1, false, 0, 0, "building", "all", 1, 0, 0, []],
["ptower", 2534, 2534, 90, 6.5, 14.5, 2, 0, 0, 7.5, 7.5, 0, 24, 30, -1, false, 0, 0, "building", "all", 1, 0, 0, []],];
                pushCounter = 0;
                pushTmr = 0;
                regenX = fRate/84;
                pushCur = [];
            }
        }
        rect(425, 160, 60, 30);
        textAlign(CENTER, CENTER);
        text("Difficulty: "+round(difficulty*100)/100, 455, 200);
        fill(0, 0, 0);
        if(pushCounter <= -1){
            text("Start", 455, 176);
        }
        else{
            text("Reset", 455, 176);
        }
        fill(255, 255, 255);
        textAlign(LEFT, BASELINE);
        if(pushCounter > -1){
            text(pushCounter+": "+pushTmr+" until next", 385, 220);
        }
        else{
            text("Push not active", 385, 220);
        }
    }
    //Options
    else if(tab === 3){
        fill(0, 0, 0);
        text("Arena", 380, 75);
        stroke(0, 0, 0);
        fill(245, 245, 245);
        if(mX > 380 && mX < 400 && mY > 80 && mY < 100){
            stroke(30, 30, 30);
            if(mouseP){
                arena = "default";
            }
        }
        if(arena === "default"){
            stroke(0, 255, 0);
        }
        rect(380, 80, 20, 20);
        stroke(0, 0, 0);
        fill(50, 50, 50);
        if(mX > 405 && mX < 425 && mY > 80 && mY < 100){
            stroke(30, 30, 30);
            if(mouseP){
                arena = "dark";
            }
        }
        if(arena === "dark"){
            stroke(0, 255, 0);
        }
        rect(405, 80, 20, 20);
        stroke(0, 0, 0);
        fill(200, 200, 250);
        if(mX > 430 && mX < 450 && mY > 80 && mY < 100){
            stroke(30, 30, 30);
            if(mouseP){
                arena = "ice";
            }
        }
        if(arena === "ice"){
            stroke(0, 255, 0);
        }
        rect(430, 80, 20, 20);
        stroke(0, 0, 0);
        fill(240, 240, 0);
        if(mX > 455 && mX < 475 && mY > 80 && mY < 100){
            stroke(30, 30, 30);
            if(mouseP){
                arena = "royal";
            }
        }
        if(arena === "royal"){
            stroke(0, 255, 0);
        }
        rect(455, 80, 20, 20);
        fill(0, 0, 0);
        text("Your Color", 380, 115);
        stroke(0, 0, 0);
        fill(0, 0, 255);
        if(mX > 380 && mX < 400 && mY > 120 && mY < 140){
            stroke(30, 30, 30);
            if(mouseP){
                blueC = "blue";
            }
        }
        if(blueC === "blue"){
            stroke(0, 255, 0);
        }
        rect(380, 120, 20, 20);
        stroke(0, 0, 0);
        fill(255, 0, 127);
        if(mX > 405 && mX < 425 && mY > 120 && mY < 140){
            stroke(30, 30, 30);
            if(mouseP){
                blueC = "purple";
            }
        }
        if(blueC === "purple"){
            stroke(0, 255, 0);
        }
        rect(405, 120, 20, 20);
        stroke(0, 0, 0);
        fill(0, 200, 0);
        if(mX > 430 && mX < 450 && mY > 120 && mY < 140){
            stroke(30, 30, 30);
            if(mouseP){
                blueC = "green";
            }
        }
        if(blueC === "green"){
            stroke(0, 255, 0);
        }
        rect(430, 120, 20, 20);
        stroke(0, 0, 0);
        fill(255, 127, 0);
        if(mX > 455 && mX < 475 && mY > 120 && mY < 140){
            stroke(30, 30, 30);
            if(mouseP){
                blueC = "orange";
            }
        }
        if(blueC === "orange"){
            stroke(0, 255, 0);
        }
        rect(455, 120, 20, 20);
        stroke(0, 0, 0);
        fill(255, 0, 0);
        if(mX > 480 && mX < 500 && mY > 120 && mY < 140){
            stroke(30, 30, 30);
            if(mouseP){
                blueC = "red";
            }
        }
        if(blueC === "red"){
            stroke(0, 255, 0);
        }
        rect(480, 120, 20, 20);
        fill(0, 0, 0);
        text("Enemy Color", 380, 155);
        stroke(0, 0, 0);
        fill(255, 0, 0);
        if(mX > 380 && mX < 400 && mY > 160 && mY < 180){
            stroke(30, 30, 30);
            if(mouseP){
                redC = "red";
            }
        }
        if(redC === "red"){
            stroke(0, 255, 0);
        }
        rect(380, 160, 20, 20);
        stroke(0, 0, 0);
        fill(255, 0, 127);
        if(mX > 405 && mX < 425 && mY > 160 && mY < 180){
            stroke(30, 30, 30);
            if(mouseP){
                redC = "purple";
            }
        }
        if(redC === "purple"){
            stroke(0, 255, 0);
        }
        rect(405, 160, 20, 20);
        stroke(0, 0, 0);
        fill(0, 200, 0);
        if(mX > 430 && mX < 450 && mY > 160 && mY < 180){
            stroke(30, 30, 30);
            if(mouseP){
                redC = "green";
            }
        }
        if(redC === "green"){
            stroke(0, 255, 0);
        }
        rect(430, 160, 20, 20);
        stroke(0, 0, 0);
        fill(255, 127, 0);
        if(mX > 455 && mX < 475 && mY > 160 && mY < 180){
            stroke(30, 30, 30);
            if(mouseP){
                redC = "orange";
            }
        }
        if(redC === "orange"){
            stroke(0, 255, 0);
        }
        rect(455, 160, 20, 20);
        stroke(0, 0, 0);
        fill(0, 0, 255);
        if(mX > 480 && mX < 500 && mY > 160 && mY < 180){
            stroke(30, 30, 30);
            if(mouseP){
                redC = "blue";
            }
        }
        if(redC === "blue"){
            stroke(0, 255, 0);
        }
        rect(480, 160, 20, 20);
    }
    //Info
    else if(tab === 4){
        noStroke();
        if(drag && dragOX > 370 && dragOX < 540 && dragOY > 60 && dragOY < 230){
            //var dragST = 0;
            //var dragSD = 0;
            //var dragSDir = 0;
            dragST = dragDX - dragSD;
            if(dragST > 50 && dragSDir >= 0 && infoTab !== 1){
                dragSDir = 1;
                dragSD += 50;
                infoTab--;
            }
            if(dragST < -50 && dragSDir <= 0 && infoTab !== 3){
                dragSDir = -1;
                dragSD -= 50;
                infoTab++;
            }
            if(dragST > 0 && dragSDir < 0 && infoTab !== 1){
                dragSD += 50;
                infoTab--;
            }
            if(dragST < 0 && dragSDir > 0 && infoTab !== 3){
                dragSD -= 50;
                infoTab++;
            }
        }
        else{
            dragST = 0;
            dragSD = 0;
            dragSDir = 0;
        }
        if(br === "Blue"){
            if(blueC === "blue"){
                fill(0, 0, 255);
            }
            else if(blueC === "purple"){
                fill(255, 0, 127);
            }
            else if(blueC === "orange"){
                fill(255, 127, 0);
            }
            else if(blueC === "green"){
                fill(0, 200, 0);
            }
            else if(blueC === "red"){
                fill(255, 0, 0);
            }
        }
        else if(br === "Red"){
            if(redC === "red"){
                fill(255, 0, 0);
            }
            else if(redC === "purple"){
                fill(255, 0, 127);
            }
            else if(redC === "orange"){
                fill(255, 127, 0);
            }
            else if(redC === "green"){
                fill(0, 200, 0);
            }
            else if(redC === "blue"){
                fill(0, 0, 255);
            }
        }
        ellipse(380, 70, 10, 10);
        fill(255, 255, 255);
        textSize(15);
        textAlign(CENTER, CENTER);
        var card = -1;
        if(br === "Blue" && bSel !== -1){
            card = bDeck[bOrder[bSel]];
        }
        if(br === "Blue" && bSel === -1 && lastCardB !== -1){
            card = lastCardB;
        }
        if(br === "Red" && rSel !== -1){
            card = rDeck[rOrder[rSel]];
        }
        if(br === "Red" && rSel === -1 && lastCardR !== -1){
            card = lastCardR;
        }
        if(card === -1){
            text("No card selected", 455, 145);
        }
        else{
            textSize(15);
            if(cards[card][0] === "Mirror" && ((br === "Blue" && lastCardB !== -1) || (br === "Red" && lastCardR !== -1))){
                var cardM = -1;
                if(br === "Blue"){
                    cardM = lastCardB;
                }
                if(br === "Red"){
                    cardM = lastCardR;
                }
                text("Mirror", 455, 75);
                textSize(10);
                text(cards[cardM][0], 455, 85);
            }
            else{
                text(cards[card][0], 455, 80);
            }
            if(infoTab === 1 && (cards[card][0] !== "Mirror" || ((br === "Blue" && lastCardB === -1) || (br === "Red" && lastCardR === -1)))){
                fill(255, 255, 255);
                rect(380, 95, 150, 70, 4);
                textSize(9);
                fill(0, 0, 0);
                text(cards[card][1], 382, 97, 146, 66);
            }
            else if(infoTab === 1 && (cards[card][0] === "Mirror" && ((br === "Blue" && lastCardB !== -1) || (br === "Red" && lastCardR !== -1)))){
                fill(255, 255, 255);
                rect(380, 95, 150, 30, 4);
                rect(380, 130, 150, 70, 4);
                fill(0, 0, 0);
                var cardM = -1;
                if(br === "Blue"){
                    cardM = lastCardB;
                }
                if(br === "Red"){
                    cardM = lastCardR;
                }
                textSize(8);
                text(cards[card][1], 382, 97, 146, 26);
                textSize(9);
                text(cards[cardM][1], 382, 132, 146, 66);
            }
            else if(infoTab === 2 && cards[card][0] !== "Mirror"){
                var cdHP = cards[card][3][0][1];
                var cdATK = cards[card][3][0][3];
                fill(255, 255, 255);
                rect(380, 95, 70, 20);
                rect(460, 95, 70, 20);
                fill(0, 0, 0);
                textSize(8);
                textAlign(LEFT, BASELINE);
                text("Health", 381, 103);
                text("Attack", 461, 103);
                textSize(12);
                text(cdHP, 381, 114);
                text(cdATK, 461, 114);
                if(cards[card][3][0][18] === "spell"){
                    fill(255, 255, 255);
                    rect(380, 125, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("AOE", 381, 133);
                    textSize(12);
                    text(cards[card][3][0][17]+"", 381, 144);
                }
                else{
                    fill(255, 255, 255);
                    rect(380, 125, 70, 20);
                    rect(460, 125, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Hit Speed", 381, 133);
                    text("Range", 461, 133);
                    textSize(12);
                    text(floor(cards[card][3][0][12]/30*100)/100+" sec", 381, 144);
                    text(cards[card][3][0][9]+"", 461, 144);
                    fill(255, 255, 255);
                    rect(380, 155, 70, 20);
                    rect(460, 155, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Speed", 381, 163);
                    text("AOE", 461, 163);
                    textSize(12);
                    text(cards[card][3][0][8]+"", 381, 174);
                    text(cards[card][3][0][17]+"", 461, 174);
                    fill(255, 255, 255);
                    rect(380, 185, 70, 20);
                    rect(460, 185, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Type", 381, 193);
                    text("Targets", 461, 193);
                    textSize(12);
                    text(cards[card][3][0][18]+"", 381, 204);
                    text(cards[card][3][0][19]+"", 461, 204);
                }
            }
            else if(infoTab === 2 && cards[card][0] === "Mirror" && ((br === "Blue" && lastCardB !== -1) || (br === "Red" && lastCardR !== -1))){
                var cardM = -1;
                if(br === "Blue"){
                    cardM = lastCardB;
                }
                if(br === "Red"){
                    cardM = lastCardR;
                }
                var cdHP = cards[cardM][3][0][1];
                var cdATK = cards[cardM][3][0][3];
                if(version !== "retro"){
                    cdHP = round(cdHP*1.1);
                    cdATK = round(cdATK*1.1);
                }
                fill(255, 255, 255);
                rect(380, 95, 70, 20);
                rect(460, 95, 70, 20);
                fill(0, 0, 0);
                textSize(8);
                textAlign(LEFT, BASELINE);
                text("Health", 381, 103);
                text("Attack", 461, 103);
                textSize(12);
                text(cdHP, 381, 114);
                text(cdATK, 461, 114);
                if(cards[cardM][3][0][18] === "spell"){
                    fill(255, 255, 255);
                    rect(380, 125, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("AOE", 381, 133);
                    textSize(12);
                    text(cards[cardM][3][0][17]+"", 381, 144);
                }
                else{
                    fill(255, 255, 255);
                    rect(380, 125, 70, 20);
                    rect(460, 125, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Hit Speed", 381, 133);
                    text("Range", 461, 133);
                    textSize(12);
                    text(floor(cards[cardM][3][0][12]/30*100)/100+" sec", 381, 144);
                    text(cards[cardM][3][0][9]+"", 461, 144);
                    fill(255, 255, 255);
                    rect(380, 155, 70, 20);
                    rect(460, 155, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Speed", 381, 163);
                    text("AOE", 461, 163);
                    textSize(12);
                    text(cards[cardM][3][0][8]+"", 381, 174);
                    text(cards[cardM][3][0][17]+"", 461, 174);
                    fill(255, 255, 255);
                    rect(380, 185, 70, 20);
                    rect(460, 185, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Type", 381, 193);
                    text("Targets", 461, 193);
                    textSize(12);
                    text(cards[cardM][3][0][18]+"", 381, 204);
                    text(cards[cardM][3][0][19]+"", 461, 204);
                }
            }
            else if(infoTab === 3 && cards[card][0] !== "Mirror"){
                if(cards[card][3][0].length === 25){
                    var statPos = 1;
                    var statNum = -1;
                    var statId = "";
                    var statNum2 = -1;
                    var statId2 = "";
                    var statNum3 = -1;
                    var statId3 = "";
                var specialD = cards[card][3][0][24];
                var j = -1;
                if(specialD !== undefined){
                    j = specialD.length-1;
                }
                while(j > -1){
                    statNum = -1;
                    statId = "";
                    statNum2 = -1;
                    statId2 = "";
                    statNum3 = -1;
                    statId3 = "";
                    var d = specialD[j];
                    if(d[0] === "lifetime"){
                        statId = "Lifetime";
                        statNum = floor(d[1]*100/30)/100+" sec";
                    }
                    if(d[0] === "split"){
                        //split = d[1];
                        statId = "Split HP";
                        statNum = d[1][0][1];
                        statId2 = "Split ATK";
                        statNum2 = d[1][0][3];
                        if(d[1].length > 1){
                            statId3 = "Split Count";
                            statNum3 = "x"+d[1].length;
                        }
                    }
                    if(d[0] === "stun"){
                        statId = "Stun";
                        statNum = floor(d[1]*100/30)/100+" sec";
                    }
                    if(d[0] === "slow"){
                        statId = "Slow";
                        statNum = floor(d[1]*100/30)/100+" sec";
                    }
                    if(d[0] === "elixir"){
                        statId = "Elixir Generation";
                        statNum = floor(d[2]*100/30)/100+" sec";
                    }
                    if(d[0] === "spawner"){
                        statId = "Spawn Rate";
                        statNum = floor(d[2]*100/30)/100+" sec";
                        statId2 = "Spawned Troop";
                        statNum2 = d[3][0][0];
                        if(d[3].length > 1){
                            statId3 = "Spawn Count";
                            statNum3 = "x"+d[3].length;
                        }
                    }
                    if(d[0] === "inferno"){
                        statId = "Inferno Damage";
                        statNum = d[3]+"-"+d[5];
                    }
                    if(d[0] === "charge"){
                        statId = "Charge Damage";
                        statNum = d[5]+"";
                        statId2 = "Charge Speed";
                        statNum2 = d[6]+"";
                    }
                    //["ddmg", 70, 2, []]
                    if(d[0] === "ddmg"){
                        statId = "Death Damage";
                        statNum = d[1];
                    }
                    if(d[0] === "sdmg"){
                        statId = "Spawn Damage";
                        statNum = d[1];
                    }
                    if(d[0] === "mrange"){
                        //mrange = d[1];
                        statId = "Minimum Range";
                        statNum = d[1]+"";
                    }
                    //["Executioner", "He throws his axe like a boomerang, striking all enemies on the way out AND back. It's a miracle he doesn't lose an arm.", 5, [["executioner", 960, 960, 259, 0.5, 0.5, 1.2, 4, 60, 4.0, 5.5, 0, 27, 12, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["sprnge", 0.6, 4, [["tmr", 0, 15, []]], [["tmr", 0, 33, []]]], ["hitp", 0, 48]]]]], //73
                    if(d[0] === "sprnge"){
                        statId = "True Range";
                        statNum = d[1]+d[2]+cards[card][3][0][18]+"";
                    }
                    if(d[0] === "link"){
                        statId = "Linked Troops";
                        statNum = d[2][0][0];
                    }
                    if(d[0] === "snare"){
                        statId = "Snare";
                        statNum = d[1]/30+" sec";
                    }
                    if(d[0] === "regen"){
                        statId = "Regeneration";
                        statNum = d[3];
                    }
                    if(d[0] === "atkSpawn"){
                        statId = "Attack Spawn";
                        statNum = d[1][0][0];
                    }
                    //["dash", 3.5, 6, 160, 90, 320, 500, 0, 24, false]
                    if(d[0] === "dash"){
                        statId = "Dash Damage";
                        statNum = d[5];
                        statId2 = "Dash Range";
                        statNum2 = d[1]+"-"+d[2];
                    }
                    //["jump", 3.5, 5, 222, 90, 444, 250, 0, 33, -1, 2.2, [["knockback", 1]]]
                    if(d[0] === "jump"){
                        statId = "Jump Damage";
                        statNum = d[5];
                        statId2 = "Jump Range";
                        statNum2 = d[1]+"-"+d[2];
                    }
                    if(d[0] === "ctreduc"){
                        statId = "Tower Damage Mult.";
                        statNum = "x"+d[1];
                    }
                    if(d[0] === "spread"){
                        statId = "Spread Damage";
                        statNum = d[4]+"x"+d[1];
                        statId2 = "Spread Range";
                        statNum2 = d[3]+"";
                    }
                    if(statId !== ""){
                        var bX = 0;
                        var bY = 0;
                        if(statPos%2 === 1){
                            bX = 380;
                        }
                        else{
                            bX = 460;
                        }
                        bY = 65+ceil(statPos/2)*30;
                        fill(255, 255, 255);
                        rect(bX, bY, 70, 20);
                        fill(0, 0, 0);
                        textSize(8);
                        textAlign(LEFT, BASELINE);
                        text(statId, bX+1, bY+8);
                        textSize(12);
                        text(statNum, bX+1, bY+19);
                        statPos++;
                    }
                    if(statId2 !== ""){
                        var bX = 0;
                        var bY = 0;
                        if(statPos%2 === 1){
                            bX = 380;
                        }
                        else{
                            bX = 460;
                        }
                        bY = 65+ceil(statPos/2)*30;
                        fill(255, 255, 255);
                        rect(bX, bY, 70, 20);
                        fill(0, 0, 0);
                        textSize(8);
                        textAlign(LEFT, BASELINE);
                        text(statId2, bX+1, bY+8);
                        textSize(12);
                        text(statNum2, bX+1, bY+19);
                        statPos++;
                    }
                    if(statId3 !== ""){
                        var bX = 0;
                        var bY = 0;
                        if(statPos%2 === 1){
                            bX = 380;
                        }
                        else{
                            bX = 460;
                        }
                        bY = 65+ceil(statPos/2)*30;
                        fill(255, 255, 255);
                        rect(bX, bY, 70, 20);
                        fill(0, 0, 0);
                        textSize(8);
                        textAlign(LEFT, BASELINE);
                        text(statId3, bX+1, bY+8);
                        textSize(12);
                        text(statNum3, bX+1, bY+19);
                        statPos++;
                    }
                    j--;
                }
                if(cards[card][3].length > 1){
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Count", bX+1, bY+8);
                    textSize(12);
                    text("x"+cards[card][3].length, bX+1, bY+19);
                    statPos++;
                }
                if(cards[card][3][0][18] !== "spell"){
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Load Time", bX+1, bY+8);
                    textSize(12);
                    text(floor(cards[card][3][0][13]*100/30)/100+" sec", bX+1, bY+19);
                    statPos++;
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Sight Range", bX+1, bY+8);
                    textSize(12);
                    text(cards[card][3][0][10]+"", bX+1, bY+19);
                    statPos++;
                    if(cards[card][3][0][3] !== 0){
                        var bX = 0;
                        var bY = 0;
                        if(statPos%2 === 1){
                            bX = 380;
                        }
                        else{
                            bX = 460;
                        }
                        bY = 65+ceil(statPos/2)*30;
                        fill(255, 255, 255);
                        rect(bX, bY, 70, 20);
                        fill(0, 0, 0);
                        textSize(8);
                        textAlign(LEFT, BASELINE);
                        text("DPS", bX+1, bY+8);
                        textSize(12);
                        text(round(30*cards[card][3][0][3]/cards[card][3][0][12]), bX+1, bY+19);
                        statPos++;
                    }
                }
                if(statPos <= 1){
                    text("No special stats", 455, 145);
                }
            }
            else{
                var statPos = 1;
                if(cards[card][3].length > 1){
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Count", bX+1, bY+8);
                    textSize(12);
                    text("x"+cards[card][3].length, bX+1, bY+19);
                    statPos++;
                }
                if(cards[card][3][0][18] !== "spell"){
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Load Time", bX+1, bY+8);
                    textSize(12);
                    text(floor(cards[card][3][0][13]*100/30)/100+" sec", bX+1, bY+19);
                    statPos++;
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Sight Range", bX+1, bY+8);
                    textSize(12);
                    text(cards[card][3][0][10]+"", bX+1, bY+19);
                    statPos++;
                    if(cards[card][3][0][3] !== 0){
                        var bX = 0;
                        var bY = 0;
                        if(statPos%2 === 1){
                            bX = 380;
                        }
                        else{
                            bX = 460;
                        }
                        bY = 65+ceil(statPos/2)*30;
                        fill(255, 255, 255);
                        rect(bX, bY, 70, 20);
                        fill(0, 0, 0);
                        textSize(8);
                        textAlign(LEFT, BASELINE);
                        text("DPS", bX+1, bY+8);
                        textSize(12);
                        text(round(30*cards[card][3][0][3]/cards[card][3][0][12]), bX+1, bY+19);
                        statPos++;
                    }
                }
                if(statPos <= 1){
                    text("No special stats", 455, 145);
                }
            }
            }
            else if(infoTab === 3 && cards[card][0] === "Mirror" && ((br === "Blue" && lastCardB !== -1) || (br === "Red" && lastCardR !== -1))){
                var cardM = -1;
                if(br === "Blue"){
                    cardM = lastCardB;
                }
                if(br === "Red"){
                    cardM = lastCardR;
                }
                if(cards[cardM][3][0].length === 25){
                    var statPos = 1;
                    var statNum = -1;
                    var statId = "";
                    var statNum2 = -1;
                    var statId2 = "";
                    var statNum3 = -1;
                    var statId3 = "";
                var specialD = cards[cardM][3][0][24];
                var j = -1;
                if(specialD !== undefined){
                    j = specialD.length-1;
                }
                while(j > -1){
                    statNum = -1;
                    statId = "";
                    statNum2 = -1;
                    statId2 = "";
                    statNum3 = -1;
                    statId3 = "";
                    var d = specialD[j];
                    if(d[0] === "lifetime"){
                        statId = "Lifetime";
                        statNum = floor(d[1]*100/30)/100+" sec";
                    }
                    if(d[0] === "split"){
                        //split = d[1];
                        statId = "Split HP";
                        statNum = d[1][0][1];
                        statId2 = "Split ATK";
                        statNum2 = d[1][0][3];
                        if(d[1].length > 1){
                            statId3 = "Split Count";
                            statNum3 = "x"+d[1].length;
                        }
                        if(version !== "retro"){
                            statNum = round(statNum*1.1);
                            statNum2 = round(statNum2*1.1);
                        }
                    }
                    if(d[0] === "stun"){
                        statId = "Stun";
                        statNum = floor(d[1]*100/30)/100+" sec";
                    }
                    if(d[0] === "slow"){
                        statId = "Slow";
                        statNum = floor(d[1]*100/30)/100+" sec";
                    }
                    if(d[0] === "elixir"){
                        statId = "Elixir Generation";
                        statNum = floor(d[2]*100/30)/100+" sec";
                    }
                    if(d[0] === "spawner"){
                        statId = "Spawn Rate";
                        statNum = floor(d[2]*100/30)/100+" sec";
                        statId2 = "Spawned Troop";
                        statNum2 = d[3][0][0];
                        if(d[3].length > 1){
                            statId3 = "Spawn Count";
                            statNum3 = "x"+d[3].length;
                        }
                    }
                    if(d[0] === "inferno"){
                        statId = "Inferno Damage";
                        statNum = d[3]+"-"+d[5];
                        if(version !== "retro"){
                            statNum = round(d[3]*1.1)+"-"+round(d[5]*1.1);
                        }
                    }
                    if(d[0] === "charge"){
                        statId = "Charge Damage";
                        statNum = d[5];
                        statId2 = "Charge Speed";
                        statNum2 = d[6]+"";
                        if(version !== "retro"){
                            statNum = round(statNum*1.1);
                        }
                    }
                    //["ddmg", 70, 2, []]
                    if(d[0] === "ddmg"){
                        statId = "Death Damage";
                        statNum = d[1];
                        if(version !== "retro"){
                            statNum = round(statNum*1.1);
                        }
                    }
                    if(d[0] === "sdmg"){
                        statId = "Spawn Damage";
                        statNum = d[1];
                        if(version !== "retro"){
                            statNum = round(statNum*1.1);
                        }
                    }
                    if(d[0] === "mrange"){
                        //mrange = d[1];
                        statId = "Minimum Range";
                        statNum = d[1]+"";
                    }
                    //["Executioner", "He throws his axe like a boomerang, striking all enemies on the way out AND back. It's a miracle he doesn't lose an arm.", 5, [["executioner", 960, 960, 259, 0.5, 0.5, 1.2, 4, 60, 4.0, 5.5, 0, 27, 12, -1, false, 0, 1.0, "ground", "all", 1, 30, 30, [], [["sprnge", 0.6, 4, [["tmr", 0, 15, []]], [["tmr", 0, 33, []]]], ["hitp", 0, 48]]]]], //73
                    if(d[0] === "sprnge"){
                        statId = "True Range";
                        statNum = d[1]+d[2]+cards[card][3][0][18]+"";
                    }
                    if(d[0] === "link"){
                        statId = "Linked Troops";
                        statNum = d[2][0][0];
                    }
                    if(d[0] === "snare"){
                        statId = "Snare";
                        statNum = d[1]/30+" sec";
                    }
                    if(d[0] === "regen"){
                        statId = "Regeneration";
                        statNum = d[3];
                        if(version !== "retro"){
                            statNum = round(statNum*1.1);
                        }
                    }
                    if(d[0] === "atkSpawn"){
                        statId = "Attack Spawn";
                        statNum = d[1][0][0];
                    }
                    //["dash", 3.5, 6, 160, 90, 320, 500, 0, 24, false]
                    if(d[0] === "dash"){
                        statId = "Dash Damage";
                        statNum = d[5];
                        if(version !== "retro"){
                            statNum = round(statNum*1.1);
                        }
                        statId2 = "Dash Range";
                        statNum2 = d[1]+"-"+d[2];
                    }
                    //["jump", 3.5, 5, 222, 90, 444, 250, 0, 33, -1, 2.2, [["knockback", 1]]]
                    if(d[0] === "jump"){
                        statId = "Jump Damage";
                        statNum = d[5];
                        if(version !== "retro"){
                            statNum = round(statNum*1.1);
                        }
                        statId2 = "Jump Range";
                        statNum2 = d[1]+"-"+d[2];
                    }
                    if(d[0] === "ctreduc"){
                        statId = "Tower Damage Mult.";
                        statNum = "x"+d[1];
                    }
                    if(d[0] === "spread"){
                        statId = "Spread Damage";
                        statNum = d[4]+"x"+d[1];
                        if(version !== "retro"){
                            statNum = round(d[4]*1.1)+"x"+d[1];
                        }
                        statId2 = "Spread Range";
                        statNum2 = d[3]+"";
                    }
                    if(statId !== ""){
                        var bX = 0;
                        var bY = 0;
                        if(statPos%2 === 1){
                            bX = 380;
                        }
                        else{
                            bX = 460;
                        }
                        bY = 65+ceil(statPos/2)*30;
                        fill(255, 255, 255);
                        rect(bX, bY, 70, 20);
                        fill(0, 0, 0);
                        textSize(8);
                        textAlign(LEFT, BASELINE);
                        text(statId, bX+1, bY+8);
                        textSize(12);
                        text(statNum, bX+1, bY+19);
                        statPos++;
                    }
                    if(statId2 !== ""){
                        var bX = 0;
                        var bY = 0;
                        if(statPos%2 === 1){
                            bX = 380;
                        }
                        else{
                            bX = 460;
                        }
                        bY = 65+ceil(statPos/2)*30;
                        fill(255, 255, 255);
                        rect(bX, bY, 70, 20);
                        fill(0, 0, 0);
                        textSize(8);
                        textAlign(LEFT, BASELINE);
                        text(statId2, bX+1, bY+8);
                        textSize(12);
                        text(statNum2, bX+1, bY+19);
                        statPos++;
                    }
                    if(statId3 !== ""){
                        var bX = 0;
                        var bY = 0;
                        if(statPos%2 === 1){
                            bX = 380;
                        }
                        else{
                            bX = 460;
                        }
                        bY = 65+ceil(statPos/2)*30;
                        fill(255, 255, 255);
                        rect(bX, bY, 70, 20);
                        fill(0, 0, 0);
                        textSize(8);
                        textAlign(LEFT, BASELINE);
                        text(statId3, bX+1, bY+8);
                        textSize(12);
                        text(statNum3, bX+1, bY+19);
                        statPos++;
                    }
                    j--;
                }
                if(cards[cardM][3].length > 1){
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Count", bX+1, bY+8);
                    textSize(12);
                    text("x"+cards[cardM][3].length, bX+1, bY+19);
                    statPos++;
                }
                if(cards[cardM][3][0][18] !== "spell"){
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Load Time", bX+1, bY+8);
                    textSize(12);
                    text(floor(cards[cardM][3][0][13]*100/30)/100+" sec", bX+1, bY+19);
                    statPos++;
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Sight Range", bX+1, bY+8);
                    textSize(12);
                    text(cards[cardM][3][0][10]+"", bX+1, bY+19);
                    statPos++;
                    if(cards[cardM][3][0][3] !== 0){
                        var bX = 0;
                        var bY = 0;
                        if(statPos%2 === 1){
                            bX = 380;
                        }
                        else{
                            bX = 460;
                        }
                        bY = 65+ceil(statPos/2)*30;
                        fill(255, 255, 255);
                        rect(bX, bY, 70, 20);
                        fill(0, 0, 0);
                        textSize(8);
                        textAlign(LEFT, BASELINE);
                        text("DPS", bX+1, bY+8);
                        textSize(12);
                        text(round(30*round(cards[cardM][3][0][3]*1.1)/cards[cardM][3][0][12]), bX+1, bY+19);
                        statPos++;
                    }
                }
                if(statPos <= 1){
                    text("No special stats", 455, 145);
                }
            }
            else{
                var statPos = 1;
                if(cards[card][3].length > 1){
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Count", bX+1, bY+8);
                    textSize(12);
                    text("x"+cards[card][3].length, bX+1, bY+19);
                    statPos++;
                }
                if(cards[card][3][0][18] !== "spell"){
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Load Time", bX+1, bY+8);
                    textSize(12);
                    text(floor(cards[cardM][3][0][12]*100/30)/100+" sec", bX+1, bY+19);
                    statPos++;
                    var bX = 0;
                    var bY = 0;
                    if(statPos%2 === 1){
                        bX = 380;
                    }
                    else{
                        bX = 460;
                    }
                    bY = 65+ceil(statPos/2)*30;
                    fill(255, 255, 255);
                    rect(bX, bY, 70, 20);
                    fill(0, 0, 0);
                    textSize(8);
                    textAlign(LEFT, BASELINE);
                    text("Sight Range", bX+1, bY+8);
                    textSize(12);
                    text(cards[cardM][3][0][10]+"", bX+1, bY+19);
                    statPos++;
                    if(cards[cardM][3][0][3] !== 0){
                        var bX = 0;
                        var bY = 0;
                        if(statPos%2 === 1){
                            bX = 380;
                        }
                        else{
                            bX = 460;
                        }
                        bY = 65+ceil(statPos/2)*30;
                        fill(255, 255, 255);
                        rect(bX, bY, 70, 20);
                        fill(0, 0, 0);
                        textSize(8);
                        textAlign(LEFT, BASELINE);
                        text("DPS", bX+1, bY+8);
                        textSize(12);
                        text(round(30*round(cards[cardM][3][0][3]*1.1)/cards[cardM][3][0][12]), bX+1, bY+19);
                        statPos++;
                    }
                }
                if(statPos <= 1){
                    text("No special stats", 455, 145);
                }
            }
            }
            fill(255, 0, 127, 150);
            ellipse(520, 80, 20, 20);
            fill(255, 255, 255, 150);
            textSize(12);
            textAlign(CENTER, CENTER);
            if(cards[card][0] !== "Mirror" || (br === "Blue" && lastCardB === -1) || (br === "Red" && lastCardR === -1)){
                text(cards[card][2], 520, 80);
            }
            else if(cards[card][0] === "Mirror" && (br === "Blue" && lastCardB !== -1)){
                text(cards[lastCardB][2]+1, 520, 80);
            }
            else if(cards[card][0] === "Mirror" && (br === "Red" && lastCardR !== -1)){
                text(cards[lastCardR][2]+1, 520, 80);
            }
            fill(200, 200, 200);
            ellipse(442, 220, 8, 8);
            ellipse(455, 220, 8, 8);
            ellipse(468, 220, 8, 8);
            fill(255, 255, 255);
            ellipse(429+infoTab*13, 220, 6, 6);
            if(infoTab > 1){
                rect(375, 210, 15, 15, 2);
                if(mouseX > 375 && mouseX < 390 && mouseY > 210 && mouseY < 225 && click){
                    infoTab--;
                }  
            }
            if(infoTab < 3){
                rect(520, 210, 15, 15, 2);
                if(mouseX > 520 && mouseX < 535 && mouseY > 210 && mouseY < 225 && click){
                    infoTab++;
                }
            }
        }
    }
    //Battle rules
    else if(tab === 5){
        fill(0, 0, 0);
        textAlign(LEFT, BASELINE);
        text("Elixir Regeneration - "+(regenX*84)+"x", 380, 75);
        textAlign(CENTER, CENTER);
        stroke(0, 0, 0);
        fill(0, 200, 0);
        if(mX > 380 && mX < 400 && mY > 80 && mY < 100){
            stroke(30, 30, 30);
            if(mouseP){
                regenX = 1/84;
            }
        }
        if(regenX === 1/84){
            stroke(0, 255, 0);
        }
        rect(380, 80, 20, 20);
        stroke(0, 0, 0);
        fill(50, 150, 0);
        if(mX > 405 && mX < 425 && mY > 80 && mY < 100){
            stroke(30, 30, 30);
            if(mouseP){
                regenX = 2/84;
            }
        }
        if(regenX === 2/84){
            stroke(0, 255, 0);
        }
        rect(405, 80, 20, 20);
        stroke(0, 0, 0);
        fill(100, 100, 0);
        if(mX > 430 && mX < 450 && mY > 80 && mY < 100){
            stroke(30, 30, 30);
            if(mouseP){
                regenX = 3/84;
            }
        }
        if(regenX === 3/84){
            stroke(0, 255, 0);
        }
        rect(430, 80, 20, 20);
        stroke(0, 0, 0);
        fill(150, 50, 0);
        if(mX > 455 && mX < 475 && mY > 80 && mY < 100){
            stroke(30, 30, 30);
            if(mouseP){
                regenX = 4/84;
            }
        }
        if(regenX === 4/84){
            stroke(0, 255, 0);
        }
        rect(455, 80, 20, 20);
        stroke(0, 0, 0);
        fill(200, 0, 0);
        if(mX > 480 && mX < 500 && mY > 80 && mY < 100){
            stroke(30, 30, 30);
            if(mouseP){
                regenX = 5/84;
            }
        }
        if(regenX === 5/84){
            stroke(0, 255, 0);
        }
        rect(480, 80, 20, 20);
        fill(0, 0, 0);
        text("1x", 390+1, 91);
        text("2x", 415+1, 91);
        text("3x", 440+1, 91);
        text("4x", 465+1, 91);
        text("5x", 490+1, 91);
        fill(0, 0, 0);
        textAlign(LEFT, BASELINE);
        text("Max Elixir - "+maxE, 380, 115);
        textAlign(CENTER, CENTER);
        stroke(0, 0, 0);
        fill(0, 0, 200);
        if(mX > 380 && mX < 400 && mY > 120 && mY < 140){
            stroke(30, 30, 30);
            if(mouseP){
                maxE = 5;
            }
        }
        if(maxE === 5){
            stroke(0, 255, 0);
        }
        rect(380, 120, 20, 20);
        stroke(0, 0, 0);
        fill(50, 0, 150);
        if(mX > 405 && mX < 425 && mY > 120 && mY < 140){
            stroke(30, 30, 30);
            if(mouseP){
                maxE = 10;
            }
        }
        if(maxE === 10){
            stroke(0, 255, 0);
        }
        rect(405, 120, 20, 20);
        stroke(0, 0, 0);
        fill(100, 0, 100);
        if(mX > 430 && mX < 450 && mY > 120 && mY < 140){
            stroke(30, 30, 30);
            if(mouseP){
                maxE = 12;
            }
        }
        if(maxE === 12){
            stroke(0, 255, 0);
        }
        rect(430, 120, 20, 20);
        stroke(0, 0, 0);
        fill(150, 0, 50);
        if(mX > 455 && mX < 475 && mY > 120 && mY < 140){
            stroke(30, 30, 30);
            if(mouseP){
                maxE = 15;
            }
        }
        if(maxE === 15){
            stroke(0, 255, 0);
        }
        rect(455, 120, 20, 20);
        stroke(0, 0, 0);
        fill(200, 0, 0);
        if(mX > 480 && mX < 500 && mY > 120 && mY < 140){
            stroke(30, 30, 30);
            if(mouseP){
                maxE = 20;
            }
        }
        if(maxE === 20){
            stroke(0, 255, 0);
        }
        rect(480, 120, 20, 20);
        fill(0, 0, 0);
        text("5", 390+1, 131);
        text("10", 415+1, 131);
        text("12", 440+1, 131);
        text("15", 465+1, 131);
        text("20", 490+1, 131);
    }
    textAlign(LEFT, BASELINE);
    
    //Push
    //var push = [[["Goblins", 3, 12, 30]], [["Goblins", 3, 12, 30]]];
    //var pushT = [300];
    //var pushTmr = 0;
    //var pushCounter = -1;
    //var pushName = "Defend";
    //reset = false;
    //setDeck, setOrder
    if(pushCounter >= 0){
        if(pushTmr <= 0){
            pushTmr = 5;
            pushCounter++;
            //println(pushCounter);
            if(pushCounter > push.length){
                say("Campaign completed!");
                pushCounter = -1;
            }
            else{
                say("Wave "+pushCounter+" starting.");
                pushTmr = pushT[pushO[pushCounter-1]];
                if((reset || pushCounter === 1)){
                    elixir = pushE[pushO[pushCounter-1]];
                    if(setDeck !== false){
                        bDeck = setDeck;
                        bOrder = setOrder;
                    }
                    if(orderDeck){
                        shuffle(bOrder);
                    }
                    bProj = [];
                    bNProj = [];
                    rProj = [];
                    rNProj = [];
                    bTroops = [["ctower", 4008, 4008, 90, 29, 9, 2.8, 0, 0, 7, 7, 0, 30, 30, -1, false, 0, 0, "building", "all", 1, 0, 0, []],
["ptower", 2534, 2534, 90, 25.5, 3.5, 2, 0, 0, 7.5, 7.5, 0, 24, 30, -1, false, 0, 0, "building", "all", 1, 0, 0, []],
["ptower", 2534, 2534, 90, 25.5, 14.5, 2, 0, 0, 7.5, 7.5, 0, 24, 30, -1, false, 0, 0, "building", "all", 1, 0, 0, []],];
                }
                pushCur = push[pushO[pushCounter-1]];
            }
        }
        var i = pushCur.length-1;
        while(i > -1){
            cardsInit();
            var data = pushCur[i];
            //println(data);
            data[3]--;
            if(data[3] === 0){
                if(cards[data[0]][0] === "Mirror"){
                    data[0] = lastCardR;
                }
                var troopsP = cards[data[0]][3];
                //println(troopsP);
                var j = troopsP.length;
                j--;
                while(j > -1){
                    troopsP[j][4] -= 0.5;
                    troopsP[j][5] -= 0.5;
                    troopsP[j][4] *= -1;
                    troopsP[j][5] *= -1;
                    troopsP[j][4] += 0.5;
                    troopsP[j][5] += 0.5;
                    troopsP[j][4] += data[1];
                    troopsP[j][5] += data[2];
                    rTroops.push(troopsP[j]);
                    j--;
                }
                say("PushAI placed "+cards[data[0]][0][0]+cards[data[0]][0][1]+" @"+data[1]+","+data[2]);
                lastCardR = data[0];
            }
            i--;
        }
        pushTmr--;
    }
    
    //Blue selected?
    if(blueC === "blue"){
        stroke(0, 0, 255, 100);
    }
    else if(blueC === "purple"){
        stroke(255, 0, 127, 100);
    }
    else if(blueC === "orange"){
        stroke(255, 127, 0, 100);
    }
    else if(blueC === "green"){
        stroke(0, 200, 0, 100);
    }
    else if(blueC === "red"){
        stroke(255, 0, 0, 100);
    }
    fill(255, 255, 255);
    rect(520, 530-(banim)*(banim)*0.1, 10, 10);
    if(blueC === "blue"){
        fill(0, 0, 255);
    }
    else if(blueC === "purple"){
        fill(255, 0, 127);
    }
    else if(blueC === "orange"){
        fill(255, 127, 0);
    }
    else if(blueC === "green"){
        fill(0, 200, 0);
    }
    else if(blueC === "red"){
        fill(255, 0, 0);
    }
    noStroke();
    ellipse(525, 535-(banim)*(banim)*0.1, 6, 6);
    if(br === "Blue" && banim < 10){
        banim++;
    }
    else if(br === "Red" && banim > 0){
        banim--;
    }
    //Elixir bar (Blue)
    if(elixir < maxE){
        elixir += regenX;
    }
    else{
        elixir = maxE;
    }
    if(blueC === "blue"){
        fill(0, 0, 255);
    }
    else if(blueC === "purple"){
        fill(255, 0, 127);
    }
    else if(blueC === "orange"){
        fill(255, 127, 0);
    }
    else if(blueC === "green"){
        fill(0, 200, 0);
    }
    else if(blueC === "red"){
        fill(255, 0, 0);
    }
    noStroke();
    rect(367, 529, 2, 12);
    rect(541, 529, 2, 12);
    fill(255, 255, 255);
    stroke(0, 0, 0);
    rect(369, 529, 171, 11);
    noStroke();
    var mFlash = 0;
    if(elixir === 10){
        mFlash = 20*sin(radians(frame*20));
    }
    fill(255+mFlash, 0+mFlash, 157+mFlash);
    rect(370, 530, elixir*170/maxE, 10);
    var i = maxE-1;
    stroke(0, 0, 0);
    while(i > 0){
        line(370+170*i/maxE, 530, 370+170*i/maxE, 540);
        i--;
    }
    noStroke();
    fill(0, 0, 0);
    textSize(20);
    text(floor(elixir), 372, 526);
    var txtL = textWidth(floor(elixir));
    textSize(10);
    text("Max: "+maxE, 377+txtL, 526);
    if(bSel !== -1){
        if(blueC === "blue"){
            fill(0, 0, 255, 50);
        }
        else if(blueC === "purple"){
            fill(255, 0, 127, 200);
        }
        else if(blueC === "orange"){
            fill(255, 127, 0, 50);
        }
        else if(blueC === "green"){
            fill(0, 200, 0, 50);
        }
        else if(blueC === "red"){
            fill(255, 0, 0, 120);
        }
        rect(370, 530, cards[bDeck[bOrder[bSel]]][2]*170/maxE, 10);
    }
    
    //Red selected?
    if(pushCounter <= -1){
        if(redC === "blue"){
            stroke(0, 0, 255, 100);
        }
        else if(redC === "purple"){
            stroke(255, 0, 127, 100);
        }
        else if(redC === "orange"){
            stroke(255, 127, 0, 100);
        }
        else if(redC === "green"){
            stroke(0, 200, 0, 100);
        }
        else if(redC === "red"){
            stroke(255, 0, 0, 100);
        }
        fill(255, 255, 255);
        rect(520, 280-(ranim)*(ranim)*0.1, 10, 10);
        if(redC === "blue"){
            fill(0, 0, 255);
        }
        else if(redC === "purple"){
            fill(255, 0, 127);
        }
        else if(redC === "orange"){
            fill(255, 127, 0);
        }
        else if(redC === "green"){
            fill(0, 200, 0);
        }
        else if(redC === "red"){
            fill(255, 0, 0);
        }
        noStroke();
        ellipse(525, 285-(ranim)*(ranim)*0.1, 6, 6);
        if(br === "Red" && ranim < 10){
            ranim++;
        }
        else if(br === "Blue" && ranim > 0){
            ranim--;
        }
        //Red elixir bar
        if(elixirR < maxE){
            elixirR += regenX;
        }
        else{
            elixirR = maxE;
        }
        fill(255, 0, 0);
        noStroke();
        rect(367, 279, 2, 12);
        rect(541, 279, 2, 12);
        fill(255, 255, 255);
        stroke(0, 0, 0);
        rect(369, 279, 171, 11);
        noStroke();
        var mFlash = 0;
        if(elixirR === 10){
            mFlash = 20*sin(radians(frame*20));
        }
        fill(255+mFlash, 0+mFlash, 157+mFlash);
        rect(370, 280, elixirR*170/maxE, 10);
        var i = maxE-1;
        stroke(0, 0, 0);
        while(i > 0){
            line(370+170*i/maxE, 280, 370+170*i/maxE, 290);
            i--;
        }
        noStroke();
        fill(0, 0, 0);
        textSize(20);
        text(floor(elixirR), 372, 276);
        var txtL = textWidth(floor(elixirR));
        textSize(10);
        text("Max: "+maxE, 377+txtL, 276);
        if(rSel !== -1){
            if(redC === "blue"){
                fill(0, 0, 255, 50);
            }
            else if(redC === "purple"){
                fill(255, 0, 127, 200);
            }
            else if(redC === "orange"){
                fill(255, 127, 0, 50);
            }
            else if(redC === "green"){
                fill(0, 200, 0, 50);
            }
            else if(redC === "red"){
                fill(255, 0, 0, 120);
            }
            rect(370, 280, cards[rDeck[rOrder[rSel]]][2]*170/maxE, 10);
        }
    }
    
    //Blue Cards
    //var bDeck = [0, 1, 0, 1, 0, 1, 0, 1];
    //var bOrder = [0, 1, 2, 3, 4, 5, 6, 7];
    //var bCardCool = 0;
    //var bCardMCool = 60;
    //var bSel = -1;
    textAlign(CENTER, CENTER);
    stroke(210, 210, 210);
    fill(230, 230, 230);
    if(mX > 370 && mY > 430 && mX < 450 && mY < 460){
        fill(225, 225, 225);
        if(mouseP){
            bSel = 0;
            br = "Blue";
        }
    }
    if(bSel === 0){
        fill(215, 215, 215);
    }
    rect(370, 430, 80, 30);
    fill(230, 230, 230);
    if(mX > 460 && mY > 430 && mX < 540 && mY < 460){
        fill(225, 225, 225);
        if(mouseP){
            bSel = 1;
            br = "Blue";
        }
    }
    if(bSel === 1){
        fill(215, 215, 215);
    }
    rect(460, 430, 80, 30);
    fill(230, 230, 230);
    if(mX > 370 && mY > 470 && mX < 450 && mY < 500){
        fill(225, 225, 225);
        if(mouseP){
            bSel = 2;
            br = "Blue";
        }
    }
    if(bSel === 2){
        fill(215, 215, 215);
    }
    rect(370, 470, 80, 30);
    fill(230, 230, 230);
    if(mX > 460 && mY > 470 && mX < 540 && mY < 500){
        fill(225, 225, 225);
        if(mouseP){
            bSel = 3;
            br = "Blue";
        }
    }
    if(bSel === 3){
        fill(215, 215, 215);
    }
    rect(460, 470, 80, 30);
    fill(0, 0, 0);
    text(cards[bDeck[bOrder[0]]][0], 410, 445);
    text(cards[bDeck[bOrder[1]]][0], 500, 445);
    text(cards[bDeck[bOrder[2]]][0], 410, 485);
    text(cards[bDeck[bOrder[3]]][0], 500, 485);
    textAlign(RIGHT, BASELINE);
    text("Next: "+cards[bDeck[bOrder[4]]][0], 540, 425);
    textAlign(LEFT, BASELINE);
    
    //Red Cards
    //Deck stuff
    //var rDeck = [17, 14, 15, 16, 11, 5, 0, 1];
    //var rOrder = [0, 1, 2, 3, 4, 5, 6, 7];
    //var rCardCool = 0;
    //var rCardMCool = 60;
    //var rSel = -1;
    
    //Who's who
    //var br = "Blue";
    if(pushCounter <= -1){
        textAlign(CENTER, CENTER);
        stroke(210, 210, 210);
        fill(230, 230, 230);
        if(mX > 370 && mY > 300 && mX < 450 && mY < 330){
            fill(225, 225, 225);
            if(mouseP){
                rSel = 0;
                br = "Red";
            }
        }
        if(rSel === 0){
            fill(215, 215, 215);
        }
        rect(370, 300, 80, 30);
        fill(230, 230, 230);
        if(mX > 460 && mY > 300 && mX < 540 && mY < 330){
            fill(225, 225, 225);
            if(mouseP){
                rSel = 1;
                br = "Red";
            }
        }
        if(rSel === 1){
            fill(215, 215, 215);
        }
        rect(460, 300, 80, 30);
        fill(230, 230, 230);
        if(mX > 370 && mY > 340 && mX < 450 && mY < 370){
            fill(225, 225, 225);
            if(mouseP){
                rSel = 2;
                br = "Red";
            }
        }
        if(rSel === 2){
            fill(215, 215, 215);
        }
        rect(370, 340, 80, 30);
        fill(230, 230, 230);
        if(mX > 460 && mY > 340 && mX < 540 && mY < 370){
            fill(225, 225, 225);
            if(mouseP){
                rSel = 3;
                br = "Red";
            }
        }
        if(rSel === 3){
            fill(215, 215, 215);
        }
        rect(460, 340, 80, 30);
        fill(0, 0, 0);
        text(cards[rDeck[rOrder[0]]][0], 410, 315);
        text(cards[rDeck[rOrder[1]]][0], 500, 315);
        text(cards[rDeck[rOrder[2]]][0], 410, 355);
        text(cards[rDeck[rOrder[3]]][0], 500, 355);
        textAlign(LEFT, BASELINE);
        text("Next: "+cards[rDeck[rOrder[4]]][0], 370, 383);
        textAlign(LEFT, BASELINE);
    }
    else{
        br = "Blue";
    }
    
    
    //What tile am I over?
    var tileHover = getTileOver();
    
    //Get tile and spawn cards
    if(tileHover !== null){
        var tileData = getTileInfo(tileHover[0], tileHover[1]);
        var placeable = false;
        if(tileData !== "river" && tileData !== "banned" && tileData !== "princess" && tileData !== "crown"){
            placeable = true;
        }
        noStroke();
        if(br === "Blue" && bSel !== -1){
            if(tileHover[1] < 9 && tileData === "princess" && bTroops[1] === "null"){
                placeable = true;
            }
            if(tileHover[1] > 8 && tileData === "princess" && bTroops[2] === "null"){
                placeable = true;
            }
            if(tileHover[0] < 11){
                placeable = false;
            }
            var spell = false;
            var recruit = false;
            var cardIndex = bDeck[bOrder[bSel]];
            if(cards[cardIndex][0] === "Mirror"){
                cardIndex = lastCardB;
            }
            if(cards[cardIndex].length > 4){
                if(cards[cardIndex][4] === "spell"){
                    spell = true;
                }
                if(cards[cardIndex][4] === "recruits"){
                    recruit = true;
                }
            }
            if(spell){
                if(tileData !== "banned"){
                    placeable = true;
                }
            }
            else if(recruit){
                if(tileHover[1] < 6 || tileHover[1] > 11){
                    placeable = false;
                }
                if(((tileHover[0] > 23 && bTroops[1] === "null" && bTroops[2] === "null") || tileHover[0] > 26) && tileHover[0] < 31){
                    placeable = false;
                }
                fill(255, 0, 0, 10);
                rect(60, 60, 270, 165);
                if(!(rTroops[1] === "null" && rTroops[2] === "null")){
                    rect(60, 225, 270, 90);
                    if(tileHover[0] < 17){
                        placeable = false;
                    }
                }
                if(tileHover[0] < 17 && tileHover[0] > 14){
                    placeable = false;
                }
            }
            else{
                fill(255, 0, 0, 10);
                rect(60, 60, 270, 165);
                if(rTroops[1] !== "null"){
                    rect(60, 225, 135, 90);
                    if(tileHover[0] < 17 && tileHover[1] < 9){
                        placeable = false;
                    }
                }
                if(rTroops[2] !== "null"){
                    rect(195, 225, 135, 90);
                    if(tileHover[0] < 17 && tileHover[1] > 8){
                        placeable = false;
                    }
                }
            }
        }
        if(br === "Red" && rSel !== -1){
            if(tileHover[1] < 9 && tileData === "princess" && rTroops[1] === "null"){
                placeable = true;
            }
            if(tileHover[1] > 8 && tileData === "princess" && rTroops[2] === "null"){
                placeable = true;
            }
            if(tileHover[0] > 20){
                placeable = false;
            }
            var spell = false;
            var recruit = false;
            var cardIndex = rDeck[rOrder[rSel]];
            if(cards[cardIndex][0] === "Mirror"){
                cardIndex = lastCardR;
            }
            if(cards[cardIndex].length > 4){
                if(cards[cardIndex][4] === "spell"){
                    spell = true;
                }
                if(cards[cardIndex][4] === "recruits"){
                    recruit = true;
                }
            }
            if(spell){
                if(tileData !== "banned"){
                    placeable = true;
                }
            }
            else if(recruit){
                if(tileHover[1] < 6 || tileHover[1] > 11){
                    placeable = false;
                }
                if(((tileHover[0] < 8 && rTroops[1] === "null" && rTroops[2] === "null") || tileHover[0] < 5) && tileHover[0] > 0){
                    placeable = false;
                }
                fill(0, 0, 255, 10);
                rect(60, 375, 270, 165);
                if(!(bTroops[1] === "null" && bTroops[2] === "null")){
                    rect(60, 285, 270, 90);
                    if(tileHover[0] > 14){
                        placeable = false;
                    }
                }
                if(tileHover[0] < 17 && tileHover[0] > 14){
                    placeable = false;
                }
            }
            else{
                fill(0, 0, 255, 10);
                rect(60, 375, 270, 165);
                if(bTroops[1] !== "null"){
                    rect(60, 285, 135, 90);
                    if(tileHover[0] > 14 && tileHover[1] < 9){
                        placeable = false;
                    }
                }
                if(bTroops[2] !== "null"){
                    rect(195, 285, 135, 90);
                    if(tileHover[0] > 14 && tileHover[1] > 8){
                        placeable = false;
                    }
                }
            }
        }
        stroke(0, 0, 0, 50);
        if(click){
        if(br === "Blue" && bSel !== -1){
            stroke(0, 0, 0, 100);
            var cardIndex = bDeck[bOrder[bSel]];
            var mirrored = false;
            if(cards[cardIndex][0] === "Mirror"){
                cardIndex = lastCardB;
                mirrored = true;
            }
            var cdata = cards[cardIndex];
            if(mirrored){
                cdata[2]++;
            }
            if(elixir >= cdata[2] && placeable){
                var troopsP = cdata[3];
                var i = troopsP.length;
                i--;
                while(i > -1){
                    troopsP[i][4] += tileHover[0];
                    troopsP[i][5] += tileHover[1];
                    troopsP[i][16] = 180;
                    if(mirrored && version !== "retro"){
                        if(troopsP[i][24] === undefined){
                            troopsP[i][24] = [["mirror", false]];
                        }
                        else{
                            troopsP[i][24].push(["mirror", false]);
                        }
                    }
                    bTroops.push(troopsP[i]);
                    i--;
                }
                elixir -= cdata[2];
                say("B placed "+cdata[0][0]+cdata[0][1]+" @"+tileHover[0]+","+tileHover[1]);
                bOrder.push(bOrder[bSel]);
                //println(bSel+" "+bOrder[bSel]);
                //say(bSel+" "+bOrder[bSel]);
                bOrder.splice(bSel, 1, bOrder[4]);
                bOrder.splice(4, 1);
                bSel = -1;
                lastCardB = cardIndex;
            }
            else{
                say("Blue failed to spawn "+cdata[0][0]+cdata[0][1]);
                if(placeable){
                    say("Not enough elixir!");
                }
                else{
                    say("You can't play here!");
                }
            }
        }
        if(br === "Red" && rSel !== -1){
            stroke(0, 0, 0, 100);
            var cardIndex = rDeck[rOrder[rSel]];
            var mirrored = false;
            if(cards[cardIndex][0] === "Mirror"){
                cardIndex = lastCardR;
                mirrored = true;
            }
            var cdata = cards[cardIndex];
            if(mirrored){
                cdata[2]++;
            }
            if(elixirR >= cdata[2] && placeable){
                var troopsP = cdata[3];
                var i = troopsP.length;
                i--;
                while(i > -1){
                    troopsP[i][4] -= 0.5;
                    troopsP[i][5] -= 0.5;
                    troopsP[i][4] *= -1;
                    troopsP[i][5] *= -1;
                    troopsP[i][4] += 0.5;
                    troopsP[i][5] += 0.5;
                    troopsP[i][4] += tileHover[0];
                    troopsP[i][5] += tileHover[1];
                    if(mirrored && version !== "retro"){
                        if(troopsP[i][24] === undefined){
                            troopsP[i][24] = [["mirror", false]];
                        }
                        else{
                            troopsP[i][24].push(["mirror", false]);
                        }
                    }
                    rTroops.push(troopsP[i]);
                    i--;
                }
                elixirR -= cdata[2];
                say("R placed "+cdata[0][0]+cdata[0][1]+" @"+tileHover[0]+","+tileHover[1]);
                rOrder.push(rOrder[rSel]);
                //println(bSel+" "+bOrder[bSel]);
                //say(bSel+" "+bOrder[bSel]);
                rOrder.splice(rSel, 1, rOrder[4]);
                rOrder.splice(4, 1);
                rSel = -1;
                lastCardR = cardIndex;
            }
            else{
                say("Red failed to spawn "+cdata[0][0]+cdata[0][1]);
                if(placeable){
                    say("Not enough elixir!");
                }
                else{
                    say("You can't play here!");
                }
            }
        }
        }
        strokeWeight(2);
        noFill();
        //Highlights tile
        rect(tileHover[1]*15+60, tileHover[0]*15+60, 15, 15);
    }
    
    //Card changing
    fill(220, 220, 220);
    strokeWeight(1);
    stroke(210, 210, 210);
    rect(400, 560, 220, 30, 10);
    fill(0, 0, 0);
    var goodSwap = false;
    if(countmatch === 1 && ((br === "Blue" && slot < bDeck.length) || (br === "Red" && slot < rDeck.length))){
        fill(0, 150, 0);
        goodSwap = true;
    }
    if(countmatch === 0){
        fill(150, 0, 0);
    }
    if(countmatch === 1){
        text(cards[cardSelect][0]+" ("+searchCode+")", 405, 575);
    }
    else{
        text(searchCode, 405, 575);
    }
    fill(0, 0, 0);
    if(countmatch === 1 && ((br === "Blue" && slot < bDeck.length) || (br === "Red" && slot < rDeck.length))){
        fill(0, 150, 0);
    }
    if(((br === "Blue" && slot >= bDeck.length) || (br === "Red" && slot >= rDeck.length))){
        fill(150, 0, 0);
    }
    if(goodSwap){
        if(br === "Blue"){
            text("rep B "+cards[bDeck[bOrder[slot]]][0]+" (S"+slot+")", 405, 585);
        }
        if(br === "Red"){
            text("rep R "+cards[rDeck[rOrder[slot]]][0]+" (S"+slot+")", 405, 585);
        }
    }
    else{
        text("Slot "+(slot), 405, 585);
    }
    
    //Search icon
    stroke(0, 0, 0);
    strokeWeight(2);
    line(565, 587, 575, 577);
    fill(255, 255, 255, 100);
    ellipse(580, 572, 10*sqrt(2), 10*sqrt(2));
    
    //In other news, the changed cursor.
    stroke(0, 0, 0, 100);
    if(mouseP){
        stroke(0, 0, 0, 200);
    }
    noFill();
    ellipse(mX, mY, 10, 10);
    //ellipse(mX, mY, 6, 6);
    ellipse(mX, mY, 1, 1);
    
    //Displays tile information on hover in testing mode.
    noStroke();
    if(testing){
        fill(0, 0, 0, 100);
        if(mouseP){
            fill(0, 0, 0, 200);
        }
        if(tileHover !== null){
            text(tileHover[0]+","+tileHover[1]+","+getTileInfo(tileHover[0], tileHover[1]), mX+5, mY-5);
        }
    }
    click = false;
}